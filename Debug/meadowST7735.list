
meadowST7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca38  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  0800cc30  0800cc30  0001cc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea48  0800ea48  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea48  0800ea48  0001ea48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea50  0800ea50  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea50  0800ea50  0001ea50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea54  0800ea54  0001ea54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ea58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001da1c  2000006c  0800eac4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001da88  0800eac4  0002da88  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144d4  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250b  00000000  00000000  0003456e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00036a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00037620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ccb  00000000  00000000  000380c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e094  00000000  00000000  00060d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105684  00000000  00000000  0006ee27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  001744ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e7c  00000000  00000000  0017456c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000006c 	.word	0x2000006c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800cc18 	.word	0x0800cc18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000070 	.word	0x20000070
 8000234:	0800cc18 	.word	0x0800cc18

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fd44 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f840 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f9f2 	bl	8000924 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000540:	f000 f8d0 	bl	80006e4 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000544:	f000 f942 	bl	80007cc <MX_SPI2_Init>
  MX_SPI3_Init();
 8000548:	f000 f97e 	bl	8000848 <MX_SPI3_Init>
  MX_UART5_Init();
 800054c:	f000 f9ba 	bl	80008c4 <MX_UART5_Init>
  MX_CRC_Init();
 8000550:	f000 f91a 	bl	8000788 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  GUI_Init();
 8000554:	f005 f80e 	bl	8005574 <GUI_Init>

  GUI_SetBkColor(GUI_BLUE);
 8000558:	f44f 007f 	mov.w	r0, #16711680	; 0xff0000
 800055c:	f004 fea3 	bl	80052a6 <GUI_SetBkColor>
  GUI_Clear();
 8000560:	f004 ffac 	bl	80054bc <GUI_Clear>
  GUI_SetFont(&GUI_Font20B_ASCII);
 8000564:	4811      	ldr	r0, [pc, #68]	; (80005ac <main+0x7c>)
 8000566:	f004 fea5 	bl	80052b4 <GUI_SetFont>
  GUI_SetColor(GUI_YELLOW);
 800056a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800056e:	f004 fe9c 	bl	80052aa <GUI_SetColor>

  GUI_DispStringHCenterAt("ECET260", 80, 20);
 8000572:	2214      	movs	r2, #20
 8000574:	2150      	movs	r1, #80	; 0x50
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <main+0x80>)
 8000578:	f005 fa0e 	bl	8005998 <GUI_DispStringHCenterAt>
  GUI_DispStringHCenterAt("Mel Dundas", 80, 50);
 800057c:	2232      	movs	r2, #50	; 0x32
 800057e:	2150      	movs	r1, #80	; 0x50
 8000580:	480c      	ldr	r0, [pc, #48]	; (80005b4 <main+0x84>)
 8000582:	f005 fa09 	bl	8005998 <GUI_DispStringHCenterAt>

  //hSprite = GUI_DRAW_BITMAP_Create(&bmlemmling_Cartoon_penguin_small, 160-30,120-30);
  //GUI_DRAW_BITMAP_Create(&bmlemmling_Cartoon_penguin_small, 160-30,120-30);

  GUI_Exec();
 8000586:	f004 fe39 	bl	80051fc <GUI_Exec>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LedRed_GPIO_Port, LedRed_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2104      	movs	r1, #4
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <main+0x88>)
 8000590:	f001 fba4 	bl	8001cdc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000594:	20c8      	movs	r0, #200	; 0xc8
 8000596:	f000 fd79 	bl	800108c <HAL_Delay>
	  HAL_GPIO_WritePin(LedRed_GPIO_Port, LedRed_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2104      	movs	r1, #4
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x88>)
 80005a0:	f001 fb9c 	bl	8001cdc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80005a4:	20c8      	movs	r0, #200	; 0xc8
 80005a6:	f000 fd71 	bl	800108c <HAL_Delay>
	  HAL_GPIO_WritePin(LedRed_GPIO_Port, LedRed_Pin, GPIO_PIN_SET);
 80005aa:	e7ee      	b.n	800058a <main+0x5a>
 80005ac:	0800d07c 	.word	0x0800d07c
 80005b0:	0800cc30 	.word	0x0800cc30
 80005b4:	0800cc38 	.word	0x0800cc38
 80005b8:	40020000 	.word	0x40020000

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b8      	sub	sp, #224	; 0xe0
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00c fb1c 	bl	800cc08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 0308 	add.w	r3, r7, #8
 80005e4:	2290      	movs	r2, #144	; 0x90
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f00c fb0d 	bl	800cc08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ee:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <SystemClock_Config+0x120>)
 80005f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f2:	4a3a      	ldr	r2, [pc, #232]	; (80006dc <SystemClock_Config+0x120>)
 80005f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f8:	6413      	str	r3, [r2, #64]	; 0x40
 80005fa:	4b38      	ldr	r3, [pc, #224]	; (80006dc <SystemClock_Config+0x120>)
 80005fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <SystemClock_Config+0x124>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a35      	ldr	r2, [pc, #212]	; (80006e0 <SystemClock_Config+0x124>)
 800060c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <SystemClock_Config+0x124>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 800063a:	2319      	movs	r3, #25
 800063c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000640:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fba6 	bl	8001db0 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800066a:	f000 fa8b 	bl	8000b84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066e:	f001 fb4f 	bl	8001d10 <HAL_PWREx_EnableOverDrive>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 fa84 	bl	8000b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800069e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006a2:	2107      	movs	r1, #7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fe31 	bl	800230c <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80006b0:	f000 fa68 	bl	8000b84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80006b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 0308 	add.w	r3, r7, #8
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fff8 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x116>
  {
    Error_Handler();
 80006ce:	f000 fa59 	bl	8000b84 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	37e0      	adds	r7, #224	; 0xe0
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0x98>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_ADC1_Init+0x9c>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0x98>)
 80006fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_ADC1_Init+0x98>)
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_ADC1_Init+0xa0>)
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_ADC1_Init+0x98>)
 8000746:	f000 fcc5 	bl	80010d4 <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000750:	f000 fa18 	bl	8000b84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000754:	2305      	movs	r3, #5
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2301      	movs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_ADC1_Init+0x98>)
 8000766:	f000 fcf9 	bl	800115c <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000770:	f000 fa08 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2001d88c 	.word	0x2001d88c
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_CRC_Init+0x3c>)
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <MX_CRC_Init+0x40>)
 8000790:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_CRC_Init+0x3c>)
 8000794:	2200      	movs	r2, #0
 8000796:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_CRC_Init+0x3c>)
 800079a:	2200      	movs	r2, #0
 800079c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_CRC_Init+0x3c>)
 80007b2:	f000 fffd 	bl	80017b0 <HAL_CRC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007bc:	f000 f9e2 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	2001d780 	.word	0x2001d780
 80007c8:	40023000 	.word	0x40023000

080007cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_SPI2_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_SPI2_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_SPI2_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI2_Init+0x74>)
 80007e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI2_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SPI2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI2_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SPI2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI2_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_SPI2_Init+0x74>)
 800082c:	f002 fb6c 	bl	8002f08 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 f9a5 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2001d71c 	.word	0x2001d71c
 8000844:	40003800 	.word	0x40003800

08000848 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_SPI3_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_SPI3_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_SPI3_Init+0x74>)
 8000854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000858:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_SPI3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000860:	4b16      	ldr	r3, [pc, #88]	; (80008bc <MX_SPI3_Init+0x74>)
 8000862:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000866:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <MX_SPI3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI3_Init+0x74>)
 8000876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI3_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI3_Init+0x74>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI3_Init+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_SPI3_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI3_Init+0x74>)
 8000896:	2207      	movs	r2, #7
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_SPI3_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI3_Init+0x74>)
 80008a2:	2208      	movs	r2, #8
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_SPI3_Init+0x74>)
 80008a8:	f002 fb2e 	bl	8002f08 <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f967 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2001d7a4 	.word	0x2001d7a4
 80008c0:	40003c00 	.word	0x40003c00

080008c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_UART5_Init+0x58>)
 80008ca:	4a15      	ldr	r2, [pc, #84]	; (8000920 <MX_UART5_Init+0x5c>)
 80008cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_UART5_Init+0x58>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_UART5_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_UART5_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_UART5_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_UART5_Init+0x58>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_UART5_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_UART5_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_UART5_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_UART5_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_UART5_Init+0x58>)
 8000908:	f003 fa12 	bl	8003d30 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000912:	f000 f937 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	2001d808 	.word	0x2001d808
 8000920:	40005000 	.word	0x40005000

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800093a:	4b89      	ldr	r3, [pc, #548]	; (8000b60 <MX_GPIO_Init+0x23c>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a88      	ldr	r2, [pc, #544]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b86      	ldr	r3, [pc, #536]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	623b      	str	r3, [r7, #32]
 8000950:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	4b83      	ldr	r3, [pc, #524]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a82      	ldr	r2, [pc, #520]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b80      	ldr	r3, [pc, #512]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
 8000968:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b7d      	ldr	r3, [pc, #500]	; (8000b60 <MX_GPIO_Init+0x23c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a7c      	ldr	r2, [pc, #496]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b7a      	ldr	r3, [pc, #488]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b77      	ldr	r3, [pc, #476]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a76      	ldr	r2, [pc, #472]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b74      	ldr	r3, [pc, #464]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	617b      	str	r3, [r7, #20]
 8000998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800099a:	4b71      	ldr	r3, [pc, #452]	; (8000b60 <MX_GPIO_Init+0x23c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a70      	ldr	r2, [pc, #448]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b6e      	ldr	r3, [pc, #440]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b2:	4b6b      	ldr	r3, [pc, #428]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a6a      	ldr	r2, [pc, #424]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b68      	ldr	r3, [pc, #416]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	4b65      	ldr	r3, [pc, #404]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a64      	ldr	r2, [pc, #400]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b62      	ldr	r3, [pc, #392]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e2:	4b5f      	ldr	r3, [pc, #380]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a5e      	ldr	r2, [pc, #376]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b5c      	ldr	r3, [pc, #368]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fa:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <MX_GPIO_Init+0x23c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a58      	ldr	r2, [pc, #352]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <MX_GPIO_Init+0x23c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, TFT_RESET_Pin|ESP_BOOT_Pin|ESP_CS_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f240 6101 	movw	r1, #1537	; 0x601
 8000a18:	4852      	ldr	r0, [pc, #328]	; (8000b64 <MX_GPIO_Init+0x240>)
 8000a1a:	f001 f95f 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a24:	4850      	ldr	r0, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x244>)
 8000a26:	f001 f959 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2140      	movs	r1, #64	; 0x40
 8000a2e:	484f      	ldr	r0, [pc, #316]	; (8000b6c <MX_GPIO_Init+0x248>)
 8000a30:	f001 f954 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_RST_GPIO_Port, ESP_RST_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	484d      	ldr	r0, [pc, #308]	; (8000b70 <MX_GPIO_Init+0x24c>)
 8000a3a:	f001 f94f 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedGreen_Pin|LedBlue_Pin|LedRed_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2107      	movs	r1, #7
 8000a42:	484c      	ldr	r0, [pc, #304]	; (8000b74 <MX_GPIO_Init+0x250>)
 8000a44:	f001 f94a 	bl	8001cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : D15_Pin */
  GPIO_InitStruct.Pin = D15_Pin;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(D15_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4847      	ldr	r0, [pc, #284]	; (8000b78 <MX_GPIO_Init+0x254>)
 8000a5c:	f000 ff92 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : D03_Pin D04_Pin D07_Pin D08_Pin
                           D09_Pin D06_Pin D12_Pin D13_Pin */
  GPIO_InitStruct.Pin = D03_Pin|D04_Pin|D07_Pin|D08_Pin
 8000a60:	f24c 33c3 	movw	r3, #50115	; 0xc3c3
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
                          |D09_Pin|D06_Pin|D12_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	4619      	mov	r1, r3
 8000a74:	4841      	ldr	r0, [pc, #260]	; (8000b7c <MX_GPIO_Init+0x258>)
 8000a76:	f000 ff85 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RESET_Pin ESP_BOOT_Pin ESP_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin|ESP_BOOT_Pin|ESP_CS_Pin;
 8000a7a:	f240 6301 	movw	r3, #1537	; 0x601
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	4834      	ldr	r0, [pc, #208]	; (8000b64 <MX_GPIO_Init+0x240>)
 8000a94:	f000 ff76 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_DC_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TFT_DC_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	482d      	ldr	r0, [pc, #180]	; (8000b68 <MX_GPIO_Init+0x244>)
 8000ab2:	f000 ff67 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : D11_Pin D05_Pin */
  GPIO_InitStruct.Pin = D11_Pin|D05_Pin;
 8000ab6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4828      	ldr	r0, [pc, #160]	; (8000b6c <MX_GPIO_Init+0x248>)
 8000acc:	f000 ff5a 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : TFT_CS_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TFT_CS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4821      	ldr	r0, [pc, #132]	; (8000b6c <MX_GPIO_Init+0x248>)
 8000ae8:	f000 ff4c 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ESP_RST_Pin */
  GPIO_InitStruct.Pin = ESP_RST_Pin;
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP_RST_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b00:	4619      	mov	r1, r3
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <MX_GPIO_Init+0x24c>)
 8000b04:	f000 ff3e 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : D14_Pin */
  GPIO_InitStruct.Pin = D14_Pin;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(D14_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4819      	ldr	r0, [pc, #100]	; (8000b80 <MX_GPIO_Init+0x25c>)
 8000b1c:	f000 ff32 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_GPIO_Init+0x244>)
 8000b36:	f000 ff25 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedGreen_Pin LedBlue_Pin LedRed_Pin */
  GPIO_InitStruct.Pin = LedGreen_Pin|LedBlue_Pin|LedRed_Pin;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4808      	ldr	r0, [pc, #32]	; (8000b74 <MX_GPIO_Init+0x250>)
 8000b52:	f000 ff17 	bl	8001984 <HAL_GPIO_Init>

}
 8000b56:	bf00      	nop
 8000b58:	3738      	adds	r7, #56	; 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40022000 	.word	0x40022000
 8000b68:	40021c00 	.word	0x40021c00
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40020000 	.word	0x40020000
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40021800 	.word	0x40021800

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_MspInit+0x44>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a21      	ldr	r2, [pc, #132]	; (8000c7c <HAL_ADC_MspInit+0xa4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d13b      	bne.n	8000c72 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bfa:	4b21      	ldr	r3, [pc, #132]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	4a20      	ldr	r2, [pc, #128]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c04:	6453      	str	r3, [r2, #68]	; 0x44
 8000c06:	4b1e      	ldr	r3, [pc, #120]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a1a      	ldr	r2, [pc, #104]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_ADC_MspInit+0xa8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = A04_Pin|A05_Pin;
 8000c42:	2303      	movs	r3, #3
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <HAL_ADC_MspInit+0xac>)
 8000c56:	f000 fe95 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A01_Pin|A02_Pin|A03_Pin;
 8000c5a:	23a8      	movs	r3, #168	; 0xa8
 8000c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4806      	ldr	r0, [pc, #24]	; (8000c88 <HAL_ADC_MspInit+0xb0>)
 8000c6e:	f000 fe89 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012000 	.word	0x40012000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000

08000c8c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_CRC_MspInit+0x38>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <HAL_CRC_MspInit+0x3c>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <HAL_CRC_MspInit+0x3c>)
 8000ca4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_CRC_MspInit+0x3c>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023000 	.word	0x40023000
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08e      	sub	sp, #56	; 0x38
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a4a      	ldr	r2, [pc, #296]	; (8000e14 <HAL_SPI_MspInit+0x148>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d144      	bne.n	8000d78 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cee:	4b4a      	ldr	r3, [pc, #296]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a49      	ldr	r2, [pc, #292]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b47      	ldr	r3, [pc, #284]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d06:	4b44      	ldr	r3, [pc, #272]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a43      	ldr	r2, [pc, #268]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b41      	ldr	r3, [pc, #260]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PI3     ------> SPI2_MOSI
    PI2     ------> SPI2_MISO
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ESP_MOSI_Pin|ESP_MISO_Pin;
 8000d36:	230c      	movs	r3, #12
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d46:	2305      	movs	r3, #5
 8000d48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4832      	ldr	r0, [pc, #200]	; (8000e1c <HAL_SPI_MspInit+0x150>)
 8000d52:	f000 fe17 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_CLK_Pin;
 8000d56:	2308      	movs	r3, #8
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d66:	2305      	movs	r3, #5
 8000d68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ESP_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482b      	ldr	r0, [pc, #172]	; (8000e20 <HAL_SPI_MspInit+0x154>)
 8000d72:	f000 fe07 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d76:	e049      	b.n	8000e0c <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <HAL_SPI_MspInit+0x158>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d144      	bne.n	8000e0c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a24      	ldr	r2, [pc, #144]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a18      	ldr	r2, [pc, #96]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_SPI_MspInit+0x14c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0304 	and.w	r3, r3, #4
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TFT_MOSI_Pin;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dda:	2306      	movs	r3, #6
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TFT_MOSI_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	4810      	ldr	r0, [pc, #64]	; (8000e28 <HAL_SPI_MspInit+0x15c>)
 8000de6:	f000 fdcd 	bl	8001984 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TFT_MISO_Pin|TFT_SCK_Pin;
 8000dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_SPI_MspInit+0x160>)
 8000e08:	f000 fdbc 	bl	8001984 <HAL_GPIO_Init>
}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40003800 	.word	0x40003800
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40003c00 	.word	0x40003c00
 8000e28:	40020400 	.word	0x40020400
 8000e2c:	40020800 	.word	0x40020800

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <HAL_UART_MspInit+0xb4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d144      	bne.n	8000edc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0308 	and.w	r3, r3, #8
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_UART_MspInit+0xb8>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PD2     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = ESP_USRT_RX_Pin;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000eaa:	2308      	movs	r3, #8
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_USRT_RX_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <HAL_UART_MspInit+0xbc>)
 8000eb6:	f000 fd65 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ESP_USRT_TX_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ESP_USRT_TX_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <HAL_UART_MspInit+0xc0>)
 8000ed8:	f000 fd54 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40005000 	.word	0x40005000
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020c00 	.word	0x40020c00
 8000ef0:	40020400 	.word	0x40020400

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <NMI_Handler+0x4>

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f884 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f00b fde9 	bl	800cb70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fac7 	bl	8000530 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000fb0:	0800ea58 	.word	0x0800ea58
  ldr r2, =_sbss
 8000fb4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000fb8:	2001da88 	.word	0x2001da88

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 fbb9 	bl	8001748 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fdd8 	bl	8000b90 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fbc3 	bl	8001796 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f000 fb99 	bl	800175e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000060 	.word	0x20000060
 8001044:	20000068 	.word	0x20000068
 8001048:	20000064 	.word	0x20000064

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	20000068 	.word	0x20000068
 8001070:	2001d8d4 	.word	0x2001d8d4

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2001d8d4 	.word	0x2001d8d4

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000068 	.word	0x20000068

080010d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e031      	b.n	800114e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fd70 	bl	8000bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <HAL_ADC_Init+0x84>)
 8001118:	4013      	ands	r3, r2
 800111a:	f043 0202 	orr.w	r2, r3, #2
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f964 	bl	80013f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f023 0303 	bic.w	r3, r3, #3
 8001136:	f043 0201 	orr.w	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
 800113e:	e001      	b.n	8001144 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800114c:	7bfb      	ldrb	r3, [r7, #15]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	ffffeefd 	.word	0xffffeefd

0800115c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x1c>
 8001174:	2302      	movs	r3, #2
 8001176:	e12a      	b.n	80013ce <HAL_ADC_ConfigChannel+0x272>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b09      	cmp	r3, #9
 8001186:	d93a      	bls.n	80011fe <HAL_ADC_ConfigChannel+0xa2>
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001190:	d035      	beq.n	80011fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	68d9      	ldr	r1, [r3, #12]
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	461a      	mov	r2, r3
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	3b1e      	subs	r3, #30
 80011a8:	2207      	movs	r2, #7
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	400a      	ands	r2, r1
 80011b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a87      	ldr	r2, [pc, #540]	; (80013dc <HAL_ADC_ConfigChannel+0x280>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10a      	bne.n	80011d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68d9      	ldr	r1, [r3, #12]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	061a      	lsls	r2, r3, #24
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d6:	e035      	b.n	8001244 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68d9      	ldr	r1, [r3, #12]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	4603      	mov	r3, r0
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4403      	add	r3, r0
 80011f0:	3b1e      	subs	r3, #30
 80011f2:	409a      	lsls	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011fc:	e022      	b.n	8001244 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6919      	ldr	r1, [r3, #16]
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43da      	mvns	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	400a      	ands	r2, r1
 8001220:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6919      	ldr	r1, [r3, #16]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	b29b      	uxth	r3, r3
 8001232:	4618      	mov	r0, r3
 8001234:	4603      	mov	r3, r0
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	4403      	add	r3, r0
 800123a:	409a      	lsls	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b06      	cmp	r3, #6
 800124a:	d824      	bhi.n	8001296 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b05      	subs	r3, #5
 800125e:	221f      	movs	r2, #31
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43da      	mvns	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	400a      	ands	r2, r1
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	3b05      	subs	r3, #5
 8001288:	fa00 f203 	lsl.w	r2, r0, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	430a      	orrs	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
 8001294:	e04c      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b0c      	cmp	r3, #12
 800129c:	d824      	bhi.n	80012e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	3b23      	subs	r3, #35	; 0x23
 80012b0:	221f      	movs	r2, #31
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	400a      	ands	r2, r1
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685a      	ldr	r2, [r3, #4]
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	3b23      	subs	r3, #35	; 0x23
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
 80012e6:	e023      	b.n	8001330 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	4613      	mov	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	3b41      	subs	r3, #65	; 0x41
 80012fa:	221f      	movs	r2, #31
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43da      	mvns	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	400a      	ands	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	4413      	add	r3, r2
 8001322:	3b41      	subs	r3, #65	; 0x41
 8001324:	fa00 f203 	lsl.w	r2, r0, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <HAL_ADC_ConfigChannel+0x284>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10a      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1f4>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001342:	d105      	bne.n	8001350 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_ADC_ConfigChannel+0x288>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <HAL_ADC_ConfigChannel+0x288>)
 800134a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800134e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <HAL_ADC_ConfigChannel+0x284>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d109      	bne.n	800136e <HAL_ADC_ConfigChannel+0x212>
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b12      	cmp	r3, #18
 8001360:	d105      	bne.n	800136e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_ADC_ConfigChannel+0x288>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4a1f      	ldr	r2, [pc, #124]	; (80013e4 <HAL_ADC_ConfigChannel+0x288>)
 8001368:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800136c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_ADC_ConfigChannel+0x284>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d125      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x268>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_ADC_ConfigChannel+0x280>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d003      	beq.n	800138a <HAL_ADC_ConfigChannel+0x22e>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b11      	cmp	r3, #17
 8001388:	d11c      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_ADC_ConfigChannel+0x288>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_ADC_ConfigChannel+0x288>)
 8001390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001394:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_ADC_ConfigChannel+0x280>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d111      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HAL_ADC_ConfigChannel+0x28c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a11      	ldr	r2, [pc, #68]	; (80013ec <HAL_ADC_ConfigChannel+0x290>)
 80013a6:	fba2 2303 	umull	r2, r3, r2, r3
 80013aa:	0c9a      	lsrs	r2, r3, #18
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80013b6:	e002      	b.n	80013be <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f9      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	10000012 	.word	0x10000012
 80013e0:	40012000 	.word	0x40012000
 80013e4:	40012300 	.word	0x40012300
 80013e8:	20000060 	.word	0x20000060
 80013ec:	431bde83 	.word	0x431bde83

080013f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80013f8:	4b78      	ldr	r3, [pc, #480]	; (80015dc <ADC_Init+0x1ec>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4a77      	ldr	r2, [pc, #476]	; (80015dc <ADC_Init+0x1ec>)
 80013fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001402:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001404:	4b75      	ldr	r3, [pc, #468]	; (80015dc <ADC_Init+0x1ec>)
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4973      	ldr	r1, [pc, #460]	; (80015dc <ADC_Init+0x1ec>)
 800140e:	4313      	orrs	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6899      	ldr	r1, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	4a58      	ldr	r2, [pc, #352]	; (80015e0 <ADC_Init+0x1f0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d022      	beq.n	80014ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6899      	ldr	r1, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6899      	ldr	r1, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	e00f      	b.n	80014ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0202 	bic.w	r2, r2, #2
 80014f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6899      	ldr	r1, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	005a      	lsls	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6859      	ldr	r1, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	3b01      	subs	r3, #1
 8001544:	035a      	lsls	r2, r3, #13
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e007      	b.n	8001560 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800155e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	3b01      	subs	r3, #1
 800157c:	051a      	lsls	r2, r3, #20
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015a2:	025a      	lsls	r2, r3, #9
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6899      	ldr	r1, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	029a      	lsls	r2, r3, #10
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	430a      	orrs	r2, r1
 80015ce:	609a      	str	r2, [r3, #8]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40012300 	.word	0x40012300
 80015e0:	0f000001 	.word	0x0f000001

080015e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fa:	68ba      	ldr	r2, [r7, #8]
 80015fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001600:	4013      	ands	r3, r2
 8001602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	4313      	orrs	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	; (8001624 <__NVIC_SetPriorityGrouping+0x40>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00
 8001628:	05fa0000 	.word	0x05fa0000

0800162c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001630:	4b04      	ldr	r3, [pc, #16]	; (8001644 <__NVIC_GetPriorityGrouping+0x18>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	0a1b      	lsrs	r3, r3, #8
 8001636:	f003 0307 	and.w	r3, r3, #7
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001714:	d301      	bcc.n	800171a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001716:	2301      	movs	r3, #1
 8001718:	e00f      	b.n	800173a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <SysTick_Config+0x40>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001722:	210f      	movs	r1, #15
 8001724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001728:	f7ff ff8e 	bl	8001648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <SysTick_Config+0x40>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <SysTick_Config+0x40>)
 8001734:	2207      	movs	r2, #7
 8001736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	e000e010 	.word	0xe000e010

08001748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff47 	bl	80015e4 <__NVIC_SetPriorityGrouping>
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175e:	b580      	push	{r7, lr}
 8001760:	b086      	sub	sp, #24
 8001762:	af00      	add	r7, sp, #0
 8001764:	4603      	mov	r3, r0
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001770:	f7ff ff5c 	bl	800162c <__NVIC_GetPriorityGrouping>
 8001774:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	6978      	ldr	r0, [r7, #20]
 800177c:	f7ff ff8e 	bl	800169c <NVIC_EncodePriority>
 8001780:	4602      	mov	r2, r0
 8001782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001786:	4611      	mov	r1, r2
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff5d 	bl	8001648 <__NVIC_SetPriority>
}
 800178e:	bf00      	nop
 8001790:	3718      	adds	r7, #24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffb0 	bl	8001704 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e054      	b.n	800186c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7f5b      	ldrb	r3, [r3, #29]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d105      	bne.n	80017d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7ff fa5a 	bl	8000c8c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2202      	movs	r2, #2
 80017dc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	791b      	ldrb	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a22      	ldr	r2, [pc, #136]	; (8001874 <HAL_CRC_Init+0xc4>)
 80017ec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0218 	bic.w	r2, r2, #24
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	e00c      	b.n	800181a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	461a      	mov	r2, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f834 	bl	8001878 <HAL_CRCEx_Polynomial_Set>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e028      	b.n	800186c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	795b      	ldrb	r3, [r3, #5]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800182a:	611a      	str	r2, [r3, #16]
 800182c:	e004      	b.n	8001838 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6912      	ldr	r2, [r2, #16]
 8001836:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699a      	ldr	r2, [r3, #24]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	04c11db7 	.word	0x04c11db7

08001878 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001888:	231f      	movs	r3, #31
 800188a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800188c:	bf00      	nop
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	613a      	str	r2, [r7, #16]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d009      	beq.n	80018ac <HAL_CRCEx_Polynomial_Set+0x34>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_CRCEx_Polynomial_Set+0x16>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b18      	cmp	r3, #24
 80018b0:	d846      	bhi.n	8001940 <HAL_CRCEx_Polynomial_Set+0xc8>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	08001947 	.word	0x08001947
 80018bc:	08001941 	.word	0x08001941
 80018c0:	08001941 	.word	0x08001941
 80018c4:	08001941 	.word	0x08001941
 80018c8:	08001941 	.word	0x08001941
 80018cc:	08001941 	.word	0x08001941
 80018d0:	08001941 	.word	0x08001941
 80018d4:	08001941 	.word	0x08001941
 80018d8:	08001935 	.word	0x08001935
 80018dc:	08001941 	.word	0x08001941
 80018e0:	08001941 	.word	0x08001941
 80018e4:	08001941 	.word	0x08001941
 80018e8:	08001941 	.word	0x08001941
 80018ec:	08001941 	.word	0x08001941
 80018f0:	08001941 	.word	0x08001941
 80018f4:	08001941 	.word	0x08001941
 80018f8:	08001929 	.word	0x08001929
 80018fc:	08001941 	.word	0x08001941
 8001900:	08001941 	.word	0x08001941
 8001904:	08001941 	.word	0x08001941
 8001908:	08001941 	.word	0x08001941
 800190c:	08001941 	.word	0x08001941
 8001910:	08001941 	.word	0x08001941
 8001914:	08001941 	.word	0x08001941
 8001918:	0800191d 	.word	0x0800191d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b06      	cmp	r3, #6
 8001920:	d913      	bls.n	800194a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001926:	e010      	b.n	800194a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	2b07      	cmp	r3, #7
 800192c:	d90f      	bls.n	800194e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001932:	e00c      	b.n	800194e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	d90b      	bls.n	8001952 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800193e:	e008      	b.n	8001952 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	75fb      	strb	r3, [r7, #23]
      break;
 8001944:	e006      	b.n	8001954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001946:	bf00      	nop
 8001948:	e004      	b.n	8001954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800194a:	bf00      	nop
 800194c:	e002      	b.n	8001954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800194e:	bf00      	nop
 8001950:	e000      	b.n	8001954 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001952:	bf00      	nop
  }
  if (status == HAL_OK)
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 0118 	bic.w	r1, r3, #24
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e175      	b.n	8001c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 8164 	bne.w	8001c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d00b      	beq.n	80019e2 <HAL_GPIO_Init+0x5e>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b12      	cmp	r3, #18
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x100>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b12      	cmp	r3, #18
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80be 	beq.w	8001c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	4b66      	ldr	r3, [pc, #408]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <HAL_GPIO_Init+0x324>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b26:	4a61      	ldr	r2, [pc, #388]	; (8001cac <HAL_GPIO_Init+0x328>)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	f003 0303 	and.w	r3, r3, #3
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	220f      	movs	r2, #15
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	; (8001cb0 <HAL_GPIO_Init+0x32c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d037      	beq.n	8001bc2 <HAL_GPIO_Init+0x23e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d031      	beq.n	8001bbe <HAL_GPIO_Init+0x23a>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a56      	ldr	r2, [pc, #344]	; (8001cb8 <HAL_GPIO_Init+0x334>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x236>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a55      	ldr	r2, [pc, #340]	; (8001cbc <HAL_GPIO_Init+0x338>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d025      	beq.n	8001bb6 <HAL_GPIO_Init+0x232>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_GPIO_Init+0x33c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01f      	beq.n	8001bb2 <HAL_GPIO_Init+0x22e>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a53      	ldr	r2, [pc, #332]	; (8001cc4 <HAL_GPIO_Init+0x340>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x22a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a52      	ldr	r2, [pc, #328]	; (8001cc8 <HAL_GPIO_Init+0x344>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <HAL_GPIO_Init+0x348>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a50      	ldr	r2, [pc, #320]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4f      	ldr	r2, [pc, #316]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x21a>
 8001b9a:	2309      	movs	r3, #9
 8001b9c:	e012      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001b9e:	230a      	movs	r3, #10
 8001ba0:	e010      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	e00e      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001ba6:	2307      	movs	r3, #7
 8001ba8:	e00c      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00a      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bae:	2305      	movs	r3, #5
 8001bb0:	e008      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e004      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e002      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_GPIO_Init+0x240>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	f002 0203 	and.w	r2, r2, #3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	4093      	lsls	r3, r2
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bd4:	4935      	ldr	r1, [pc, #212]	; (8001cac <HAL_GPIO_Init+0x328>)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	089b      	lsrs	r3, r3, #2
 8001bda:	3302      	adds	r3, #2
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c06:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c30:	4a29      	ldr	r2, [pc, #164]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a1f      	ldr	r2, [pc, #124]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <HAL_GPIO_Init+0x354>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	2b0f      	cmp	r3, #15
 8001c94:	f67f ae86 	bls.w	80019a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020c00 	.word	0x40020c00
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40021400 	.word	0x40021400
 8001cc8:	40021800 	.word	0x40021800
 8001ccc:	40021c00 	.word	0x40021c00
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40022400 	.word	0x40022400
 8001cd8:	40013c00 	.word	0x40013c00

08001cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cec:	787b      	ldrb	r3, [r7, #1]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf2:	887a      	ldrh	r2, [r7, #2]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001cf8:	e003      	b.n	8001d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001cfa:	887b      	ldrh	r3, [r7, #2]
 8001cfc:	041a      	lsls	r2, r3, #16
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	619a      	str	r2, [r3, #24]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a22      	ldr	r2, [pc, #136]	; (8001da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d3e:	f7ff f999 	bl	8001074 <HAL_GetTick>
 8001d42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d44:	e009      	b.n	8001d5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d46:	f7ff f995 	bl	8001074 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d54:	d901      	bls.n	8001d5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e022      	b.n	8001da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d1ee      	bne.n	8001d46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff f97e 	bl	8001074 <HAL_GetTick>
 8001d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d7a:	e009      	b.n	8001d90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d7c:	f7ff f97a 	bl	8001074 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d8a:	d901      	bls.n	8001d90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e007      	b.n	8001da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e29b      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd4:	4b96      	ldr	r3, [pc, #600]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d00c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de0:	4b93      	ldr	r3, [pc, #588]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d112      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62>
 8001dec:	4b90      	ldr	r3, [pc, #576]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001df8:	d10b      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dfa:	4b8d      	ldr	r3, [pc, #564]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d06c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x130>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d168      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e275      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x7a>
 8001e1c:	4b84      	ldr	r3, [pc, #528]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a83      	ldr	r2, [pc, #524]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e02e      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x9c>
 8001e32:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a7e      	ldr	r2, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3c:	6013      	str	r3, [r2, #0]
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7b      	ldr	r2, [pc, #492]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0xc0>
 8001e56:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a75      	ldr	r2, [pc, #468]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b73      	ldr	r3, [pc, #460]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a72      	ldr	r2, [pc, #456]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xd8>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a6b      	ldr	r2, [pc, #428]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff f8f0 	bl	8001074 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff f8ec 	bl	8001074 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e229      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xe8>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f8dc 	bl	8001074 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff f8d8 	bl	8001074 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e215      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x110>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d069      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eee:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x190>
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b47      	ldr	r3, [pc, #284]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x17a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1e9      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b41      	ldr	r3, [pc, #260]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	493d      	ldr	r1, [pc, #244]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e040      	b.n	8001fc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f88e 	bl	8001074 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7ff f88a 	bl	8001074 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1c7      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b30      	ldr	r3, [pc, #192]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4929      	ldr	r1, [pc, #164]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a26      	ldr	r2, [pc, #152]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f86a 	bl	8001074 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff f866 	bl	8001074 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e1a3      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d038      	beq.n	8002040 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d019      	beq.n	800200a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	4a15      	ldr	r2, [pc, #84]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f847 	bl	8001074 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff f843 	bl	8001074 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e180      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x23a>
 8002008:	e01a      	b.n	8002040 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 800200c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200e:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_RCC_OscConfig+0x280>)
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002016:	f7ff f82d 	bl	8001074 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201e:	f7ff f829 	bl	8001074 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d903      	bls.n	8002034 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e166      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
 8002030:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ee      	bne.n	800201e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a4 	beq.w	8002196 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204e:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b89      	ldr	r3, [pc, #548]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a88      	ldr	r2, [pc, #544]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b86      	ldr	r3, [pc, #536]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	2301      	movs	r3, #1
 8002074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002076:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d118      	bne.n	80020b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002082:	4b80      	ldr	r3, [pc, #512]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7f      	ldr	r2, [pc, #508]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 8002088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208e:	f7fe fff1 	bl	8001074 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002094:	e008      	b.n	80020a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002096:	f7fe ffed 	bl	8001074 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b64      	cmp	r3, #100	; 0x64
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e12a      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a8:	4b76      	ldr	r3, [pc, #472]	; (8002284 <HAL_RCC_OscConfig+0x4d4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0f0      	beq.n	8002096 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x31a>
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a6f      	ldr	r2, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	e02d      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x33c>
 80020d2:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d6:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020d8:	f023 0301 	bic.w	r3, r3, #1
 80020dc:	6713      	str	r3, [r2, #112]	; 0x70
 80020de:	4b68      	ldr	r3, [pc, #416]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e2:	4a67      	ldr	r2, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ea:	e01c      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b05      	cmp	r3, #5
 80020f2:	d10c      	bne.n	800210e <HAL_RCC_OscConfig+0x35e>
 80020f4:	4b62      	ldr	r3, [pc, #392]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f8:	4a61      	ldr	r2, [pc, #388]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	f043 0304 	orr.w	r3, r3, #4
 80020fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002100:	4b5f      	ldr	r3, [pc, #380]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a5e      	ldr	r2, [pc, #376]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	e00b      	b.n	8002126 <HAL_RCC_OscConfig+0x376>
 800210e:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d015      	beq.n	800215a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe ffa1 	bl	8001074 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe ff9d 	bl	8001074 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0d8      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0ee      	beq.n	8002136 <HAL_RCC_OscConfig+0x386>
 8002158:	e014      	b.n	8002184 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215a:	f7fe ff8b 	bl	8001074 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7fe ff87 	bl	8001074 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0c2      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1ee      	bne.n	8002162 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002184:	7dfb      	ldrb	r3, [r7, #23]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d105      	bne.n	8002196 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80ae 	beq.w	80022fc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d06d      	beq.n	8002288 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d14b      	bne.n	800224c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b4:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a31      	ldr	r2, [pc, #196]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe ff58 	bl	8001074 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7fe ff54 	bl	8001074 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e091      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021da:	4b29      	ldr	r3, [pc, #164]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69da      	ldr	r2, [r3, #28]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	085b      	lsrs	r3, r3, #1
 80021fe:	3b01      	subs	r3, #1
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	061b      	lsls	r3, r3, #24
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	071b      	lsls	r3, r3, #28
 8002212:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe ff26 	bl	8001074 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe ff22 	bl	8001074 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e05f      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x47c>
 800224a:	e057      	b.n	80022fc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe ff0c 	bl	8001074 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe ff08 	bl	8001074 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e045      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_RCC_OscConfig+0x4d0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x4b0>
 800227e:	e03d      	b.n	80022fc <HAL_RCC_OscConfig+0x54c>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_OscConfig+0x558>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d129      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d122      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d119      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d10f      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d0      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 020f 	bic.w	r2, r3, #15
 800233a:	4965      	ldr	r1, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002376:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800238a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800238e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d040      	beq.n	8002430 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d115      	bne.n	80023ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e073      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06b      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002400:	f7fe fe38 	bl	8001074 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7fe fe34 	bl	8001074 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e053      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d210      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	4922      	ldr	r1, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490a      	ldr	r1, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1cc>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	fa22 f303 	lsr.w	r3, r2, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1d0>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1d4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe fd94 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023c00 	.word	0x40023c00
 80024d4:	40023800 	.word	0x40023800
 80024d8:	0800ea30 	.word	0x0800ea30
 80024dc:	20000060 	.word	0x20000060
 80024e0:	20000064 	.word	0x20000064

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024ea:	2100      	movs	r1, #0
 80024ec:	6079      	str	r1, [r7, #4]
 80024ee:	2100      	movs	r1, #0
 80024f0:	60f9      	str	r1, [r7, #12]
 80024f2:	2100      	movs	r1, #0
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80024f6:	2100      	movs	r1, #0
 80024f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024fa:	4952      	ldr	r1, [pc, #328]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 80024fc:	6889      	ldr	r1, [r1, #8]
 80024fe:	f001 010c 	and.w	r1, r1, #12
 8002502:	2908      	cmp	r1, #8
 8002504:	d00d      	beq.n	8002522 <HAL_RCC_GetSysClockFreq+0x3e>
 8002506:	2908      	cmp	r1, #8
 8002508:	f200 8094 	bhi.w	8002634 <HAL_RCC_GetSysClockFreq+0x150>
 800250c:	2900      	cmp	r1, #0
 800250e:	d002      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x32>
 8002510:	2904      	cmp	r1, #4
 8002512:	d003      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x38>
 8002514:	e08e      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002516:	4b4c      	ldr	r3, [pc, #304]	; (8002648 <HAL_RCC_GetSysClockFreq+0x164>)
 8002518:	60bb      	str	r3, [r7, #8]
      break;
 800251a:	e08e      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800251c:	4b4b      	ldr	r3, [pc, #300]	; (800264c <HAL_RCC_GetSysClockFreq+0x168>)
 800251e:	60bb      	str	r3, [r7, #8]
      break;
 8002520:	e08b      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002522:	4948      	ldr	r1, [pc, #288]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 8002524:	6849      	ldr	r1, [r1, #4]
 8002526:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800252a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800252c:	4945      	ldr	r1, [pc, #276]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 800252e:	6849      	ldr	r1, [r1, #4]
 8002530:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002534:	2900      	cmp	r1, #0
 8002536:	d024      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4942      	ldr	r1, [pc, #264]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 800253a:	6849      	ldr	r1, [r1, #4]
 800253c:	0989      	lsrs	r1, r1, #6
 800253e:	4608      	mov	r0, r1
 8002540:	f04f 0100 	mov.w	r1, #0
 8002544:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002548:	f04f 0500 	mov.w	r5, #0
 800254c:	ea00 0204 	and.w	r2, r0, r4
 8002550:	ea01 0305 	and.w	r3, r1, r5
 8002554:	493d      	ldr	r1, [pc, #244]	; (800264c <HAL_RCC_GetSysClockFreq+0x168>)
 8002556:	fb01 f003 	mul.w	r0, r1, r3
 800255a:	2100      	movs	r1, #0
 800255c:	fb01 f102 	mul.w	r1, r1, r2
 8002560:	1844      	adds	r4, r0, r1
 8002562:	493a      	ldr	r1, [pc, #232]	; (800264c <HAL_RCC_GetSysClockFreq+0x168>)
 8002564:	fba2 0101 	umull	r0, r1, r2, r1
 8002568:	1863      	adds	r3, r4, r1
 800256a:	4619      	mov	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	f7fd fe60 	bl	8000238 <__aeabi_uldivmod>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4613      	mov	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e04a      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	461a      	mov	r2, r3
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	ea02 0400 	and.w	r4, r2, r0
 800259a:	ea03 0501 	and.w	r5, r3, r1
 800259e:	4620      	mov	r0, r4
 80025a0:	4629      	mov	r1, r5
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	014b      	lsls	r3, r1, #5
 80025ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025b0:	0142      	lsls	r2, r0, #5
 80025b2:	4610      	mov	r0, r2
 80025b4:	4619      	mov	r1, r3
 80025b6:	1b00      	subs	r0, r0, r4
 80025b8:	eb61 0105 	sbc.w	r1, r1, r5
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	018b      	lsls	r3, r1, #6
 80025c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025ca:	0182      	lsls	r2, r0, #6
 80025cc:	1a12      	subs	r2, r2, r0
 80025ce:	eb63 0301 	sbc.w	r3, r3, r1
 80025d2:	f04f 0000 	mov.w	r0, #0
 80025d6:	f04f 0100 	mov.w	r1, #0
 80025da:	00d9      	lsls	r1, r3, #3
 80025dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025e0:	00d0      	lsls	r0, r2, #3
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	1912      	adds	r2, r2, r4
 80025e8:	eb45 0303 	adc.w	r3, r5, r3
 80025ec:	f04f 0000 	mov.w	r0, #0
 80025f0:	f04f 0100 	mov.w	r1, #0
 80025f4:	0299      	lsls	r1, r3, #10
 80025f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80025fa:	0290      	lsls	r0, r2, #10
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	461a      	mov	r2, r3
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	f7fd fe14 	bl	8000238 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <HAL_RCC_GetSysClockFreq+0x160>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	0c1b      	lsrs	r3, r3, #16
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	60bb      	str	r3, [r7, #8]
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetSysClockFreq+0x164>)
 8002636:	60bb      	str	r3, [r7, #8]
      break;
 8002638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263a:	68bb      	ldr	r3, [r7, #8]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bdb0      	pop	{r4, r5, r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	00f42400 	.word	0x00f42400
 800264c:	017d7840 	.word	0x017d7840

08002650 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b03      	ldr	r3, [pc, #12]	; (8002664 <HAL_RCC_GetHCLKFreq+0x14>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000060 	.word	0x20000060

08002668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800266c:	f7ff fff0 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002670:	4602      	mov	r2, r0
 8002672:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	0a9b      	lsrs	r3, r3, #10
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	4903      	ldr	r1, [pc, #12]	; (800268c <HAL_RCC_GetPCLK1Freq+0x24>)
 800267e:	5ccb      	ldrb	r3, [r1, r3]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	0800ea40 	.word	0x0800ea40

08002690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002694:	f7ff ffdc 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0b5b      	lsrs	r3, r3, #13
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	0800ea40 	.word	0x0800ea40

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d012      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026e0:	4b69      	ldr	r3, [pc, #420]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a68      	ldr	r2, [pc, #416]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026ea:	6093      	str	r3, [r2, #8]
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	4964      	ldr	r1, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002702:	2301      	movs	r3, #1
 8002704:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d017      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002712:	4b5d      	ldr	r3, [pc, #372]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	4959      	ldr	r1, [pc, #356]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002730:	d101      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800273e:	2301      	movs	r3, #1
 8002740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d017      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800274e:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002754:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	494a      	ldr	r1, [pc, #296]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276c:	d101      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800277a:	2301      	movs	r3, #1
 800277c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 808b 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	4a39      	ldr	r2, [pc, #228]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6413      	str	r3, [r2, #64]	; 0x40
 80027a8:	4b37      	ldr	r3, [pc, #220]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027b4:	4b35      	ldr	r3, [pc, #212]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fc58 	bl	8001074 <HAL_GetTick>
 80027c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7fe fc54 	bl	8001074 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	; 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e38f      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027e6:	4b28      	ldr	r3, [pc, #160]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d035      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d02e      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281a:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800281c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281e:	4a1a      	ldr	r2, [pc, #104]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002826:	4a18      	ldr	r2, [pc, #96]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d114      	bne.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fc1c 	bl	8001074 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	e00a      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7fe fc18 	bl	8001074 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e351      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0ee      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800286e:	d111      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800287e:	400b      	ands	r3, r1
 8002880:	4901      	ldr	r1, [pc, #4]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
 8002886:	e00b      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	0ffffcff 	.word	0x0ffffcff
 8002894:	4bb3      	ldr	r3, [pc, #716]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4ab2      	ldr	r2, [pc, #712]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800289a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800289e:	6093      	str	r3, [r2, #8]
 80028a0:	4bb0      	ldr	r3, [pc, #704]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ac:	49ad      	ldr	r1, [pc, #692]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d010      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028be:	4ba9      	ldr	r3, [pc, #676]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c4:	4aa7      	ldr	r2, [pc, #668]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028ce:	4ba5      	ldr	r3, [pc, #660]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	49a2      	ldr	r1, [pc, #648]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028ec:	4b9d      	ldr	r3, [pc, #628]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fa:	499a      	ldr	r1, [pc, #616]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800290e:	4b95      	ldr	r3, [pc, #596]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800291c:	4991      	ldr	r1, [pc, #580]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002930:	4b8c      	ldr	r3, [pc, #560]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293e:	4989      	ldr	r1, [pc, #548]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002952:	4b84      	ldr	r3, [pc, #528]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4980      	ldr	r1, [pc, #512]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002974:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4978      	ldr	r1, [pc, #480]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002996:	4b73      	ldr	r3, [pc, #460]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299c:	f023 020c 	bic.w	r2, r3, #12
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	496f      	ldr	r1, [pc, #444]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b8:	4b6a      	ldr	r3, [pc, #424]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c6:	4967      	ldr	r1, [pc, #412]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029da:	4b62      	ldr	r3, [pc, #392]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e8:	495e      	ldr	r1, [pc, #376]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00a      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029fc:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	4956      	ldr	r1, [pc, #344]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a1e:	4b51      	ldr	r3, [pc, #324]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	494d      	ldr	r1, [pc, #308]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00a      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a40:	4b48      	ldr	r3, [pc, #288]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	4945      	ldr	r1, [pc, #276]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a70:	493c      	ldr	r1, [pc, #240]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a84:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a92:	4934      	ldr	r1, [pc, #208]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d011      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab4:	492b      	ldr	r1, [pc, #172]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ae6:	4b1f      	ldr	r3, [pc, #124]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	491b      	ldr	r1, [pc, #108]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b18:	4912      	ldr	r1, [pc, #72]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00b      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3c:	4909      	ldr	r1, [pc, #36]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00f      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	e002      	b.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	4986      	ldr	r1, [pc, #536]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b7c:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b82:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b8c:	497d      	ldr	r1, [pc, #500]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d006      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80d6 	beq.w	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ba8:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a75      	ldr	r2, [pc, #468]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fa5e 	bl	8001074 <HAL_GetTick>
 8002bb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bbc:	f7fe fa5a 	bl	8001074 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	; 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e195      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bce:	4b6d      	ldr	r3, [pc, #436]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d021      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11d      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c02:	0e1b      	lsrs	r3, r3, #24
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	019a      	lsls	r2, r3, #6
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	071b      	lsls	r3, r3, #28
 8002c22:	4958      	ldr	r1, [pc, #352]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d02e      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c54:	d129      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c64:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6a:	0f1b      	lsrs	r3, r3, #28
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	019a      	lsls	r2, r3, #6
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	041b      	lsls	r3, r3, #16
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	061b      	lsls	r3, r3, #24
 8002c84:	431a      	orrs	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	493e      	ldr	r1, [pc, #248]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c92:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c98:	f023 021f 	bic.w	r2, r3, #31
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	4938      	ldr	r1, [pc, #224]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01d      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cca:	0f1b      	lsrs	r3, r3, #28
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	019a      	lsls	r2, r3, #6
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	071b      	lsls	r3, r3, #28
 8002cea:	4926      	ldr	r1, [pc, #152]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d011      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	019a      	lsls	r2, r3, #6
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	071b      	lsls	r3, r3, #28
 8002d1a:	491a      	ldr	r1, [pc, #104]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d2e:	f7fe f9a1 	bl	8001074 <HAL_GetTick>
 8002d32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d36:	f7fe f99d 	bl	8001074 <HAL_GetTick>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0d8      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 80ce 	bne.w	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d68:	f7fe f984 	bl	8001074 <HAL_GetTick>
 8002d6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d6e:	e00b      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d70:	f7fe f980 	bl	8001074 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d904      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0bb      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d88:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d94:	d0ec      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d02e      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d12a      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002dbe:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	0f1b      	lsrs	r3, r3, #28
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	019a      	lsls	r2, r3, #6
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	431a      	orrs	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	071b      	lsls	r3, r3, #28
 8002df2:	4944      	ldr	r1, [pc, #272]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	021b      	lsls	r3, r3, #8
 8002e0c:	493d      	ldr	r1, [pc, #244]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d022      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e28:	d11d      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e30:	0e1b      	lsrs	r3, r3, #24
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	0f1b      	lsrs	r3, r3, #28
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	019a      	lsls	r2, r3, #6
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	431a      	orrs	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	071b      	lsls	r3, r3, #28
 8002e5e:	4929      	ldr	r1, [pc, #164]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d028      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	0e1b      	lsrs	r3, r3, #24
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e80:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	019a      	lsls	r2, r3, #6
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	071b      	lsls	r3, r3, #28
 8002ea6:	4917      	ldr	r1, [pc, #92]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	4911      	ldr	r1, [pc, #68]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ec4:	4b0f      	ldr	r3, [pc, #60]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7fe f8d0 	bl	8001074 <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed8:	f7fe f8cc 	bl	8001074 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e007      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef6:	d1ef      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800

08002f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e09d      	b.n	8003056 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d108      	bne.n	8002f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2a:	d009      	beq.n	8002f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	61da      	str	r2, [r3, #28]
 8002f32:	e005      	b.n	8002f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7fd feb6 	bl	8000ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f80:	d902      	bls.n	8002f88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e002      	b.n	8002f8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f96:	d007      	beq.n	8002fa8 <HAL_SPI_Init+0xa0>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fa0:	d002      	beq.n	8002fa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	ea42 0103 	orr.w	r1, r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0204 	and.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003024:	ea42 0103 	orr.w	r1, r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b088      	sub	sp, #32
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	603b      	str	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_SPI_Transmit+0x22>
 800307c:	2302      	movs	r3, #2
 800307e:	e158      	b.n	8003332 <HAL_SPI_Transmit+0x2d4>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003088:	f7fd fff4 	bl	8001074 <HAL_GetTick>
 800308c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d002      	beq.n	80030a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030a2:	e13d      	b.n	8003320 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <HAL_SPI_Transmit+0x52>
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d102      	bne.n	80030b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80030b4:	e134      	b.n	8003320 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	88fa      	ldrh	r2, [r7, #6]
 80030d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d10f      	bne.n	8003122 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003120:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d007      	beq.n	8003140 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003148:	d94b      	bls.n	80031e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_Transmit+0xfa>
 8003152:	8afb      	ldrh	r3, [r7, #22]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d13e      	bne.n	80031d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800317c:	e02b      	b.n	80031d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d112      	bne.n	80031b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	881a      	ldrh	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031b0:	e011      	b.n	80031d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031b2:	f7fd ff5f 	bl	8001074 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d803      	bhi.n	80031ca <HAL_SPI_Transmit+0x16c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031c8:	d102      	bne.n	80031d0 <HAL_SPI_Transmit+0x172>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031d4:	e0a4      	b.n	8003320 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1ce      	bne.n	800317e <HAL_SPI_Transmit+0x120>
 80031e0:	e07c      	b.n	80032dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_SPI_Transmit+0x192>
 80031ea:	8afb      	ldrh	r3, [r7, #22]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d170      	bne.n	80032d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d912      	bls.n	8003220 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320a:	1c9a      	adds	r2, r3, #2
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b02      	subs	r3, #2
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800321e:	e058      	b.n	80032d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	7812      	ldrb	r2, [r2, #0]
 800322c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003246:	e044      	b.n	80032d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d12b      	bne.n	80032ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d912      	bls.n	8003286 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003264:	881a      	ldrh	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b02      	subs	r3, #2
 800327e:	b29a      	uxth	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003284:	e025      	b.n	80032d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	330c      	adds	r3, #12
 8003290:	7812      	ldrb	r2, [r2, #0]
 8003292:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032ac:	e011      	b.n	80032d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032ae:	f7fd fee1 	bl	8001074 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d803      	bhi.n	80032c6 <HAL_SPI_Transmit+0x268>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c4:	d102      	bne.n	80032cc <HAL_SPI_Transmit+0x26e>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032d0:	e026      	b.n	8003320 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1b5      	bne.n	8003248 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	6839      	ldr	r1, [r7, #0]
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fcdf 	bl	8003ca4 <SPI_EndRxTxTransaction>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2220      	movs	r2, #32
 80032f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e000      	b.n	8003320 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800331e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003330:	7ffb      	ldrb	r3, [r7, #31]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b088      	sub	sp, #32
 800333e:	af02      	add	r7, sp, #8
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	603b      	str	r3, [r7, #0]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003356:	d112      	bne.n	800337e <HAL_SPI_Receive+0x44>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10e      	bne.n	800337e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2204      	movs	r2, #4
 8003364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	4613      	mov	r3, r2
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f910 	bl	800359a <HAL_SPI_TransmitReceive>
 800337a:	4603      	mov	r3, r0
 800337c:	e109      	b.n	8003592 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_SPI_Receive+0x52>
 8003388:	2302      	movs	r3, #2
 800338a:	e102      	b.n	8003592 <HAL_SPI_Receive+0x258>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003394:	f7fd fe6e 	bl	8001074 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d002      	beq.n	80033ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
 80033a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033aa:	e0e9      	b.n	8003580 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <HAL_SPI_Receive+0x7e>
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80033bc:	e0e0      	b.n	8003580 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2204      	movs	r2, #4
 80033c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	88fa      	ldrh	r2, [r7, #6]
 80033de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003408:	d908      	bls.n	800341c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	e007      	b.n	800342c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800342a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	d10f      	bne.n	8003456 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d007      	beq.n	8003474 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800347c:	d867      	bhi.n	800354e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800347e:	e030      	b.n	80034e2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d117      	bne.n	80034be <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f103 020c 	add.w	r2, r3, #12
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	7812      	ldrb	r2, [r2, #0]
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80034bc:	e011      	b.n	80034e2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034be:	f7fd fdd9 	bl	8001074 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d803      	bhi.n	80034d6 <HAL_SPI_Receive+0x19c>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_Receive+0x1a2>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	75fb      	strb	r3, [r7, #23]
          goto error;
 80034e0:	e04e      	b.n	8003580 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1c8      	bne.n	8003480 <HAL_SPI_Receive+0x146>
 80034ee:	e034      	b.n	800355a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d115      	bne.n	800352a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	b292      	uxth	r2, r2
 800350a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800351c:	b29b      	uxth	r3, r3
 800351e:	3b01      	subs	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003528:	e011      	b.n	800354e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800352a:	f7fd fda3 	bl	8001074 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d803      	bhi.n	8003542 <HAL_SPI_Receive+0x208>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003540:	d102      	bne.n	8003548 <HAL_SPI_Receive+0x20e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800354c:	e018      	b.n	8003580 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ca      	bne.n	80034f0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fb48 	bl	8003bf4 <SPI_EndRxTransaction>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2220      	movs	r2, #32
 800356e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
 800357c:	e000      	b.n	8003580 <HAL_SPI_Receive+0x246>
  }

error :
 800357e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b08a      	sub	sp, #40	; 0x28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035a8:	2301      	movs	r3, #1
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_SPI_TransmitReceive+0x26>
 80035bc:	2302      	movs	r3, #2
 80035be:	e1fb      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x41e>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035c8:	f7fd fd54 	bl	8001074 <HAL_GetTick>
 80035cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80035dc:	887b      	ldrh	r3, [r7, #2]
 80035de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80035e0:	887b      	ldrh	r3, [r7, #2]
 80035e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035e4:	7efb      	ldrb	r3, [r7, #27]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d00e      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x6e>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f0:	d106      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d102      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x66>
 80035fa:	7efb      	ldrb	r3, [r7, #27]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d003      	beq.n	8003608 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003606:	e1cd      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_SPI_TransmitReceive+0x80>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_SPI_TransmitReceive+0x80>
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d103      	bne.n	8003622 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003620:	e1c0      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b04      	cmp	r3, #4
 800362c:	d003      	beq.n	8003636 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2205      	movs	r2, #5
 8003632:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	887a      	ldrh	r2, [r7, #2]
 8003646:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	887a      	ldrh	r2, [r7, #2]
 800364e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	887a      	ldrh	r2, [r7, #2]
 800365c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	887a      	ldrh	r2, [r7, #2]
 8003662:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003678:	d802      	bhi.n	8003680 <HAL_SPI_TransmitReceive+0xe6>
 800367a:	8a3b      	ldrh	r3, [r7, #16]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d908      	bls.n	8003692 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e007      	b.n	80036a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d007      	beq.n	80036c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80036c8:	d97c      	bls.n	80037c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0x13e>
 80036d2:	8a7b      	ldrh	r3, [r7, #18]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d169      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	881a      	ldrh	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	1c9a      	adds	r2, r3, #2
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036fc:	e056      	b.n	80037ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b02      	cmp	r3, #2
 800370a:	d11b      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x1aa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x1aa>
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	2b01      	cmp	r3, #1
 800371a:	d113      	bne.n	8003744 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	1c9a      	adds	r2, r3, #2
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b01      	cmp	r3, #1
 8003750:	d11c      	bne.n	800378c <HAL_SPI_TransmitReceive+0x1f2>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	b292      	uxth	r2, r2
 800376a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800378c:	f7fd fc72 	bl	8001074 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003798:	429a      	cmp	r2, r3
 800379a:	d807      	bhi.n	80037ac <HAL_SPI_TransmitReceive+0x212>
 800379c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a2:	d003      	beq.n	80037ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80037aa:	e0fb      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1a3      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x164>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d19d      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x164>
 80037c2:	e0df      	b.n	8003984 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_SPI_TransmitReceive+0x23a>
 80037cc:	8a7b      	ldrh	r3, [r7, #18]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	f040 80cb 	bne.w	800396a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d912      	bls.n	8003804 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	1c9a      	adds	r2, r3, #2
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	3b02      	subs	r3, #2
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003802:	e0b2      	b.n	800396a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	7812      	ldrb	r2, [r2, #0]
 8003810:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800382a:	e09e      	b.n	800396a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d134      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x30a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02f      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x30a>
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	2b01      	cmp	r3, #1
 8003848:	d12c      	bne.n	80038a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d912      	bls.n	800387a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	1c9a      	adds	r2, r3, #2
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b02      	subs	r3, #2
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003878:	e012      	b.n	80038a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	330c      	adds	r3, #12
 8003884:	7812      	ldrb	r2, [r2, #0]
 8003886:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003896:	b29b      	uxth	r3, r3
 8003898:	3b01      	subs	r3, #1
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d148      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x3aa>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d042      	beq.n	8003944 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d923      	bls.n	8003912 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	b292      	uxth	r2, r2
 80038d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b02      	subs	r3, #2
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d81f      	bhi.n	8003940 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800390e:	605a      	str	r2, [r3, #4]
 8003910:	e016      	b.n	8003940 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f103 020c 	add.w	r2, r3, #12
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	7812      	ldrb	r2, [r2, #0]
 8003920:	b2d2      	uxtb	r2, r2
 8003922:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b01      	subs	r3, #1
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003940:	2301      	movs	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003944:	f7fd fb96 	bl	8001074 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003950:	429a      	cmp	r2, r3
 8003952:	d803      	bhi.n	800395c <HAL_SPI_TransmitReceive+0x3c2>
 8003954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800395a:	d102      	bne.n	8003962 <HAL_SPI_TransmitReceive+0x3c8>
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2b00      	cmp	r3, #0
 8003960:	d103      	bne.n	800396a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003968:	e01c      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f af5b 	bne.w	800382c <HAL_SPI_TransmitReceive+0x292>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	f47f af54 	bne.w	800382c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f98b 	bl	8003ca4 <SPI_EndRxTxTransaction>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d006      	beq.n	80039a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	661a      	str	r2, [r3, #96]	; 0x60
 80039a0:	e000      	b.n	80039a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80039a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3728      	adds	r7, #40	; 0x28
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d0:	f7fd fb50 	bl	8001074 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e0:	f7fd fb48 	bl	8001074 <HAL_GetTick>
 80039e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e6:	4b39      	ldr	r3, [pc, #228]	; (8003acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	0d1b      	lsrs	r3, r3, #20
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f6:	e054      	b.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039fe:	d050      	beq.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a00:	f7fd fb38 	bl	8001074 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d902      	bls.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d13d      	bne.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2e:	d111      	bne.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a38:	d004      	beq.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d107      	bne.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5c:	d10f      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e017      	b.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d19b      	bne.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000060 	.word	0x20000060

08003ad0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ade:	f7fd fac9 	bl	8001074 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	4413      	add	r3, r2
 8003aec:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aee:	f7fd fac1 	bl	8001074 <HAL_GetTick>
 8003af2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003af4:	4b3e      	ldr	r3, [pc, #248]	; (8003bf0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	00da      	lsls	r2, r3, #3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	0d1b      	lsrs	r3, r3, #20
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b0c:	e062      	b.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b14:	d109      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003b28:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b30:	d050      	beq.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b32:	f7fd fa9f 	bl	8001074 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d902      	bls.n	8003b48 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d13d      	bne.n	8003bc4 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b60:	d111      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b6a:	d004      	beq.n	8003b76 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b74:	d107      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	d10f      	bne.n	8003bb0 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e010      	b.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d194      	bne.n	8003b0e <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000060 	.word	0x20000060

08003bf4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d111      	bne.n	8003c2e <SPI_EndRxTransaction+0x3a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d004      	beq.n	8003c1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1c:	d107      	bne.n	8003c2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c2c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2200      	movs	r2, #0
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fec1 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	f043 0220 	orr.w	r2, r3, #32
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e023      	b.n	8003c9c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c5c:	d11d      	bne.n	8003c9a <SPI_EndRxTransaction+0xa6>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d004      	beq.n	8003c72 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c70:	d113      	bne.n	8003c9a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff26 	bl	8003ad0 <SPI_WaitFifoStateUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d007      	beq.n	8003c9a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e000      	b.n	8003c9c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f7ff ff07 	bl	8003ad0 <SPI_WaitFifoStateUntilTimeout>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e027      	b.n	8003d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fe6c 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e014      	b.n	8003d28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fee0 	bl	8003ad0 <SPI_WaitFifoStateUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d1a:	f043 0220 	orr.w	r2, r3, #32
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e000      	b.n	8003d28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e040      	b.n	8003dc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7fd f86c 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2224      	movs	r2, #36	; 0x24
 8003d5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f82c 	bl	8003dcc <UART_SetConfig>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e022      	b.n	8003dc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa82 	bl	8004290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 fb09 	bl	80043d4 <UART_CheckIdleState>
 8003dc2:	4603      	mov	r3, r0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4ba7      	ldr	r3, [pc, #668]	; (8004094 <UART_SetConfig+0x2c8>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a95      	ldr	r2, [pc, #596]	; (8004098 <UART_SetConfig+0x2cc>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d120      	bne.n	8003e8a <UART_SetConfig+0xbe>
 8003e48:	4b94      	ldr	r3, [pc, #592]	; (800409c <UART_SetConfig+0x2d0>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d816      	bhi.n	8003e84 <UART_SetConfig+0xb8>
 8003e56:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0x90>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e79 	.word	0x08003e79
 8003e64:	08003e73 	.word	0x08003e73
 8003e68:	08003e7f 	.word	0x08003e7f
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e14f      	b.n	8004112 <UART_SetConfig+0x346>
 8003e72:	2302      	movs	r3, #2
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e14c      	b.n	8004112 <UART_SetConfig+0x346>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e149      	b.n	8004112 <UART_SetConfig+0x346>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e146      	b.n	8004112 <UART_SetConfig+0x346>
 8003e84:	2310      	movs	r3, #16
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e143      	b.n	8004112 <UART_SetConfig+0x346>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a84      	ldr	r2, [pc, #528]	; (80040a0 <UART_SetConfig+0x2d4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d132      	bne.n	8003efa <UART_SetConfig+0x12e>
 8003e94:	4b81      	ldr	r3, [pc, #516]	; (800409c <UART_SetConfig+0x2d0>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d828      	bhi.n	8003ef4 <UART_SetConfig+0x128>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0xdc>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003ef5 	.word	0x08003ef5
 8003eb0:	08003ef5 	.word	0x08003ef5
 8003eb4:	08003ef5 	.word	0x08003ef5
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003ef5 	.word	0x08003ef5
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003ef5 	.word	0x08003ef5
 8003ec8:	08003ee3 	.word	0x08003ee3
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003eef 	.word	0x08003eef
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e117      	b.n	8004112 <UART_SetConfig+0x346>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e114      	b.n	8004112 <UART_SetConfig+0x346>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e111      	b.n	8004112 <UART_SetConfig+0x346>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e10e      	b.n	8004112 <UART_SetConfig+0x346>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e10b      	b.n	8004112 <UART_SetConfig+0x346>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a69      	ldr	r2, [pc, #420]	; (80040a4 <UART_SetConfig+0x2d8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d120      	bne.n	8003f46 <UART_SetConfig+0x17a>
 8003f04:	4b65      	ldr	r3, [pc, #404]	; (800409c <UART_SetConfig+0x2d0>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d013      	beq.n	8003f3a <UART_SetConfig+0x16e>
 8003f12:	2b30      	cmp	r3, #48	; 0x30
 8003f14:	d814      	bhi.n	8003f40 <UART_SetConfig+0x174>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d009      	beq.n	8003f2e <UART_SetConfig+0x162>
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d810      	bhi.n	8003f40 <UART_SetConfig+0x174>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <UART_SetConfig+0x15c>
 8003f22:	2b10      	cmp	r3, #16
 8003f24:	d006      	beq.n	8003f34 <UART_SetConfig+0x168>
 8003f26:	e00b      	b.n	8003f40 <UART_SetConfig+0x174>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e0f1      	b.n	8004112 <UART_SetConfig+0x346>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e0ee      	b.n	8004112 <UART_SetConfig+0x346>
 8003f34:	2304      	movs	r3, #4
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e0eb      	b.n	8004112 <UART_SetConfig+0x346>
 8003f3a:	2308      	movs	r3, #8
 8003f3c:	77fb      	strb	r3, [r7, #31]
 8003f3e:	e0e8      	b.n	8004112 <UART_SetConfig+0x346>
 8003f40:	2310      	movs	r3, #16
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e0e5      	b.n	8004112 <UART_SetConfig+0x346>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a57      	ldr	r2, [pc, #348]	; (80040a8 <UART_SetConfig+0x2dc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d120      	bne.n	8003f92 <UART_SetConfig+0x1c6>
 8003f50:	4b52      	ldr	r3, [pc, #328]	; (800409c <UART_SetConfig+0x2d0>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f5c:	d013      	beq.n	8003f86 <UART_SetConfig+0x1ba>
 8003f5e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f60:	d814      	bhi.n	8003f8c <UART_SetConfig+0x1c0>
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d009      	beq.n	8003f7a <UART_SetConfig+0x1ae>
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d810      	bhi.n	8003f8c <UART_SetConfig+0x1c0>
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <UART_SetConfig+0x1a8>
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d006      	beq.n	8003f80 <UART_SetConfig+0x1b4>
 8003f72:	e00b      	b.n	8003f8c <UART_SetConfig+0x1c0>
 8003f74:	2300      	movs	r3, #0
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e0cb      	b.n	8004112 <UART_SetConfig+0x346>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e0c8      	b.n	8004112 <UART_SetConfig+0x346>
 8003f80:	2304      	movs	r3, #4
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e0c5      	b.n	8004112 <UART_SetConfig+0x346>
 8003f86:	2308      	movs	r3, #8
 8003f88:	77fb      	strb	r3, [r7, #31]
 8003f8a:	e0c2      	b.n	8004112 <UART_SetConfig+0x346>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e0bf      	b.n	8004112 <UART_SetConfig+0x346>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a45      	ldr	r2, [pc, #276]	; (80040ac <UART_SetConfig+0x2e0>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d125      	bne.n	8003fe8 <UART_SetConfig+0x21c>
 8003f9c:	4b3f      	ldr	r3, [pc, #252]	; (800409c <UART_SetConfig+0x2d0>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003faa:	d017      	beq.n	8003fdc <UART_SetConfig+0x210>
 8003fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fb0:	d817      	bhi.n	8003fe2 <UART_SetConfig+0x216>
 8003fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb6:	d00b      	beq.n	8003fd0 <UART_SetConfig+0x204>
 8003fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fbc:	d811      	bhi.n	8003fe2 <UART_SetConfig+0x216>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <UART_SetConfig+0x1fe>
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d006      	beq.n	8003fd6 <UART_SetConfig+0x20a>
 8003fc8:	e00b      	b.n	8003fe2 <UART_SetConfig+0x216>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e0a0      	b.n	8004112 <UART_SetConfig+0x346>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e09d      	b.n	8004112 <UART_SetConfig+0x346>
 8003fd6:	2304      	movs	r3, #4
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e09a      	b.n	8004112 <UART_SetConfig+0x346>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	77fb      	strb	r3, [r7, #31]
 8003fe0:	e097      	b.n	8004112 <UART_SetConfig+0x346>
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	77fb      	strb	r3, [r7, #31]
 8003fe6:	e094      	b.n	8004112 <UART_SetConfig+0x346>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a30      	ldr	r2, [pc, #192]	; (80040b0 <UART_SetConfig+0x2e4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d125      	bne.n	800403e <UART_SetConfig+0x272>
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <UART_SetConfig+0x2d0>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004000:	d017      	beq.n	8004032 <UART_SetConfig+0x266>
 8004002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004006:	d817      	bhi.n	8004038 <UART_SetConfig+0x26c>
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400c:	d00b      	beq.n	8004026 <UART_SetConfig+0x25a>
 800400e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004012:	d811      	bhi.n	8004038 <UART_SetConfig+0x26c>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <UART_SetConfig+0x254>
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401c:	d006      	beq.n	800402c <UART_SetConfig+0x260>
 800401e:	e00b      	b.n	8004038 <UART_SetConfig+0x26c>
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e075      	b.n	8004112 <UART_SetConfig+0x346>
 8004026:	2302      	movs	r3, #2
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e072      	b.n	8004112 <UART_SetConfig+0x346>
 800402c:	2304      	movs	r3, #4
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e06f      	b.n	8004112 <UART_SetConfig+0x346>
 8004032:	2308      	movs	r3, #8
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e06c      	b.n	8004112 <UART_SetConfig+0x346>
 8004038:	2310      	movs	r3, #16
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e069      	b.n	8004112 <UART_SetConfig+0x346>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <UART_SetConfig+0x2e8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d137      	bne.n	80040b8 <UART_SetConfig+0x2ec>
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <UART_SetConfig+0x2d0>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004052:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004056:	d017      	beq.n	8004088 <UART_SetConfig+0x2bc>
 8004058:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800405c:	d817      	bhi.n	800408e <UART_SetConfig+0x2c2>
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	d00b      	beq.n	800407c <UART_SetConfig+0x2b0>
 8004064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004068:	d811      	bhi.n	800408e <UART_SetConfig+0x2c2>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <UART_SetConfig+0x2aa>
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	d006      	beq.n	8004082 <UART_SetConfig+0x2b6>
 8004074:	e00b      	b.n	800408e <UART_SetConfig+0x2c2>
 8004076:	2300      	movs	r3, #0
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e04a      	b.n	8004112 <UART_SetConfig+0x346>
 800407c:	2302      	movs	r3, #2
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e047      	b.n	8004112 <UART_SetConfig+0x346>
 8004082:	2304      	movs	r3, #4
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e044      	b.n	8004112 <UART_SetConfig+0x346>
 8004088:	2308      	movs	r3, #8
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e041      	b.n	8004112 <UART_SetConfig+0x346>
 800408e:	2310      	movs	r3, #16
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e03e      	b.n	8004112 <UART_SetConfig+0x346>
 8004094:	efff69f3 	.word	0xefff69f3
 8004098:	40011000 	.word	0x40011000
 800409c:	40023800 	.word	0x40023800
 80040a0:	40004400 	.word	0x40004400
 80040a4:	40004800 	.word	0x40004800
 80040a8:	40004c00 	.word	0x40004c00
 80040ac:	40005000 	.word	0x40005000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	40007800 	.word	0x40007800
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a71      	ldr	r2, [pc, #452]	; (8004284 <UART_SetConfig+0x4b8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d125      	bne.n	800410e <UART_SetConfig+0x342>
 80040c2:	4b71      	ldr	r3, [pc, #452]	; (8004288 <UART_SetConfig+0x4bc>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040d0:	d017      	beq.n	8004102 <UART_SetConfig+0x336>
 80040d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040d6:	d817      	bhi.n	8004108 <UART_SetConfig+0x33c>
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040dc:	d00b      	beq.n	80040f6 <UART_SetConfig+0x32a>
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e2:	d811      	bhi.n	8004108 <UART_SetConfig+0x33c>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <UART_SetConfig+0x324>
 80040e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ec:	d006      	beq.n	80040fc <UART_SetConfig+0x330>
 80040ee:	e00b      	b.n	8004108 <UART_SetConfig+0x33c>
 80040f0:	2300      	movs	r3, #0
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e00d      	b.n	8004112 <UART_SetConfig+0x346>
 80040f6:	2302      	movs	r3, #2
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e00a      	b.n	8004112 <UART_SetConfig+0x346>
 80040fc:	2304      	movs	r3, #4
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	e007      	b.n	8004112 <UART_SetConfig+0x346>
 8004102:	2308      	movs	r3, #8
 8004104:	77fb      	strb	r3, [r7, #31]
 8004106:	e004      	b.n	8004112 <UART_SetConfig+0x346>
 8004108:	2310      	movs	r3, #16
 800410a:	77fb      	strb	r3, [r7, #31]
 800410c:	e001      	b.n	8004112 <UART_SetConfig+0x346>
 800410e:	2310      	movs	r3, #16
 8004110:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d15b      	bne.n	80041d4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800411c:	7ffb      	ldrb	r3, [r7, #31]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d827      	bhi.n	8004172 <UART_SetConfig+0x3a6>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x35c>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800415d 	.word	0x0800415d
 8004134:	08004173 	.word	0x08004173
 8004138:	08004163 	.word	0x08004163
 800413c:	08004173 	.word	0x08004173
 8004140:	08004173 	.word	0x08004173
 8004144:	08004173 	.word	0x08004173
 8004148:	0800416b 	.word	0x0800416b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7fe fa8c 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8004150:	61b8      	str	r0, [r7, #24]
        break;
 8004152:	e013      	b.n	800417c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7fe fa9c 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8004158:	61b8      	str	r0, [r7, #24]
        break;
 800415a:	e00f      	b.n	800417c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415c:	4b4b      	ldr	r3, [pc, #300]	; (800428c <UART_SetConfig+0x4c0>)
 800415e:	61bb      	str	r3, [r7, #24]
        break;
 8004160:	e00c      	b.n	800417c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004162:	f7fe f9bf 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8004166:	61b8      	str	r0, [r7, #24]
        break;
 8004168:	e008      	b.n	800417c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	61bb      	str	r3, [r7, #24]
        break;
 8004170:	e004      	b.n	800417c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	77bb      	strb	r3, [r7, #30]
        break;
 800417a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d074      	beq.n	800426c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	005a      	lsls	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	fbb2 f3f3 	udiv	r3, r2, r3
 8004196:	b29b      	uxth	r3, r3
 8004198:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b0f      	cmp	r3, #15
 800419e:	d916      	bls.n	80041ce <UART_SetConfig+0x402>
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d212      	bcs.n	80041ce <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f023 030f 	bic.w	r3, r3, #15
 80041b0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	b29a      	uxth	r2, r3
 80041be:	89fb      	ldrh	r3, [r7, #14]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	89fa      	ldrh	r2, [r7, #14]
 80041ca:	60da      	str	r2, [r3, #12]
 80041cc:	e04e      	b.n	800426c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	77bb      	strb	r3, [r7, #30]
 80041d2:	e04b      	b.n	800426c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041d4:	7ffb      	ldrb	r3, [r7, #31]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d827      	bhi.n	800422a <UART_SetConfig+0x45e>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x414>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	08004205 	.word	0x08004205
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004215 	.word	0x08004215
 80041ec:	0800422b 	.word	0x0800422b
 80041f0:	0800421b 	.word	0x0800421b
 80041f4:	0800422b 	.word	0x0800422b
 80041f8:	0800422b 	.word	0x0800422b
 80041fc:	0800422b 	.word	0x0800422b
 8004200:	08004223 	.word	0x08004223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004204:	f7fe fa30 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8004208:	61b8      	str	r0, [r7, #24]
        break;
 800420a:	e013      	b.n	8004234 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe fa40 	bl	8002690 <HAL_RCC_GetPCLK2Freq>
 8004210:	61b8      	str	r0, [r7, #24]
        break;
 8004212:	e00f      	b.n	8004234 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <UART_SetConfig+0x4c0>)
 8004216:	61bb      	str	r3, [r7, #24]
        break;
 8004218:	e00c      	b.n	8004234 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800421a:	f7fe f963 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 800421e:	61b8      	str	r0, [r7, #24]
        break;
 8004220:	e008      	b.n	8004234 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	61bb      	str	r3, [r7, #24]
        break;
 8004228:	e004      	b.n	8004234 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	77bb      	strb	r3, [r7, #30]
        break;
 8004232:	bf00      	nop
    }

    if (pclk != 0U)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	085a      	lsrs	r2, r3, #1
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	fbb2 f3f3 	udiv	r3, r2, r3
 800424c:	b29b      	uxth	r3, r3
 800424e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b0f      	cmp	r3, #15
 8004254:	d908      	bls.n	8004268 <UART_SetConfig+0x49c>
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800425c:	d204      	bcs.n	8004268 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	e001      	b.n	800426c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004278:	7fbb      	ldrb	r3, [r7, #30]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3720      	adds	r7, #32
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40007c00 	.word	0x40007c00
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400

08004290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	f003 0310 	and.w	r3, r3, #16
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01a      	beq.n	80043a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800438e:	d10a      	bne.n	80043a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	605a      	str	r2, [r3, #4]
  }
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af02      	add	r7, sp, #8
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043e4:	f7fc fe46 	bl	8001074 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d10e      	bne.n	8004416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f82d 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e023      	b.n	800445e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b04      	cmp	r3, #4
 8004422:	d10e      	bne.n	8004442 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f817 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e00d      	b.n	800445e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2220      	movs	r2, #32
 8004446:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	e05e      	b.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447e:	d05a      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fc fdf8 	bl	8001074 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <UART_WaitOnFlagUntilTimeout+0x30>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d11b      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e043      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02c      	beq.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ea:	d124      	bne.n	8004536 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004504:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e00f      	b.n	8004556 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4013      	ands	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	429a      	cmp	r2, r3
 8004544:	bf0c      	ite	eq
 8004546:	2301      	moveq	r3, #1
 8004548:	2300      	movne	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	461a      	mov	r2, r3
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	429a      	cmp	r2, r3
 8004552:	d091      	beq.n	8004478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 8004564:	4904      	ldr	r1, [pc, #16]	; (8004578 <GUI_X_Config+0x18>)
 8004566:	4805      	ldr	r0, [pc, #20]	; (800457c <GUI_X_Config+0x1c>)
 8004568:	f000 fbe6 	bl	8004d38 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 800456c:	4804      	ldr	r0, [pc, #16]	; (8004580 <GUI_X_Config+0x20>)
 800456e:	f000 ff6d 	bl	800544c <GUI_SetDefaultFont>
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	0001d4c0 	.word	0x0001d4c0
 800457c:	2000025c 	.word	0x2000025c
 8004580:	0800e0e8 	.word	0x0800e0e8

08004584 <LcdWriteReg>:
*       LcdWriteReg
*
* Function description:
*   Sets display register
*/
void LcdWriteReg(U8 Command) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_RESET);	//command mode
 800458e:	2200      	movs	r2, #0
 8004590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004594:	4806      	ldr	r0, [pc, #24]	; (80045b0 <LcdWriteReg+0x2c>)
 8004596:	f7fd fba1 	bl	8001cdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &Command, 1, 100);
 800459a:	1df9      	adds	r1, r7, #7
 800459c:	2364      	movs	r3, #100	; 0x64
 800459e:	2201      	movs	r2, #1
 80045a0:	4804      	ldr	r0, [pc, #16]	; (80045b4 <LcdWriteReg+0x30>)
 80045a2:	f7fe fd5c 	bl	800305e <HAL_SPI_Transmit>

}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021c00 	.word	0x40021c00
 80045b4:	2001d7a4 	.word	0x2001d7a4

080045b8 <LcdWriteData>:
*       LcdWriteData
*
* Function description:
*   Writes a value to a display register
*/
void LcdWriteData(U8 Data) {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 80045c2:	2201      	movs	r2, #1
 80045c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045c8:	4806      	ldr	r0, [pc, #24]	; (80045e4 <LcdWriteData+0x2c>)
 80045ca:	f7fd fb87 	bl	8001cdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &Data, 1, 100);
 80045ce:	1df9      	adds	r1, r7, #7
 80045d0:	2364      	movs	r3, #100	; 0x64
 80045d2:	2201      	movs	r2, #1
 80045d4:	4804      	ldr	r0, [pc, #16]	; (80045e8 <LcdWriteData+0x30>)
 80045d6:	f7fe fd42 	bl	800305e <HAL_SPI_Transmit>

}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021c00 	.word	0x40021c00
 80045e8:	2001d7a4 	.word	0x2001d7a4

080045ec <LcdWriteDataMultiple>:
*       LcdWriteDataMultiple
*
* Function description:
*   Writes multiple values to a display register.
*/
void LcdWriteDataMultiple(U8 * pData, int NumItems) {
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]

		HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 80045f6:	2201      	movs	r2, #1
 80045f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045fc:	4806      	ldr	r0, [pc, #24]	; (8004618 <LcdWriteDataMultiple+0x2c>)
 80045fe:	f7fd fb6d 	bl	8001cdc <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi3, pData, NumItems, 100);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	2364      	movs	r3, #100	; 0x64
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	4804      	ldr	r0, [pc, #16]	; (800461c <LcdWriteDataMultiple+0x30>)
 800460c:	f7fe fd27 	bl	800305e <HAL_SPI_Transmit>

}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021c00 	.word	0x40021c00
 800461c:	2001d7a4 	.word	0x2001d7a4

08004620 <LcdReadData>:
*       LcdReadData
*
* Function description:
*   Reads multiple values from a display register.
*/
U8 LcdReadData() {
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0

	  U8 tempData = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	71fb      	strb	r3, [r7, #7]

	  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 800462a:	2201      	movs	r2, #1
 800462c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004630:	4806      	ldr	r0, [pc, #24]	; (800464c <LcdReadData+0x2c>)
 8004632:	f7fd fb53 	bl	8001cdc <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi3, &tempData, 1, 100);
 8004636:	1df9      	adds	r1, r7, #7
 8004638:	2364      	movs	r3, #100	; 0x64
 800463a:	2201      	movs	r2, #1
 800463c:	4804      	ldr	r0, [pc, #16]	; (8004650 <LcdReadData+0x30>)
 800463e:	f7fe fe7c 	bl	800333a <HAL_SPI_Receive>

	  return tempData;
 8004642:	79fb      	ldrb	r3, [r7, #7]

}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021c00 	.word	0x40021c00
 8004650:	2001d7a4 	.word	0x2001d7a4

08004654 <LcdReadDataMultiple>:
*       LcdReadDataMultiple
*
* Function description:
*   Reads multiple values from a display register.
*/
void LcdReadDataMultiple(U8 * pData, int NumItems) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]

	  HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);	//data mode
 800465e:	2201      	movs	r2, #1
 8004660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004664:	4806      	ldr	r0, [pc, #24]	; (8004680 <LcdReadDataMultiple+0x2c>)
 8004666:	f7fd fb39 	bl	8001cdc <HAL_GPIO_WritePin>

	  HAL_SPI_Receive(&hspi3, pData, NumItems, 100);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	b29a      	uxth	r2, r3
 800466e:	2364      	movs	r3, #100	; 0x64
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4804      	ldr	r0, [pc, #16]	; (8004684 <LcdReadDataMultiple+0x30>)
 8004674:	f7fe fe61 	bl	800333a <HAL_SPI_Receive>

}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021c00 	.word	0x40021c00
 8004684:	2001d7a4 	.word	0x2001d7a4

08004688 <LCD_X_Config>:
* Function description:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b0a0      	sub	sp, #128	; 0x80
 800468c:	af00      	add	r7, sp, #0
  GUI_DEVICE * pDevice;
  CONFIG_FLEXCOLOR Config = {0};
 800468e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004692:	2200      	movs	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	609a      	str	r2, [r3, #8]
 800469a:	60da      	str	r2, [r3, #12]
 800469c:	611a      	str	r2, [r3, #16]
  GUI_PORT_API PortAPI = {0};
 800469e:	463b      	mov	r3, r7
 80046a0:	2268      	movs	r2, #104	; 0x68
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f008 faaf 	bl	800cc08 <memset>
  //
  // Set display driver and color conversion
  //
  pDevice = GUI_DEVICE_CreateAndLink(GUIDRV_FLEXCOLOR, COLOR_CONVERSION, 0, 0);
 80046aa:	2300      	movs	r3, #0
 80046ac:	2200      	movs	r2, #0
 80046ae:	4922      	ldr	r1, [pc, #136]	; (8004738 <LCD_X_Config+0xb0>)
 80046b0:	4822      	ldr	r0, [pc, #136]	; (800473c <LCD_X_Config+0xb4>)
 80046b2:	f001 f8c9 	bl	8005848 <GUI_DEVICE_CreateAndLink>
 80046b6:	67f8      	str	r0, [r7, #124]	; 0x7c
  //
  // Display driver configuration, required for Lin-driver
  //
  LCD_SetSizeEx (0, XSIZE_PHYS , YSIZE_PHYS);
 80046b8:	22a0      	movs	r2, #160	; 0xa0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	2000      	movs	r0, #0
 80046be:	f001 ffa7 	bl	8006610 <LCD_SetSizeEx>
  LCD_SetVSizeEx(0, VXSIZE_PHYS, VYSIZE_PHYS);
 80046c2:	22a0      	movs	r2, #160	; 0xa0
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	2000      	movs	r0, #0
 80046c8:	f001 ffba 	bl	8006640 <LCD_SetVSizeEx>
  //
  // Orientation
  //
  Config.Orientation = DISPLAY_ORIENTATION; //GUI_SWAP_XY | GUI_MIRROR_Y;
 80046cc:	2306      	movs	r3, #6
 80046ce:	673b      	str	r3, [r7, #112]	; 0x70

  //mel
  //Config.NumDummyReads = 1;  //needed for ili9341 shield

  GUIDRV_FlexColor_Config(pDevice, &Config);
 80046d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80046d4:	4619      	mov	r1, r3
 80046d6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80046d8:	f002 fab3 	bl	8006c42 <GUIDRV_FlexColor_Config>


  //
  // Set controller and operation mode
  //
  PortAPI.pfWrite8_A0  = LcdWriteReg;
 80046dc:	4b18      	ldr	r3, [pc, #96]	; (8004740 <LCD_X_Config+0xb8>)
 80046de:	603b      	str	r3, [r7, #0]
  PortAPI.pfWrite8_A1  = LcdWriteData;
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <LCD_X_Config+0xbc>)
 80046e2:	607b      	str	r3, [r7, #4]
  PortAPI.pfWriteM8_A1 = LcdWriteDataMultiple;
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <LCD_X_Config+0xc0>)
 80046e6:	60fb      	str	r3, [r7, #12]
  PortAPI.pfRead8_A1   = LcdReadData;
 80046e8:	4b18      	ldr	r3, [pc, #96]	; (800474c <LCD_X_Config+0xc4>)
 80046ea:	617b      	str	r3, [r7, #20]
  PortAPI.pfReadM8_A1  = LcdReadDataMultiple;
 80046ec:	4b18      	ldr	r3, [pc, #96]	; (8004750 <LCD_X_Config+0xc8>)
 80046ee:	61fb      	str	r3, [r7, #28]
#ifdef ILI9341
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);
#elif ILI9488
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M24C0B8);
#else
  GUIDRV_FlexColor_SetFunc(pDevice, &PortAPI, GUIDRV_FLEXCOLOR_F66709, GUIDRV_FLEXCOLOR_M16C0B8);
 80046f0:	4639      	mov	r1, r7
 80046f2:	4b18      	ldr	r3, [pc, #96]	; (8004754 <LCD_X_Config+0xcc>)
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <LCD_X_Config+0xd0>)
 80046f6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80046f8:	f002 fac1 	bl	8006c7e <GUIDRV_FlexColor_SetFunc>
#endif

  //
  // Display driver configuration
  //
 if (LCD_GetSwapXY()) {
 80046fc:	f001 fe9a 	bl	8006434 <LCD_GetSwapXY>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <LCD_X_Config+0x94>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	21a0      	movs	r1, #160	; 0xa0
 800470a:	2000      	movs	r0, #0
 800470c:	f001 ff80 	bl	8006610 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 8004710:	2280      	movs	r2, #128	; 0x80
 8004712:	21a0      	movs	r1, #160	; 0xa0
 8004714:	2000      	movs	r0, #0
 8004716:	f001 ff93 	bl	8006640 <LCD_SetVSizeEx>
	    //
	    GUI_TOUCH_Calibrate(GUI_COORD_X, 0, WIDTH  - 1, TOUCH_LEFT, TOUCH_RIGHT);
	    GUI_TOUCH_Calibrate(GUI_COORD_Y, 0, HEIGHT - 1, TOUCH_TOP,  TOUCH_BOTTOM);

#endif
}
 800471a:	e009      	b.n	8004730 <LCD_X_Config+0xa8>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800471c:	22a0      	movs	r2, #160	; 0xa0
 800471e:	2180      	movs	r1, #128	; 0x80
 8004720:	2000      	movs	r0, #0
 8004722:	f001 ff75 	bl	8006610 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 8004726:	22a0      	movs	r2, #160	; 0xa0
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	2000      	movs	r0, #0
 800472c:	f001 ff88 	bl	8006640 <LCD_SetVSizeEx>
}
 8004730:	bf00      	nop
 8004732:	3780      	adds	r7, #128	; 0x80
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	0800cc44 	.word	0x0800cc44
 800473c:	0800d040 	.word	0x0800d040
 8004740:	08004585 	.word	0x08004585
 8004744:	080045b9 	.word	0x080045b9
 8004748:	080045ed 	.word	0x080045ed
 800474c:	08004621 	.word	0x08004621
 8004750:	08004655 	.word	0x08004655
 8004754:	08007349 	.word	0x08007349
 8004758:	080076e9 	.word	0x080076e9

0800475c <LCD_X_DisplayDriver>:
* Return Value:
*   < -1 - Error
*     -1 - Command not handled
*      0 - Ok
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  int r;
  (void) LayerIndex;
  (void) pData;
  
  switch (Cmd) {
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d103      	bne.n	8004776 <LCD_X_DisplayDriver+0x1a>
#elif defined ILI9481
	 InitLCD_ILI9481();
#elif defined ILI9488
	 InitLCD_ILI9488();
#else
	 InitLCD_ILI9341();
 800476e:	f000 f80b 	bl	8004788 <InitLCD_ILI9341>
#endif

    return 0;
 8004772:	2300      	movs	r3, #0
 8004774:	e003      	b.n	800477e <LCD_X_DisplayDriver+0x22>
  }
  default:
    r = -1;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800477a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800477c:	697b      	ldr	r3, [r7, #20]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <InitLCD_ILI9341>:

//ILI9341 specific functions

void InitLCD_ILI9341(void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 800478c:	2201      	movs	r2, #1
 800478e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004792:	48a5      	ldr	r0, [pc, #660]	; (8004a28 <InitLCD_ILI9341+0x2a0>)
 8004794:	f7fd faa2 	bl	8001cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8004798:	2201      	movs	r2, #1
 800479a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800479e:	48a3      	ldr	r0, [pc, #652]	; (8004a2c <InitLCD_ILI9341+0x2a4>)
 80047a0:	f7fd fa9c 	bl	8001cdc <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); 		//disable CS
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET); 		//enable CS
 80047a4:	2200      	movs	r2, #0
 80047a6:	2140      	movs	r1, #64	; 0x40
 80047a8:	48a1      	ldr	r0, [pc, #644]	; (8004a30 <InitLCD_ILI9341+0x2a8>)
 80047aa:	f7fd fa97 	bl	8001cdc <HAL_GPIO_WritePin>


	/* Force reset */
	  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 80047ae:	2201      	movs	r2, #1
 80047b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047b4:	489c      	ldr	r0, [pc, #624]	; (8004a28 <InitLCD_ILI9341+0x2a0>)
 80047b6:	f7fd fa91 	bl	8001cdc <HAL_GPIO_WritePin>
	  HAL_Delay(30);
 80047ba:	201e      	movs	r0, #30
 80047bc:	f7fc fc66 	bl	800108c <HAL_Delay>
	  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_RESET);
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047c6:	4898      	ldr	r0, [pc, #608]	; (8004a28 <InitLCD_ILI9341+0x2a0>)
 80047c8:	f7fd fa88 	bl	8001cdc <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80047cc:	200a      	movs	r0, #10
 80047ce:	f7fc fc5d 	bl	800108c <HAL_Delay>
	  HAL_GPIO_WritePin(TFT_RESET_GPIO_Port, TFT_RESET_Pin, GPIO_PIN_SET);
 80047d2:	2201      	movs	r2, #1
 80047d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047d8:	4893      	ldr	r0, [pc, #588]	; (8004a28 <InitLCD_ILI9341+0x2a0>)
 80047da:	f7fd fa7f 	bl	8001cdc <HAL_GPIO_WritePin>


	/* Delay for RST response */
	HAL_Delay(200);
 80047de:	20c8      	movs	r0, #200	; 0xc8
 80047e0:	f7fc fc54 	bl	800108c <HAL_Delay>

	/* Software reset */
	LcdWriteReg(ILI9341_RESET);
 80047e4:	2001      	movs	r0, #1
 80047e6:	f7ff fecd 	bl	8004584 <LcdWriteReg>
	HAL_Delay(100);
 80047ea:	2064      	movs	r0, #100	; 0x64
 80047ec:	f7fc fc4e 	bl	800108c <HAL_Delay>

	LcdWriteReg(ILI9341_POWERA);
 80047f0:	20cb      	movs	r0, #203	; 0xcb
 80047f2:	f7ff fec7 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x39);
 80047f6:	2039      	movs	r0, #57	; 0x39
 80047f8:	f7ff fede 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x2C);
 80047fc:	202c      	movs	r0, #44	; 0x2c
 80047fe:	f7ff fedb 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 8004802:	2000      	movs	r0, #0
 8004804:	f7ff fed8 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x34);
 8004808:	2034      	movs	r0, #52	; 0x34
 800480a:	f7ff fed5 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x02);
 800480e:	2002      	movs	r0, #2
 8004810:	f7ff fed2 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_POWERB);
 8004814:	20cf      	movs	r0, #207	; 0xcf
 8004816:	f7ff feb5 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00);
 800481a:	2000      	movs	r0, #0
 800481c:	f7ff fecc 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0xC1);
 8004820:	20c1      	movs	r0, #193	; 0xc1
 8004822:	f7ff fec9 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x30);
 8004826:	2030      	movs	r0, #48	; 0x30
 8004828:	f7ff fec6 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_DTCA);
 800482c:	20e8      	movs	r0, #232	; 0xe8
 800482e:	f7ff fea9 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x85);
 8004832:	2085      	movs	r0, #133	; 0x85
 8004834:	f7ff fec0 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 8004838:	2000      	movs	r0, #0
 800483a:	f7ff febd 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x78);
 800483e:	2078      	movs	r0, #120	; 0x78
 8004840:	f7ff feba 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_DTCB);
 8004844:	20ea      	movs	r0, #234	; 0xea
 8004846:	f7ff fe9d 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f7ff feb4 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 8004850:	2000      	movs	r0, #0
 8004852:	f7ff feb1 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_POWER_SEQ);
 8004856:	20ed      	movs	r0, #237	; 0xed
 8004858:	f7ff fe94 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x64);
 800485c:	2064      	movs	r0, #100	; 0x64
 800485e:	f7ff feab 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x03);
 8004862:	2003      	movs	r0, #3
 8004864:	f7ff fea8 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x12);
 8004868:	2012      	movs	r0, #18
 800486a:	f7ff fea5 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x81);
 800486e:	2081      	movs	r0, #129	; 0x81
 8004870:	f7ff fea2 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_PRC);
 8004874:	20f7      	movs	r0, #247	; 0xf7
 8004876:	f7ff fe85 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x20);
 800487a:	2020      	movs	r0, #32
 800487c:	f7ff fe9c 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_POWER1); //4.6V
 8004880:	20c0      	movs	r0, #192	; 0xc0
 8004882:	f7ff fe7f 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x23);
 8004886:	2023      	movs	r0, #35	; 0x23
 8004888:	f7ff fe96 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_POWER2);
 800488c:	20c1      	movs	r0, #193	; 0xc1
 800488e:	f7ff fe79 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x10);
 8004892:	2010      	movs	r0, #16
 8004894:	f7ff fe90 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_VCOM1);
 8004898:	20c5      	movs	r0, #197	; 0xc5
 800489a:	f7ff fe73 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x3E);		//vcomh 4.250V
 800489e:	203e      	movs	r0, #62	; 0x3e
 80048a0:	f7ff fe8a 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x28);		//vcoml -1.500V
 80048a4:	2028      	movs	r0, #40	; 0x28
 80048a6:	f7ff fe87 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_VCOM2);
 80048aa:	20c7      	movs	r0, #199	; 0xc7
 80048ac:	f7ff fe6a 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x86);
 80048b0:	2086      	movs	r0, #134	; 0x86
 80048b2:	f7ff fe81 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_MAC); //memory access control
 80048b6:	2036      	movs	r0, #54	; 0x36
 80048b8:	f7ff fe64 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x48);	//48
 80048bc:	2048      	movs	r0, #72	; 0x48
 80048be:	f7ff fe7b 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_PIXEL_FORMAT);
 80048c2:	203a      	movs	r0, #58	; 0x3a
 80048c4:	f7ff fe5e 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x55);	//rgb  16bits/pixel mcu 16bits/pixel
 80048c8:	2055      	movs	r0, #85	; 0x55
 80048ca:	f7ff fe75 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_FRC); //Frame Rate Cntrol
 80048ce:	20b1      	movs	r0, #177	; 0xb1
 80048d0:	f7ff fe58 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00); //diva freq == fosc
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7ff fe6f 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x18);	//79Hz refresh
 80048da:	2018      	movs	r0, #24
 80048dc:	f7ff fe6c 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_DFC);//display function control
 80048e0:	20b6      	movs	r0, #182	; 0xb6
 80048e2:	f7ff fe4f 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x08);
 80048e6:	2008      	movs	r0, #8
 80048e8:	f7ff fe66 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0xA2); //normally white, gs - g1-g320, ss - s720-s1
 80048ec:	20a2      	movs	r0, #162	; 0xa2
 80048ee:	f7ff fe63 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x27);
 80048f2:	2027      	movs	r0, #39	; 0x27
 80048f4:	f7ff fe60 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_3GAMMA_EN);
 80048f8:	20f2      	movs	r0, #242	; 0xf2
 80048fa:	f7ff fe43 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00);
 80048fe:	2000      	movs	r0, #0
 8004900:	f7ff fe5a 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_COLUMN_ADDR);
 8004904:	202a      	movs	r0, #42	; 0x2a
 8004906:	f7ff fe3d 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00);
 800490a:	2000      	movs	r0, #0
 800490c:	f7ff fe54 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 8004910:	2000      	movs	r0, #0
 8004912:	f7ff fe51 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 8004916:	2000      	movs	r0, #0
 8004918:	f7ff fe4e 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0xEF);
 800491c:	20ef      	movs	r0, #239	; 0xef
 800491e:	f7ff fe4b 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_PAGE_ADDR);
 8004922:	202b      	movs	r0, #43	; 0x2b
 8004924:	f7ff fe2e 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00);
 8004928:	2000      	movs	r0, #0
 800492a:	f7ff fe45 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 800492e:	2000      	movs	r0, #0
 8004930:	f7ff fe42 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x01);
 8004934:	2001      	movs	r0, #1
 8004936:	f7ff fe3f 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x3F);
 800493a:	203f      	movs	r0, #63	; 0x3f
 800493c:	f7ff fe3c 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_GAMMA);
 8004940:	2026      	movs	r0, #38	; 0x26
 8004942:	f7ff fe1f 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x01);
 8004946:	2001      	movs	r0, #1
 8004948:	f7ff fe36 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_PGAMMA);
 800494c:	20e0      	movs	r0, #224	; 0xe0
 800494e:	f7ff fe19 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x0F);
 8004952:	200f      	movs	r0, #15
 8004954:	f7ff fe30 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x31);
 8004958:	2031      	movs	r0, #49	; 0x31
 800495a:	f7ff fe2d 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x2B);
 800495e:	202b      	movs	r0, #43	; 0x2b
 8004960:	f7ff fe2a 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0C);
 8004964:	200c      	movs	r0, #12
 8004966:	f7ff fe27 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0E);
 800496a:	200e      	movs	r0, #14
 800496c:	f7ff fe24 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x08);
 8004970:	2008      	movs	r0, #8
 8004972:	f7ff fe21 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x4E);
 8004976:	204e      	movs	r0, #78	; 0x4e
 8004978:	f7ff fe1e 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0xF1);
 800497c:	20f1      	movs	r0, #241	; 0xf1
 800497e:	f7ff fe1b 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x37);
 8004982:	2037      	movs	r0, #55	; 0x37
 8004984:	f7ff fe18 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x07);
 8004988:	2007      	movs	r0, #7
 800498a:	f7ff fe15 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x10);
 800498e:	2010      	movs	r0, #16
 8004990:	f7ff fe12 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x03);
 8004994:	2003      	movs	r0, #3
 8004996:	f7ff fe0f 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0E);
 800499a:	200e      	movs	r0, #14
 800499c:	f7ff fe0c 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x09);
 80049a0:	2009      	movs	r0, #9
 80049a2:	f7ff fe09 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x00);
 80049a6:	2000      	movs	r0, #0
 80049a8:	f7ff fe06 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_NGAMMA);
 80049ac:	20e1      	movs	r0, #225	; 0xe1
 80049ae:	f7ff fde9 	bl	8004584 <LcdWriteReg>
	LcdWriteData(0x00);
 80049b2:	2000      	movs	r0, #0
 80049b4:	f7ff fe00 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0E);
 80049b8:	200e      	movs	r0, #14
 80049ba:	f7ff fdfd 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x14);
 80049be:	2014      	movs	r0, #20
 80049c0:	f7ff fdfa 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x03);
 80049c4:	2003      	movs	r0, #3
 80049c6:	f7ff fdf7 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x11);
 80049ca:	2011      	movs	r0, #17
 80049cc:	f7ff fdf4 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x07);
 80049d0:	2007      	movs	r0, #7
 80049d2:	f7ff fdf1 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x31);
 80049d6:	2031      	movs	r0, #49	; 0x31
 80049d8:	f7ff fdee 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0xC1);
 80049dc:	20c1      	movs	r0, #193	; 0xc1
 80049de:	f7ff fdeb 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x48);
 80049e2:	2048      	movs	r0, #72	; 0x48
 80049e4:	f7ff fde8 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x08);
 80049e8:	2008      	movs	r0, #8
 80049ea:	f7ff fde5 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0F);
 80049ee:	200f      	movs	r0, #15
 80049f0:	f7ff fde2 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0C);
 80049f4:	200c      	movs	r0, #12
 80049f6:	f7ff fddf 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x31);
 80049fa:	2031      	movs	r0, #49	; 0x31
 80049fc:	f7ff fddc 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x36);
 8004a00:	2036      	movs	r0, #54	; 0x36
 8004a02:	f7ff fdd9 	bl	80045b8 <LcdWriteData>
	LcdWriteData(0x0F);
 8004a06:	200f      	movs	r0, #15
 8004a08:	f7ff fdd6 	bl	80045b8 <LcdWriteData>
	LcdWriteReg(ILI9341_SLEEP_OUT);
 8004a0c:	2011      	movs	r0, #17
 8004a0e:	f7ff fdb9 	bl	8004584 <LcdWriteReg>

	HAL_Delay(100);
 8004a12:	2064      	movs	r0, #100	; 0x64
 8004a14:	f7fc fb3a 	bl	800108c <HAL_Delay>

	LcdWriteReg(ILI9341_DISPLAY_ON);
 8004a18:	2029      	movs	r0, #41	; 0x29
 8004a1a:	f7ff fdb3 	bl	8004584 <LcdWriteReg>
	LcdWriteReg(ILI9341_GRAM);
 8004a1e:	202c      	movs	r0, #44	; 0x2c
 8004a20:	f7ff fdb0 	bl	8004584 <LcdWriteReg>
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40022000 	.word	0x40022000
 8004a2c:	40021c00 	.word	0x40021c00
 8004a30:	40020800 	.word	0x40020800

08004a34 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <LCD_Index2Color_565>:
 8004a44:	f3c0 1345 	ubfx	r3, r0, #5, #6
 8004a48:	4a06      	ldr	r2, [pc, #24]	; (8004a64 <LCD_Index2Color_565+0x20>)
 8004a4a:	5cd1      	ldrb	r1, [r2, r3]
 8004a4c:	f3c0 23c4 	ubfx	r3, r0, #11, #5
 8004a50:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <LCD_Index2Color_565+0x24>)
 8004a52:	f000 001f 	and.w	r0, r0, #31
 8004a56:	5cd3      	ldrb	r3, [r2, r3]
 8004a58:	5c10      	ldrb	r0, [r2, r0]
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8004a60:	4418      	add	r0, r3
 8004a62:	4770      	bx	lr
 8004a64:	0800cf84 	.word	0x0800cf84
 8004a68:	0800cfc4 	.word	0x0800cfc4

08004a6c <_Color2Index_565>:
 8004a6c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <_Color2Index_565+0x20>)
 8004a72:	5cd1      	ldrb	r1, [r2, r3]
 8004a74:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8004a78:	4a05      	ldr	r2, [pc, #20]	; (8004a90 <_Color2Index_565+0x24>)
 8004a7a:	b2c0      	uxtb	r0, r0
 8004a7c:	5cd3      	ldrb	r3, [r2, r3]
 8004a7e:	5c10      	ldrb	r0, [r2, r0]
 8004a80:	02db      	lsls	r3, r3, #11
 8004a82:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8004a86:	4418      	add	r0, r3
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	0800cc84 	.word	0x0800cc84
 8004a90:	0800cd84 	.word	0x0800cd84

08004a94 <_GetIndexMask_565>:
 8004a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a98:	4770      	bx	lr
	...

08004a9c <_Color2IndexBulk>:
 8004a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a9e:	f8df e034 	ldr.w	lr, [pc, #52]	; 8004ad4 <_Color2IndexBulk+0x38>
 8004aa2:	4e0b      	ldr	r6, [pc, #44]	; (8004ad0 <_Color2IndexBulk+0x34>)
 8004aa4:	f850 5b04 	ldr.w	r5, [r0], #4
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	f3c5 2407 	ubfx	r4, r5, #8, #8
 8004aae:	f81e 7004 	ldrb.w	r7, [lr, r4]
 8004ab2:	f3c5 4407 	ubfx	r4, r5, #16, #8
 8004ab6:	b2ed      	uxtb	r5, r5
 8004ab8:	5d34      	ldrb	r4, [r6, r4]
 8004aba:	5d75      	ldrb	r5, [r6, r5]
 8004abc:	ea4f 24c4 	mov.w	r4, r4, lsl #11
 8004ac0:	eb04 1447 	add.w	r4, r4, r7, lsl #5
 8004ac4:	442c      	add	r4, r5
 8004ac6:	800c      	strh	r4, [r1, #0]
 8004ac8:	4419      	add	r1, r3
 8004aca:	d1eb      	bne.n	8004aa4 <_Color2IndexBulk+0x8>
 8004acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	0800cd84 	.word	0x0800cd84
 8004ad4:	0800cc84 	.word	0x0800cc84

08004ad8 <_Index2ColorBulk>:
 8004ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ada:	1e54      	subs	r4, r2, #1
 8004adc:	4e0f      	ldr	r6, [pc, #60]	; (8004b1c <_Index2ColorBulk+0x44>)
 8004ade:	4f10      	ldr	r7, [pc, #64]	; (8004b20 <_Index2ColorBulk+0x48>)
 8004ae0:	fb03 0004 	mla	r0, r3, r4, r0
 8004ae4:	f102 4480 	add.w	r4, r2, #1073741824	; 0x40000000
 8004ae8:	3c01      	subs	r4, #1
 8004aea:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004aee:	8805      	ldrh	r5, [r0, #0]
 8004af0:	3a01      	subs	r2, #1
 8004af2:	eba0 0003 	sub.w	r0, r0, r3
 8004af6:	ea4f 24d5 	mov.w	r4, r5, lsr #11
 8004afa:	f816 e004 	ldrb.w	lr, [r6, r4]
 8004afe:	f005 041f 	and.w	r4, r5, #31
 8004b02:	f3c5 1545 	ubfx	r5, r5, #5, #6
 8004b06:	5d34      	ldrb	r4, [r6, r4]
 8004b08:	5d7d      	ldrb	r5, [r7, r5]
 8004b0a:	eb04 440e 	add.w	r4, r4, lr, lsl #16
 8004b0e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 8004b12:	f841 4904 	str.w	r4, [r1], #-4
 8004b16:	d1ea      	bne.n	8004aee <_Index2ColorBulk+0x16>
 8004b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	0800cfc4 	.word	0x0800cfc4
 8004b20:	0800cf84 	.word	0x0800cf84

08004b24 <_PushFreeBlock>:
 8004b24:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <_PushFreeBlock+0x20>)
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	3201      	adds	r2, #1
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004b32:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8004b36:	604c      	str	r4, [r1, #4]
 8004b38:	2100      	movs	r1, #0
 8004b3a:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8004b3e:	6258      	str	r0, [r3, #36]	; 0x24
 8004b40:	bd10      	pop	{r4, pc}
 8004b42:	bf00      	nop
 8004b44:	2001d8d8 	.word	0x2001d8d8

08004b48 <_RemoveFreeBlock>:
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	230f      	movs	r3, #15
 8004b4c:	6844      	ldr	r4, [r0, #4]
 8004b4e:	490d      	ldr	r1, [pc, #52]	; (8004b84 <_RemoveFreeBlock+0x3c>)
 8004b50:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8004b54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b56:	4294      	cmp	r4, r2
 8004b58:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <_RemoveFreeBlock+0x3c>)
 8004b5a:	d203      	bcs.n	8004b64 <_RemoveFreeBlock+0x1c>
 8004b5c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004b60:	d2f6      	bcs.n	8004b50 <_RemoveFreeBlock+0x8>
 8004b62:	bd10      	pop	{r4, pc}
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d80c      	bhi.n	8004b82 <_RemoveFreeBlock+0x3a>
 8004b68:	6811      	ldr	r1, [r2, #0]
 8004b6a:	1b09      	subs	r1, r1, r4
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	6881      	ldr	r1, [r0, #8]
 8004b70:	68c0      	ldr	r0, [r0, #12]
 8004b72:	b101      	cbz	r1, 8004b76 <_RemoveFreeBlock+0x2e>
 8004b74:	6048      	str	r0, [r1, #4]
 8004b76:	b108      	cbz	r0, 8004b7c <_RemoveFreeBlock+0x34>
 8004b78:	6001      	str	r1, [r0, #0]
 8004b7a:	bd10      	pop	{r4, pc}
 8004b7c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004b80:	6459      	str	r1, [r3, #68]	; 0x44
 8004b82:	bd10      	pop	{r4, pc}
 8004b84:	2001d8d8 	.word	0x2001d8d8

08004b88 <_AddFreeMemory>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	4e27      	ldr	r6, [pc, #156]	; (8004c28 <_AddFreeMemory+0xa0>)
 8004b8c:	4605      	mov	r5, r0
 8004b8e:	1808      	adds	r0, r1, r0
 8004b90:	460c      	mov	r4, r1
 8004b92:	68f3      	ldr	r3, [r6, #12]
 8004b94:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8004b96:	3b01      	subs	r3, #1
 8004b98:	4413      	add	r3, r2
 8004b9a:	4283      	cmp	r3, r0
 8004b9c:	d305      	bcc.n	8004baa <_AddFreeMemory+0x22>
 8004b9e:	594b      	ldr	r3, [r1, r5]
 8004ba0:	b91b      	cbnz	r3, 8004baa <_AddFreeMemory+0x22>
 8004ba2:	6843      	ldr	r3, [r0, #4]
 8004ba4:	441d      	add	r5, r3
 8004ba6:	f7ff ffcf 	bl	8004b48 <_RemoveFreeBlock>
 8004baa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004bac:	429c      	cmp	r4, r3
 8004bae:	d90a      	bls.n	8004bc6 <_AddFreeMemory+0x3e>
 8004bb0:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8004bb4:	1be7      	subs	r7, r4, r7
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b92b      	cbnz	r3, 8004bc6 <_AddFreeMemory+0x3e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	463c      	mov	r4, r7
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	441d      	add	r5, r3
 8004bc2:	f7ff ffc1 	bl	8004b48 <_RemoveFreeBlock>
 8004bc6:	230f      	movs	r3, #15
 8004bc8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8004bcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bce:	4295      	cmp	r5, r2
 8004bd0:	d203      	bcs.n	8004bda <_AddFreeMemory+0x52>
 8004bd2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004bd6:	d2f7      	bcs.n	8004bc8 <_AddFreeMemory+0x40>
 8004bd8:	e023      	b.n	8004c22 <_AddFreeMemory+0x9a>
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	d821      	bhi.n	8004c22 <_AddFreeMemory+0x9a>
 8004bde:	3308      	adds	r3, #8
 8004be0:	1960      	adds	r0, r4, r5
 8004be2:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8004be6:	6851      	ldr	r1, [r2, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	6124      	str	r4, [r4, #16]
 8004bec:	60a1      	str	r1, [r4, #8]
 8004bee:	e884 0024 	stmia.w	r4, {r2, r5}
 8004bf2:	f840 5c04 	str.w	r5, [r0, #-4]
 8004bf6:	f104 0008 	add.w	r0, r4, #8
 8004bfa:	b101      	cbz	r1, 8004bfe <_AddFreeMemory+0x76>
 8004bfc:	6048      	str	r0, [r1, #4]
 8004bfe:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8004c02:	60a1      	str	r1, [r4, #8]
 8004c04:	60e2      	str	r2, [r4, #12]
 8004c06:	6058      	str	r0, [r3, #4]
 8004c08:	6833      	ldr	r3, [r6, #0]
 8004c0a:	4907      	ldr	r1, [pc, #28]	; (8004c28 <_AddFreeMemory+0xa0>)
 8004c0c:	18ea      	adds	r2, r5, r3
 8004c0e:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8004c12:	6032      	str	r2, [r6, #0]
 8004c14:	b92b      	cbnz	r3, 8004c22 <_AddFreeMemory+0x9a>
 8004c16:	68cb      	ldr	r3, [r1, #12]
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	688a      	ldr	r2, [r1, #8]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf88      	it	hi
 8004c20:	608b      	strhi	r3, [r1, #8]
 8004c22:	4628      	mov	r0, r5
 8004c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2001d8d8 	.word	0x2001d8d8

08004c2c <_RemoveHoles>:
 8004c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c30:	4f23      	ldr	r7, [pc, #140]	; (8004cc0 <_RemoveHoles+0x94>)
 8004c32:	4683      	mov	fp, r0
 8004c34:	68fe      	ldr	r6, [r7, #12]
 8004c36:	46b8      	mov	r8, r7
 8004c38:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8004c3a:	3e01      	subs	r6, #1
 8004c3c:	4426      	add	r6, r4
 8004c3e:	e894 0028 	ldmia.w	r4, {r3, r5}
 8004c42:	bb9b      	cbnz	r3, 8004cac <_RemoveHoles+0x80>
 8004c44:	1961      	adds	r1, r4, r5
 8004c46:	428e      	cmp	r6, r1
 8004c48:	d930      	bls.n	8004cac <_RemoveHoles+0x80>
 8004c4a:	f854 a005 	ldr.w	sl, [r4, r5]
 8004c4e:	f1ba 0f00 	cmp.w	sl, #0
 8004c52:	d02b      	beq.n	8004cac <_RemoveHoles+0x80>
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c56:	f813 303a 	ldrb.w	r3, [r3, sl, lsl #3]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d126      	bne.n	8004cac <_RemoveHoles+0x80>
 8004c5e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8004c62:	4620      	mov	r0, r4
 8004c64:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	9101      	str	r1, [sp, #4]
 8004c6c:	f7ff ff6c 	bl	8004b48 <_RemoveFreeBlock>
 8004c70:	9901      	ldr	r1, [sp, #4]
 8004c72:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8004c76:	6808      	ldr	r0, [r1, #0]
 8004c78:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	6054      	str	r4, [r2, #4]
 8004c80:	464a      	mov	r2, r9
 8004c82:	f007 ffa7 	bl	800cbd4 <memmove>
 8004c86:	9b00      	ldr	r3, [sp, #0]
 8004c88:	eb04 0109 	add.w	r1, r4, r9
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	459a      	cmp	sl, r3
 8004c90:	bf02      	ittt	eq
 8004c92:	f8d8 3034 	ldreq.w	r3, [r8, #52]	; 0x34
 8004c96:	1b5b      	subeq	r3, r3, r5
 8004c98:	f8c8 3034 	streq.w	r3, [r8, #52]	; 0x34
 8004c9c:	f7ff ff74 	bl	8004b88 <_AddFreeMemory>
 8004ca0:	f1bb 0f00 	cmp.w	fp, #0
 8004ca4:	d001      	beq.n	8004caa <_RemoveHoles+0x7e>
 8004ca6:	4558      	cmp	r0, fp
 8004ca8:	d205      	bcs.n	8004cb6 <_RemoveHoles+0x8a>
 8004caa:	464d      	mov	r5, r9
 8004cac:	442c      	add	r4, r5
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d8c5      	bhi.n	8004c3e <_RemoveHoles+0x12>
 8004cb2:	2001      	movs	r0, #1
 8004cb4:	e000      	b.n	8004cb8 <_RemoveHoles+0x8c>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	b003      	add	sp, #12
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2001d8d8 	.word	0x2001d8d8

08004cc4 <GUI_ALLOC_FreeFixedBlock>:
 8004cc4:	b128      	cbz	r0, 8004cd2 <GUI_ALLOC_FreeFixedBlock+0xe>
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <GUI_ALLOC_FreeFixedBlock+0x10>)
 8004cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cca:	6002      	str	r2, [r0, #0]
 8004ccc:	b102      	cbz	r2, 8004cd0 <GUI_ALLOC_FreeFixedBlock+0xc>
 8004cce:	6050      	str	r0, [r2, #4]
 8004cd0:	63d8      	str	r0, [r3, #60]	; 0x3c
 8004cd2:	4770      	bx	lr
 8004cd4:	2001d8d8 	.word	0x2001d8d8

08004cd8 <GUI_ALLOC_h2p>:
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <GUI_ALLOC_h2p+0x10>)
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cdc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8004ce0:	6840      	ldr	r0, [r0, #4]
 8004ce2:	3008      	adds	r0, #8
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2001d8d8 	.word	0x2001d8d8

08004cec <GUI_ALLOC_LockH>:
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <GUI_ALLOC_LockH+0x18>)
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	3201      	adds	r2, #1
 8004cf2:	61da      	str	r2, [r3, #28]
 8004cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 8004d00:	f7ff bfea 	b.w	8004cd8 <GUI_ALLOC_h2p>
 8004d04:	2001d8d8 	.word	0x2001d8d8

08004d08 <GUI_ALLOC_UnlockH>:
 8004d08:	6803      	ldr	r3, [r0, #0]
 8004d0a:	490a      	ldr	r1, [pc, #40]	; (8004d34 <GUI_ALLOC_UnlockH+0x2c>)
 8004d0c:	b530      	push	{r4, r5, lr}
 8004d0e:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004d12:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8004d14:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d903      	bls.n	8004d24 <GUI_ALLOC_UnlockH+0x1c>
 8004d1c:	69ca      	ldr	r2, [r1, #28]
 8004d1e:	b10a      	cbz	r2, 8004d24 <GUI_ALLOC_UnlockH+0x1c>
 8004d20:	3a01      	subs	r2, #1
 8004d22:	61ca      	str	r2, [r1, #28]
 8004d24:	3b01      	subs	r3, #1
 8004d26:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6003      	str	r3, [r0, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	bd30      	pop	{r4, r5, pc}
 8004d32:	bf00      	nop
 8004d34:	2001d8d8 	.word	0x2001d8d8

08004d38 <GUI_ALLOC_AssignMemory>:
 8004d38:	4b02      	ldr	r3, [pc, #8]	; (8004d44 <GUI_ALLOC_AssignMemory+0xc>)
 8004d3a:	f021 0103 	bic.w	r1, r1, #3
 8004d3e:	6018      	str	r0, [r3, #0]
 8004d40:	6059      	str	r1, [r3, #4]
 8004d42:	4770      	bx	lr
 8004d44:	20000088 	.word	0x20000088

08004d48 <GUI_ALLOC_Free>:
 8004d48:	b510      	push	{r4, lr}
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	b160      	cbz	r0, 8004d68 <GUI_ALLOC_Free+0x20>
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <GUI_ALLOC_Free+0x24>)
 8004d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	6848      	ldr	r0, [r1, #4]
 8004d5a:	f7ff ff15 	bl	8004b88 <_AddFreeMemory>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d64:	f7ff bede 	b.w	8004b24 <_PushFreeBlock>
 8004d68:	bd10      	pop	{r4, pc}
 8004d6a:	bf00      	nop
 8004d6c:	2001d8d8 	.word	0x2001d8d8

08004d70 <_EnlargeBlocks>:
 8004d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d74:	4c22      	ldr	r4, [pc, #136]	; (8004e00 <_EnlargeBlocks+0x90>)
 8004d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d78:	b93b      	cbnz	r3, 8004d8a <_EnlargeBlocks+0x1a>
 8004d7a:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <_EnlargeBlocks+0x94>)
 8004d7c:	689d      	ldr	r5, [r3, #8]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	3508      	adds	r5, #8
 8004d82:	fbb3 f5f5 	udiv	r5, r3, r5
 8004d86:	3502      	adds	r5, #2
 8004d88:	e003      	b.n	8004d92 <_EnlargeBlocks+0x22>
 8004d8a:	6923      	ldr	r3, [r4, #16]
 8004d8c:	1d1d      	adds	r5, r3, #4
 8004d8e:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 8004d92:	00e8      	lsls	r0, r5, #3
 8004d94:	f000 f8f2 	bl	8004f7c <_Alloc>
 8004d98:	4680      	mov	r8, r0
 8004d9a:	b360      	cbz	r0, 8004df6 <_EnlargeBlocks+0x86>
 8004d9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d9e:	6922      	ldr	r2, [r4, #16]
 8004da0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8004da4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004da6:	00d2      	lsls	r2, r2, #3
 8004da8:	685e      	ldr	r6, [r3, #4]
 8004daa:	4b17      	ldr	r3, [pc, #92]	; (8004e08 <_EnlargeBlocks+0x98>)
 8004dac:	3608      	adds	r6, #8
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4630      	mov	r0, r6
 8004db2:	4798      	blx	r3
 8004db4:	6922      	ldr	r2, [r4, #16]
 8004db6:	1e69      	subs	r1, r5, #1
 8004db8:	6366      	str	r6, [r4, #52]	; 0x34
 8004dba:	4613      	mov	r3, r2
 8004dbc:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	d205      	bcs.n	8004dd0 <_EnlargeBlocks+0x60>
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 8004dca:	f840 3c04 	str.w	r3, [r0, #-4]
 8004dce:	e7f7      	b.n	8004dc0 <_EnlargeBlocks+0x50>
 8004dd0:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 8004dd4:	f04f 0800 	mov.w	r8, #0
 8004dd8:	4638      	mov	r0, r7
 8004dda:	f8c6 8004 	str.w	r8, [r6, #4]
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	6262      	str	r2, [r4, #36]	; 0x24
 8004de2:	1a9b      	subs	r3, r3, r2
 8004de4:	6125      	str	r5, [r4, #16]
 8004de6:	442b      	add	r3, r5
 8004de8:	6063      	str	r3, [r4, #4]
 8004dea:	b13f      	cbz	r7, 8004dfc <_EnlargeBlocks+0x8c>
 8004dec:	f7ff ffac 	bl	8004d48 <GUI_ALLOC_Free>
 8004df0:	4640      	mov	r0, r8
 8004df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df6:	2001      	movs	r0, #1
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e00:	2001d8d8 	.word	0x2001d8d8
 8004e04:	20000088 	.word	0x20000088
 8004e08:	20000020 	.word	0x20000020

08004e0c <_InitOnce>:
 8004e0c:	4a17      	ldr	r2, [pc, #92]	; (8004e6c <_InitOnce+0x60>)
 8004e0e:	b570      	push	{r4, r5, r6, lr}
 8004e10:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8004e14:	bb43      	cbnz	r3, 8004e68 <_InitOnce+0x5c>
 8004e16:	2301      	movs	r3, #1
 8004e18:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <_InitOnce+0x64>)
 8004e1e:	6899      	ldr	r1, [r3, #8]
 8004e20:	b911      	cbnz	r1, 8004e28 <_InitOnce+0x1c>
 8004e22:	6859      	ldr	r1, [r3, #4]
 8004e24:	0889      	lsrs	r1, r1, #2
 8004e26:	6099      	str	r1, [r3, #8]
 8004e28:	215a      	movs	r1, #90	; 0x5a
 8004e2a:	2610      	movs	r6, #16
 8004e2c:	6211      	str	r1, [r2, #32]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	eb02 00c1 	add.w	r0, r2, r1, lsl #3
 8004e34:	fa06 f501 	lsl.w	r5, r6, r1
 8004e38:	3101      	adds	r1, #1
 8004e3a:	4c0c      	ldr	r4, [pc, #48]	; (8004e6c <_InitOnce+0x60>)
 8004e3c:	6405      	str	r5, [r0, #64]	; 0x40
 8004e3e:	2910      	cmp	r1, #16
 8004e40:	d1f6      	bne.n	8004e30 <_InitOnce+0x24>
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	2501      	movs	r5, #1
 8004e46:	6858      	ldr	r0, [r3, #4]
 8004e48:	2302      	movs	r3, #2
 8004e4a:	63a1      	str	r1, [r4, #56]	; 0x38
 8004e4c:	6123      	str	r3, [r4, #16]
 8004e4e:	f1a0 0314 	sub.w	r3, r0, #20
 8004e52:	60e0      	str	r0, [r4, #12]
 8004e54:	440b      	add	r3, r1
 8004e56:	6363      	str	r3, [r4, #52]	; 0x34
 8004e58:	605d      	str	r5, [r3, #4]
 8004e5a:	6265      	str	r5, [r4, #36]	; 0x24
 8004e5c:	6065      	str	r5, [r4, #4]
 8004e5e:	f7ff fe93 	bl	8004b88 <_AddFreeMemory>
 8004e62:	f7ff ff85 	bl	8004d70 <_EnlargeBlocks>
 8004e66:	6325      	str	r5, [r4, #48]	; 0x30
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
 8004e6a:	bf00      	nop
 8004e6c:	2001d8d8 	.word	0x2001d8d8
 8004e70:	20000088 	.word	0x20000088

08004e74 <GUI_ALLOC_GetFixedBlock>:
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	4607      	mov	r7, r0
 8004e7a:	4e26      	ldr	r6, [pc, #152]	; (8004f14 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8004e7c:	f7ff ffc6 	bl	8004e0c <_InitOnce>
 8004e80:	3703      	adds	r7, #3
 8004e82:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8004e84:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8004e86:	f027 0703 	bic.w	r7, r7, #3
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	3704      	adds	r7, #4
 8004e8e:	4287      	cmp	r7, r0
 8004e90:	bf38      	it	cc
 8004e92:	4607      	movcc	r7, r0
 8004e94:	b134      	cbz	r4, 8004ea4 <GUI_ALLOC_GetFixedBlock+0x30>
 8004e96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004e9a:	429f      	cmp	r7, r3
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	d02c      	beq.n	8004efa <GUI_ALLOC_GetFixedBlock+0x86>
 8004ea0:	461c      	mov	r4, r3
 8004ea2:	e7f7      	b.n	8004e94 <GUI_ALLOC_GetFixedBlock+0x20>
 8004ea4:	68f3      	ldr	r3, [r6, #12]
 8004ea6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8004ea8:	eb02 0803 	add.w	r8, r2, r3
 8004eac:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8004eb0:	ebc5 0508 	rsb	r5, r5, r8
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	b133      	cbz	r3, 8004ec6 <GUI_ALLOC_GetFixedBlock+0x52>
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff feb7 	bl	8004c2c <_RemoveHoles>
 8004ebe:	f858 5c04 	ldr.w	r5, [r8, #-4]
 8004ec2:	ebc5 0508 	rsb	r5, r5, r8
 8004ec6:	682b      	ldr	r3, [r5, #0]
 8004ec8:	bb0b      	cbnz	r3, 8004f0e <GUI_ALLOC_GetFixedBlock+0x9a>
 8004eca:	686b      	ldr	r3, [r5, #4]
 8004ecc:	429f      	cmp	r7, r3
 8004ece:	dc1e      	bgt.n	8004f0e <GUI_ALLOC_GetFixedBlock+0x9a>
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	1d1c      	adds	r4, r3, #4
 8004ed4:	f7ff fe38 	bl	8004b48 <_RemoveFreeBlock>
 8004ed8:	68f3      	ldr	r3, [r6, #12]
 8004eda:	6868      	ldr	r0, [r5, #4]
 8004edc:	1be4      	subs	r4, r4, r7
 8004ede:	1bdb      	subs	r3, r3, r7
 8004ee0:	1bc0      	subs	r0, r0, r7
 8004ee2:	442c      	add	r4, r5
 8004ee4:	60f3      	str	r3, [r6, #12]
 8004ee6:	6973      	ldr	r3, [r6, #20]
 8004ee8:	443b      	add	r3, r7
 8004eea:	6173      	str	r3, [r6, #20]
 8004eec:	d002      	beq.n	8004ef4 <GUI_ALLOC_GetFixedBlock+0x80>
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f7ff fe4a 	bl	8004b88 <_AddFreeMemory>
 8004ef4:	f844 7c04 	str.w	r7, [r4, #-4]
 8004ef8:	e009      	b.n	8004f0e <GUI_ALLOC_GetFixedBlock+0x9a>
 8004efa:	b10b      	cbz	r3, 8004f00 <GUI_ALLOC_GetFixedBlock+0x8c>
 8004efc:	6861      	ldr	r1, [r4, #4]
 8004efe:	6059      	str	r1, [r3, #4]
 8004f00:	6861      	ldr	r1, [r4, #4]
 8004f02:	b101      	cbz	r1, 8004f06 <GUI_ALLOC_GetFixedBlock+0x92>
 8004f04:	600b      	str	r3, [r1, #0]
 8004f06:	42a2      	cmp	r2, r4
 8004f08:	d101      	bne.n	8004f0e <GUI_ALLOC_GetFixedBlock+0x9a>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	63f3      	str	r3, [r6, #60]	; 0x3c
 8004f0e:	4620      	mov	r0, r4
 8004f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f14:	2001d8d8 	.word	0x2001d8d8

08004f18 <GUI_ALLOC_GetMaxSize>:
 8004f18:	b508      	push	{r3, lr}
 8004f1a:	f7ff ff77 	bl	8004e0c <_InitOnce>
 8004f1e:	2300      	movs	r3, #0
 8004f20:	4a0b      	ldr	r2, [pc, #44]	; (8004f50 <GUI_ALLOC_GetMaxSize+0x38>)
 8004f22:	1899      	adds	r1, r3, r2
 8004f24:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8004f28:	b110      	cbz	r0, 8004f30 <GUI_ALLOC_GetMaxSize+0x18>
 8004f2a:	6883      	ldr	r3, [r0, #8]
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e00b      	b.n	8004f48 <GUI_ALLOC_GetMaxSize+0x30>
 8004f30:	3b08      	subs	r3, #8
 8004f32:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004f36:	d1f4      	bne.n	8004f22 <GUI_ALLOC_GetMaxSize+0xa>
 8004f38:	e008      	b.n	8004f4c <GUI_ALLOC_GetMaxSize+0x34>
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4290      	cmp	r0, r2
 8004f40:	bf38      	it	cc
 8004f42:	4610      	movcc	r0, r2
 8004f44:	b113      	cbz	r3, 8004f4c <GUI_ALLOC_GetMaxSize+0x34>
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f6      	bne.n	8004f3a <GUI_ALLOC_GetMaxSize+0x22>
 8004f4c:	380c      	subs	r0, #12
 8004f4e:	bd08      	pop	{r3, pc}
 8004f50:	2001d8d8 	.word	0x2001d8d8

08004f54 <GUI_ALLOC_RequestSize>:
 8004f54:	b508      	push	{r3, lr}
 8004f56:	f7ff ffdf 	bl	8004f18 <GUI_ALLOC_GetMaxSize>
 8004f5a:	2264      	movs	r2, #100	; 0x64
 8004f5c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <GUI_ALLOC_RequestSize+0x24>)
 8004f62:	bf85      	ittet	hi
 8004f64:	fb90 f0f2 	sdivhi	r0, r0, r2
 8004f68:	6a1b      	ldrhi	r3, [r3, #32]
 8004f6a:	6a1b      	ldrls	r3, [r3, #32]
 8004f6c:	4358      	mulhi	r0, r3
 8004f6e:	bf9c      	itt	ls
 8004f70:	4358      	mulls	r0, r3
 8004f72:	fbb0 f0f2 	udivls	r0, r0, r2
 8004f76:	bd08      	pop	{r3, pc}
 8004f78:	2001d8d8 	.word	0x2001d8d8

08004f7c <_Alloc>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	4e39      	ldr	r6, [pc, #228]	; (8005068 <_Alloc+0xec>)
 8004f82:	4604      	mov	r4, r0
 8004f84:	f7ff ff42 	bl	8004e0c <_InitOnce>
 8004f88:	6c35      	ldr	r5, [r6, #64]	; 0x40
 8004f8a:	6833      	ldr	r3, [r6, #0]
 8004f8c:	42ac      	cmp	r4, r5
 8004f8e:	bf24      	itt	cs
 8004f90:	3403      	addcs	r4, #3
 8004f92:	f024 0503 	biccs.w	r5, r4, #3
 8004f96:	4c34      	ldr	r4, [pc, #208]	; (8005068 <_Alloc+0xec>)
 8004f98:	350c      	adds	r5, #12
 8004f9a:	42ab      	cmp	r3, r5
 8004f9c:	d33e      	bcc.n	800501c <_Alloc+0xa0>
 8004f9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fa0:	6862      	ldr	r2, [r4, #4]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d90f      	bls.n	8004fc6 <_Alloc+0x4a>
 8004fa6:	6873      	ldr	r3, [r6, #4]
 8004fa8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8004faa:	3b01      	subs	r3, #1
 8004fac:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8004fb0:	6073      	str	r3, [r6, #4]
 8004fb2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004fb4:	eb03 0208 	add.w	r2, r3, r8
 8004fb8:	6852      	ldr	r2, [r2, #4]
 8004fba:	6272      	str	r2, [r6, #36]	; 0x24
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8004fc2:	b957      	cbnz	r7, 8004fda <_Alloc+0x5e>
 8004fc4:	e02a      	b.n	800501c <_Alloc+0xa0>
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	6323      	str	r3, [r4, #48]	; 0x30
 8004fca:	f7ff fed1 	bl	8004d70 <_EnlargeBlocks>
 8004fce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d0e6      	beq.n	8004fa6 <_Alloc+0x2a>
 8004fd8:	e020      	b.n	800501c <_Alloc+0xa0>
 8004fda:	230f      	movs	r3, #15
 8004fdc:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8004fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe2:	4295      	cmp	r5, r2
 8004fe4:	d20c      	bcs.n	8005000 <_Alloc+0x84>
 8004fe6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8004fea:	d2f7      	bcs.n	8004fdc <_Alloc+0x60>
 8004fec:	e008      	b.n	8005000 <_Alloc+0x84>
 8004fee:	6894      	ldr	r4, [r2, #8]
 8004ff0:	b12c      	cbz	r4, 8004ffe <_Alloc+0x82>
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	4295      	cmp	r5, r2
 8004ff6:	d914      	bls.n	8005022 <_Alloc+0xa6>
 8004ff8:	68a2      	ldr	r2, [r4, #8]
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	d1f7      	bne.n	8004fee <_Alloc+0x72>
 8004ffe:	3301      	adds	r3, #1
 8005000:	2b0f      	cmp	r3, #15
 8005002:	d803      	bhi.n	800500c <_Alloc+0x90>
 8005004:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8005008:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800500a:	e7f6      	b.n	8004ffa <_Alloc+0x7e>
 800500c:	4628      	mov	r0, r5
 800500e:	f7ff fe0d 	bl	8004c2c <_RemoveHoles>
 8005012:	2800      	cmp	r0, #0
 8005014:	d0e1      	beq.n	8004fda <_Alloc+0x5e>
 8005016:	4638      	mov	r0, r7
 8005018:	f7ff fd84 	bl	8004b24 <_PushFreeBlock>
 800501c:	2000      	movs	r0, #0
 800501e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005022:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8005026:	4620      	mov	r0, r4
 8005028:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800502a:	ebc5 0209 	rsb	r2, r5, r9
 800502e:	330c      	adds	r3, #12
 8005030:	429a      	cmp	r2, r3
 8005032:	bf38      	it	cc
 8005034:	464d      	movcc	r5, r9
 8005036:	f7ff fd87 	bl	8004b48 <_RemoveFreeBlock>
 800503a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800503c:	1961      	adds	r1, r4, r5
 800503e:	454d      	cmp	r5, r9
 8005040:	4498      	add	r8, r3
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f8c8 4004 	str.w	r4, [r8, #4]
 800504a:	6027      	str	r7, [r4, #0]
 800504c:	6065      	str	r5, [r4, #4]
 800504e:	60a3      	str	r3, [r4, #8]
 8005050:	6124      	str	r4, [r4, #16]
 8005052:	f841 5c04 	str.w	r5, [r1, #-4]
 8005056:	da03      	bge.n	8005060 <_Alloc+0xe4>
 8005058:	ebc5 0009 	rsb	r0, r5, r9
 800505c:	f7ff fd94 	bl	8004b88 <_AddFreeMemory>
 8005060:	4638      	mov	r0, r7
 8005062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005066:	bf00      	nop
 8005068:	2001d8d8 	.word	0x2001d8d8

0800506c <GUI_ALLOC_AllocNoInit>:
 800506c:	b108      	cbz	r0, 8005072 <GUI_ALLOC_AllocNoInit+0x6>
 800506e:	f7ff bf85 	b.w	8004f7c <_Alloc>
 8005072:	4770      	bx	lr

08005074 <GUI_ALLOC_AllocZero>:
 8005074:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005076:	4606      	mov	r6, r0
 8005078:	f7ff fff8 	bl	800506c <GUI_ALLOC_AllocNoInit>
 800507c:	4605      	mov	r5, r0
 800507e:	b160      	cbz	r0, 800509a <GUI_ALLOC_AllocZero+0x26>
 8005080:	f7ff fe34 	bl	8004cec <GUI_ALLOC_LockH>
 8005084:	ac02      	add	r4, sp, #8
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <GUI_ALLOC_AllocZero+0x2c>)
 8005088:	4632      	mov	r2, r6
 800508a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800508e:	2100      	movs	r1, #0
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4798      	blx	r3
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff fe37 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800509a:	4628      	mov	r0, r5
 800509c:	b002      	add	sp, #8
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	20000024 	.word	0x20000024

080050a4 <GUI_CalcColorDist>:
 80050a4:	b2c3      	uxtb	r3, r0
 80050a6:	b2ca      	uxtb	r2, r1
 80050a8:	1a9a      	subs	r2, r3, r2
 80050aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80050ae:	b292      	uxth	r2, r2
 80050b0:	b510      	push	{r4, lr}
 80050b2:	b214      	sxth	r4, r2
 80050b4:	2c00      	cmp	r4, #0
 80050b6:	bfbc      	itt	lt
 80050b8:	4252      	neglt	r2, r2
 80050ba:	b214      	sxthlt	r4, r2
 80050bc:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80050c0:	0c09      	lsrs	r1, r1, #16
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	b289      	uxth	r1, r1
 80050cc:	b21a      	sxth	r2, r3
 80050ce:	b208      	sxth	r0, r1
 80050d0:	2a00      	cmp	r2, #0
 80050d2:	bfbc      	itt	lt
 80050d4:	425b      	neglt	r3, r3
 80050d6:	b21a      	sxthlt	r2, r3
 80050d8:	2800      	cmp	r0, #0
 80050da:	bfb8      	it	lt
 80050dc:	4249      	neglt	r1, r1
 80050de:	fb02 f202 	mul.w	r2, r2, r2
 80050e2:	bfb8      	it	lt
 80050e4:	b208      	sxthlt	r0, r1
 80050e6:	fb04 2204 	mla	r2, r4, r4, r2
 80050ea:	b280      	uxth	r0, r0
 80050ec:	fb00 2000 	mla	r0, r0, r0, r2
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <GUI_GetBkColor>:
 80050f2:	b508      	push	{r3, lr}
 80050f4:	f001 f940 	bl	8006378 <LCD_GetBkColorIndex>
 80050f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050fc:	f001 b842 	b.w	8006184 <LCD_Index2Color>

08005100 <GUI_GetColor>:
 8005100:	b508      	push	{r3, lr}
 8005102:	f001 f941 	bl	8006388 <LCD_GetColorIndex>
 8005106:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800510a:	f001 b83b 	b.w	8006184 <LCD_Index2Color>
	...

08005110 <GUI_GetOrg>:
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <GUI_GetOrg+0x14>)
 8005112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005116:	6003      	str	r3, [r0, #0]
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <GUI_GetOrg+0x18>)
 800511a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800511e:	600b      	str	r3, [r1, #0]
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	2001d9c0 	.word	0x2001d9c0
 8005128:	2001d9b0 	.word	0x2001d9b0

0800512c <GUI_GetVersionString>:
 800512c:	4804      	ldr	r0, [pc, #16]	; (8005140 <GUI_GetVersionString+0x14>)
 800512e:	2335      	movs	r3, #53	; 0x35
 8005130:	7003      	strb	r3, [r0, #0]
 8005132:	2334      	movs	r3, #52	; 0x34
 8005134:	7083      	strb	r3, [r0, #2]
 8005136:	70c3      	strb	r3, [r0, #3]
 8005138:	2361      	movs	r3, #97	; 0x61
 800513a:	7103      	strb	r3, [r0, #4]
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000000 	.word	0x20000000

08005144 <GUI_MergeRect>:
 8005144:	b510      	push	{r4, lr}
 8005146:	b338      	cbz	r0, 8005198 <GUI_MergeRect+0x54>
 8005148:	b309      	cbz	r1, 800518e <GUI_MergeRect+0x4a>
 800514a:	b30a      	cbz	r2, 8005190 <GUI_MergeRect+0x4c>
 800514c:	f9b2 4000 	ldrsh.w	r4, [r2]
 8005150:	f9b1 3000 	ldrsh.w	r3, [r1]
 8005154:	42a3      	cmp	r3, r4
 8005156:	bfa8      	it	ge
 8005158:	4623      	movge	r3, r4
 800515a:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 800515e:	8003      	strh	r3, [r0, #0]
 8005160:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005164:	42a3      	cmp	r3, r4
 8005166:	bfa8      	it	ge
 8005168:	4623      	movge	r3, r4
 800516a:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800516e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8005172:	8043      	strh	r3, [r0, #2]
 8005174:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005178:	42a3      	cmp	r3, r4
 800517a:	bfb8      	it	lt
 800517c:	4623      	movlt	r3, r4
 800517e:	8083      	strh	r3, [r0, #4]
 8005180:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005184:	4293      	cmp	r3, r2
 8005186:	bfb8      	it	lt
 8005188:	4613      	movlt	r3, r2
 800518a:	80c3      	strh	r3, [r0, #6]
 800518c:	bd10      	pop	{r4, pc}
 800518e:	4611      	mov	r1, r2
 8005190:	680b      	ldr	r3, [r1, #0]
 8005192:	6003      	str	r3, [r0, #0]
 8005194:	684b      	ldr	r3, [r1, #4]
 8005196:	6043      	str	r3, [r0, #4]
 8005198:	bd10      	pop	{r4, pc}

0800519a <GUI_MoveRect>:
 800519a:	b168      	cbz	r0, 80051b8 <GUI_MoveRect+0x1e>
 800519c:	b289      	uxth	r1, r1
 800519e:	8803      	ldrh	r3, [r0, #0]
 80051a0:	b292      	uxth	r2, r2
 80051a2:	440b      	add	r3, r1
 80051a4:	8003      	strh	r3, [r0, #0]
 80051a6:	8883      	ldrh	r3, [r0, #4]
 80051a8:	4419      	add	r1, r3
 80051aa:	8843      	ldrh	r3, [r0, #2]
 80051ac:	4413      	add	r3, r2
 80051ae:	8081      	strh	r1, [r0, #4]
 80051b0:	8043      	strh	r3, [r0, #2]
 80051b2:	88c3      	ldrh	r3, [r0, #6]
 80051b4:	441a      	add	r2, r3
 80051b6:	80c2      	strh	r2, [r0, #6]
 80051b8:	4770      	bx	lr
	...

080051bc <GUI_Exec1>:
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <GUI_Exec1+0x34>)
 80051be:	b510      	push	{r4, lr}
 80051c0:	681c      	ldr	r4, [r3, #0]
 80051c2:	b11c      	cbz	r4, 80051cc <GUI_Exec1+0x10>
 80051c4:	47a0      	blx	r4
 80051c6:	1c04      	adds	r4, r0, #0
 80051c8:	bf18      	it	ne
 80051ca:	2401      	movne	r4, #1
 80051cc:	f004 fcae 	bl	8009b2c <WM_Exec>
 80051d0:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <GUI_Exec1+0x38>)
 80051d2:	2800      	cmp	r0, #0
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	bf18      	it	ne
 80051d8:	2401      	movne	r4, #1
 80051da:	b11b      	cbz	r3, 80051e4 <GUI_Exec1+0x28>
 80051dc:	4798      	blx	r3
 80051de:	2800      	cmp	r0, #0
 80051e0:	bf18      	it	ne
 80051e2:	2401      	movne	r4, #1
 80051e4:	4b04      	ldr	r3, [pc, #16]	; (80051f8 <GUI_Exec1+0x3c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	b103      	cbz	r3, 80051ec <GUI_Exec1+0x30>
 80051ea:	4798      	blx	r3
 80051ec:	4620      	mov	r0, r4
 80051ee:	bd10      	pop	{r4, pc}
 80051f0:	2001d9bc 	.word	0x2001d9bc
 80051f4:	2001d9e4 	.word	0x2001d9e4
 80051f8:	2001d9dc 	.word	0x2001d9dc

080051fc <GUI_Exec>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	2400      	movs	r4, #0
 8005200:	f7ff ffdc 	bl	80051bc <GUI_Exec1>
 8005204:	b108      	cbz	r0, 800520a <GUI_Exec+0xe>
 8005206:	2401      	movs	r4, #1
 8005208:	e7fa      	b.n	8005200 <GUI_Exec+0x4>
 800520a:	4620      	mov	r0, r4
 800520c:	bd10      	pop	{r4, pc}
	...

08005210 <GUI_GotoXY>:
 8005210:	4b02      	ldr	r3, [pc, #8]	; (800521c <GUI_GotoXY+0xc>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	8458      	strh	r0, [r3, #34]	; 0x22
 8005216:	2000      	movs	r0, #0
 8005218:	8499      	strh	r1, [r3, #36]	; 0x24
 800521a:	4770      	bx	lr
 800521c:	20000014 	.word	0x20000014

08005220 <GUI_SetPenSize>:
 8005220:	4b02      	ldr	r3, [pc, #8]	; (800522c <GUI_SetPenSize+0xc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	7e1a      	ldrb	r2, [r3, #24]
 8005226:	7618      	strb	r0, [r3, #24]
 8005228:	4610      	mov	r0, r2
 800522a:	4770      	bx	lr
 800522c:	20000014 	.word	0x20000014

08005230 <GUI_RectsIntersect>:
 8005230:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005234:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005238:	429a      	cmp	r2, r3
 800523a:	dc14      	bgt.n	8005266 <GUI_RectsIntersect+0x36>
 800523c:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8005240:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8005244:	429a      	cmp	r2, r3
 8005246:	dc0e      	bgt.n	8005266 <GUI_RectsIntersect+0x36>
 8005248:	f9b0 2000 	ldrsh.w	r2, [r0]
 800524c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	dc08      	bgt.n	8005266 <GUI_RectsIntersect+0x36>
 8005254:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005258:	f9b1 3000 	ldrsh.w	r3, [r1]
 800525c:	4283      	cmp	r3, r0
 800525e:	bfcc      	ite	gt
 8005260:	2000      	movgt	r0, #0
 8005262:	2001      	movle	r0, #1
 8005264:	4770      	bx	lr
 8005266:	2000      	movs	r0, #0
 8005268:	4770      	bx	lr
	...

0800526c <GUI_SaveContext_W>:
 800526c:	b508      	push	{r3, lr}
 800526e:	4b03      	ldr	r3, [pc, #12]	; (800527c <GUI_SaveContext_W+0x10>)
 8005270:	2274      	movs	r2, #116	; 0x74
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	f007 fca0 	bl	800cbb8 <memcpy>
 8005278:	bd08      	pop	{r3, pc}
 800527a:	bf00      	nop
 800527c:	20000014 	.word	0x20000014

08005280 <GUI_RestoreContext>:
 8005280:	b508      	push	{r3, lr}
 8005282:	4b03      	ldr	r3, [pc, #12]	; (8005290 <GUI_RestoreContext+0x10>)
 8005284:	4601      	mov	r1, r0
 8005286:	2274      	movs	r2, #116	; 0x74
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f007 fc95 	bl	800cbb8 <memcpy>
 800528e:	bd08      	pop	{r3, pc}
 8005290:	20000014 	.word	0x20000014

08005294 <GUI_SelectLCD>:
 8005294:	b508      	push	{r3, lr}
 8005296:	f001 f983 	bl	80065a0 <LCD_SelectLCD>
 800529a:	f001 f9e9 	bl	8006670 <LCD_UpdateColorIndices>
 800529e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052a2:	f004 bc7f 	b.w	8009ba4 <WM_Activate>

080052a6 <GUI_SetBkColor>:
 80052a6:	f000 bfb3 	b.w	8006210 <LCD_SetBkColor>

080052aa <GUI_SetColor>:
 80052aa:	f000 bfb7 	b.w	800621c <LCD_SetColor>

080052ae <GUI_SetDrawMode>:
 80052ae:	f000 bc73 	b.w	8005b98 <LCD_SetDrawMode>
	...

080052b4 <GUI_SetFont>:
 80052b4:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <GUI_SetFont+0x10>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	b100      	cbz	r0, 80052be <GUI_SetFont+0xa>
 80052bc:	61d8      	str	r0, [r3, #28]
 80052be:	4610      	mov	r0, r2
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000014 	.word	0x20000014

080052c8 <GUI_SetLineStyle>:
 80052c8:	4b02      	ldr	r3, [pc, #8]	; (80052d4 <GUI_SetLineStyle+0xc>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	7e9a      	ldrb	r2, [r3, #26]
 80052ce:	7698      	strb	r0, [r3, #26]
 80052d0:	4610      	mov	r0, r2
 80052d2:	4770      	bx	lr
 80052d4:	20000014 	.word	0x20000014

080052d8 <GUI_SetOrg>:
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <GUI_SetOrg+0x28>)
 80052da:	460a      	mov	r2, r1
 80052dc:	b410      	push	{r4}
 80052de:	8018      	strh	r0, [r3, #0]
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <GUI_SetOrg+0x2c>)
 80052e2:	8019      	strh	r1, [r3, #0]
 80052e4:	4b08      	ldr	r3, [pc, #32]	; (8005308 <GUI_SetOrg+0x30>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	7c59      	ldrb	r1, [r3, #17]
 80052ea:	4b08      	ldr	r3, [pc, #32]	; (800530c <GUI_SetOrg+0x34>)
 80052ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052f0:	68d9      	ldr	r1, [r3, #12]
 80052f2:	6a0c      	ldr	r4, [r1, #32]
 80052f4:	4601      	mov	r1, r0
 80052f6:	4618      	mov	r0, r3
 80052f8:	4623      	mov	r3, r4
 80052fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052fe:	4718      	bx	r3
 8005300:	2001d9c0 	.word	0x2001d9c0
 8005304:	2001d9b0 	.word	0x2001d9b0
 8005308:	20000014 	.word	0x20000014
 800530c:	2001d9e8 	.word	0x2001d9e8

08005310 <GUI_SetTextAlign>:
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <GUI_SetTextAlign+0x10>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8005318:	8598      	strh	r0, [r3, #44]	; 0x2c
 800531a:	4610      	mov	r0, r2
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000014 	.word	0x20000014

08005324 <GUI_SetTextMode>:
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <GUI_SetTextMode+0x10>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800532c:	8558      	strh	r0, [r3, #42]	; 0x2a
 800532e:	4610      	mov	r0, r2
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000014 	.word	0x20000014

08005338 <GL_SetDefault>:
 8005338:	b508      	push	{r3, lr}
 800533a:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <GL_SetDefault+0x3c>)
 800533c:	6818      	ldr	r0, [r3, #0]
 800533e:	f000 ff67 	bl	8006210 <LCD_SetBkColor>
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <GL_SetDefault+0x40>)
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	f000 ff69 	bl	800621c <LCD_SetColor>
 800534a:	2001      	movs	r0, #1
 800534c:	f7ff ff68 	bl	8005220 <GUI_SetPenSize>
 8005350:	2000      	movs	r0, #0
 8005352:	f7ff ffdd 	bl	8005310 <GUI_SetTextAlign>
 8005356:	2000      	movs	r0, #0
 8005358:	f7ff ffe4 	bl	8005324 <GUI_SetTextMode>
 800535c:	2000      	movs	r0, #0
 800535e:	f7ff ffa6 	bl	80052ae <GUI_SetDrawMode>
 8005362:	4b06      	ldr	r3, [pc, #24]	; (800537c <GL_SetDefault+0x44>)
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	f7ff ffa5 	bl	80052b4 <GUI_SetFont>
 800536a:	2000      	movs	r0, #0
 800536c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005370:	f7ff bfaa 	b.w	80052c8 <GUI_SetLineStyle>
 8005374:	2000009c 	.word	0x2000009c
 8005378:	20000010 	.word	0x20000010
 800537c:	2000000c 	.word	0x2000000c

08005380 <_InitContext>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4e1a      	ldr	r6, [pc, #104]	; (80053ec <_InitContext+0x6c>)
 8005384:	4604      	mov	r4, r0
 8005386:	4d1a      	ldr	r5, [pc, #104]	; (80053f0 <_InitContext+0x70>)
 8005388:	f106 0384 	add.w	r3, r6, #132	; 0x84
 800538c:	f104 0108 	add.w	r1, r4, #8
 8005390:	6703      	str	r3, [r0, #112]	; 0x70
 8005392:	68eb      	ldr	r3, [r5, #12]
 8005394:	1d1a      	adds	r2, r3, #4
 8005396:	639b      	str	r3, [r3, #56]	; 0x38
 8005398:	641b      	str	r3, [r3, #64]	; 0x40
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c
 800539c:	f103 0208 	add.w	r2, r3, #8
 80053a0:	6142      	str	r2, [r0, #20]
 80053a2:	7c5a      	ldrb	r2, [r3, #17]
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <_InitContext+0x74>)
 80053a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80053aa:	68c3      	ldr	r3, [r0, #12]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	4798      	blx	r3
 80053b0:	4b11      	ldr	r3, [pc, #68]	; (80053f8 <_InitContext+0x78>)
 80053b2:	6663      	str	r3, [r4, #100]	; 0x64
 80053b4:	686b      	ldr	r3, [r5, #4]
 80053b6:	61e3      	str	r3, [r4, #28]
 80053b8:	68eb      	ldr	r3, [r5, #12]
 80053ba:	3308      	adds	r3, #8
 80053bc:	6163      	str	r3, [r4, #20]
 80053be:	2301      	movs	r3, #1
 80053c0:	7623      	strb	r3, [r4, #24]
 80053c2:	76e3      	strb	r3, [r4, #27]
 80053c4:	f004 fcd0 	bl	8009d68 <WM_GetDesktopWindow>
 80053c8:	2303      	movs	r3, #3
 80053ca:	64a0      	str	r0, [r4, #72]	; 0x48
 80053cc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80053d0:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80053d4:	6830      	ldr	r0, [r6, #0]
 80053d6:	6323      	str	r3, [r4, #48]	; 0x30
 80053d8:	6363      	str	r3, [r4, #52]	; 0x34
 80053da:	f000 ff19 	bl	8006210 <LCD_SetBkColor>
 80053de:	68a8      	ldr	r0, [r5, #8]
 80053e0:	f000 ff1c 	bl	800621c <LCD_SetColor>
 80053e4:	4a05      	ldr	r2, [pc, #20]	; (80053fc <_InitContext+0x7c>)
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <_InitContext+0x80>)
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	2000009c 	.word	0x2000009c
 80053f0:	20000008 	.word	0x20000008
 80053f4:	2001d9e8 	.word	0x2001d9e8
 80053f8:	0800cc5c 	.word	0x0800cc5c
 80053fc:	0800cc74 	.word	0x0800cc74
 8005400:	2001d9e0 	.word	0x2001d9e0

08005404 <_OnExit>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	2400      	movs	r4, #0
 8005408:	4d0a      	ldr	r5, [pc, #40]	; (8005434 <_OnExit+0x30>)
 800540a:	4e0b      	ldr	r6, [pc, #44]	; (8005438 <_OnExit+0x34>)
 800540c:	2274      	movs	r2, #116	; 0x74
 800540e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
 8005412:	3504      	adds	r5, #4
 8005414:	6833      	ldr	r3, [r6, #0]
 8005416:	4621      	mov	r1, r4
 8005418:	4628      	mov	r0, r5
 800541a:	4798      	blx	r3
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	2208      	movs	r2, #8
 8005420:	4621      	mov	r1, r4
 8005422:	4806      	ldr	r0, [pc, #24]	; (800543c <_OnExit+0x38>)
 8005424:	4798      	blx	r3
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <_OnExit+0x3c>)
 8005428:	60dd      	str	r5, [r3, #12]
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <_OnExit+0x40>)
 800542c:	701c      	strb	r4, [r3, #0]
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <_OnExit+0x44>)
 8005430:	601c      	str	r4, [r3, #0]
 8005432:	bd70      	pop	{r4, r5, r6, pc}
 8005434:	2000009c 	.word	0x2000009c
 8005438:	20000024 	.word	0x20000024
 800543c:	2001d9e8 	.word	0x2001d9e8
 8005440:	20000008 	.word	0x20000008
 8005444:	2001d9d0 	.word	0x2001d9d0
 8005448:	2001d9ac 	.word	0x2001d9ac

0800544c <GUI_SetDefaultFont>:
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <GUI_SetDefaultFont+0x8>)
 800544e:	6058      	str	r0, [r3, #4]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20000008 	.word	0x20000008

08005458 <GUI_ClearRect>:
 8005458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800545c:	4604      	mov	r4, r0
 800545e:	2004      	movs	r0, #4
 8005460:	4616      	mov	r6, r2
 8005462:	461f      	mov	r7, r3
 8005464:	460d      	mov	r5, r1
 8005466:	f000 fb97 	bl	8005b98 <LCD_SetDrawMode>
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <GUI_ClearRect+0x60>)
 800546c:	4680      	mov	r8, r0
 800546e:	4668      	mov	r0, sp
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005476:	4414      	add	r4, r2
 8005478:	4416      	add	r6, r2
 800547a:	441d      	add	r5, r3
 800547c:	441f      	add	r7, r3
 800547e:	f8ad 4000 	strh.w	r4, [sp]
 8005482:	f8ad 6004 	strh.w	r6, [sp, #4]
 8005486:	f8ad 5002 	strh.w	r5, [sp, #2]
 800548a:	f8ad 7006 	strh.w	r7, [sp, #6]
 800548e:	f004 f9d9 	bl	8009844 <WM__InitIVRSearch>
 8005492:	b928      	cbnz	r0, 80054a0 <GUI_ClearRect+0x48>
 8005494:	4640      	mov	r0, r8
 8005496:	f000 fb7f 	bl	8005b98 <LCD_SetDrawMode>
 800549a:	b002      	add	sp, #8
 800549c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054a0:	463b      	mov	r3, r7
 80054a2:	4632      	mov	r2, r6
 80054a4:	4629      	mov	r1, r5
 80054a6:	4620      	mov	r0, r4
 80054a8:	f000 fbd4 	bl	8005c54 <LCD_FillRect>
 80054ac:	f004 f908 	bl	80096c0 <WM__GetNextIVR>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d1f5      	bne.n	80054a0 <GUI_ClearRect+0x48>
 80054b4:	e7ee      	b.n	8005494 <GUI_ClearRect+0x3c>
 80054b6:	bf00      	nop
 80054b8:	20000008 	.word	0x20000008

080054bc <GUI_Clear>:
 80054bc:	2100      	movs	r1, #0
 80054be:	b510      	push	{r4, lr}
 80054c0:	4608      	mov	r0, r1
 80054c2:	f7ff fea5 	bl	8005210 <GUI_GotoXY>
 80054c6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80054ca:	4903      	ldr	r1, [pc, #12]	; (80054d8 <GUI_Clear+0x1c>)
 80054cc:	461a      	mov	r2, r3
 80054ce:	4608      	mov	r0, r1
 80054d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d4:	f7ff bfc0 	b.w	8005458 <GUI_ClearRect>
 80054d8:	ffffc001 	.word	0xffffc001

080054dc <GUI__Config>:
 80054dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054de:	4d20      	ldr	r5, [pc, #128]	; (8005560 <GUI__Config+0x84>)
 80054e0:	b085      	sub	sp, #20
 80054e2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d137      	bne.n	800555a <GUI__Config+0x7e>
 80054ea:	2301      	movs	r3, #1
 80054ec:	466a      	mov	r2, sp
 80054ee:	466e      	mov	r6, sp
 80054f0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
 80054f4:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <GUI__Config+0x88>)
 80054f6:	f103 0708 	add.w	r7, r3, #8
 80054fa:	6818      	ldr	r0, [r3, #0]
 80054fc:	3308      	adds	r3, #8
 80054fe:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8005502:	4614      	mov	r4, r2
 8005504:	42bb      	cmp	r3, r7
 8005506:	c403      	stmia	r4!, {r0, r1}
 8005508:	4622      	mov	r2, r4
 800550a:	d1f6      	bne.n	80054fa <GUI__Config+0x1e>
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	8899      	ldrh	r1, [r3, #4]
 8005510:	799b      	ldrb	r3, [r3, #6]
 8005512:	6020      	str	r0, [r4, #0]
 8005514:	71a3      	strb	r3, [r4, #6]
 8005516:	4633      	mov	r3, r6
 8005518:	80a1      	strh	r1, [r4, #4]
 800551a:	4c13      	ldr	r4, [pc, #76]	; (8005568 <GUI__Config+0x8c>)
 800551c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005520:	f804 2b01 	strb.w	r2, [r4], #1
 8005524:	781a      	ldrb	r2, [r3, #0]
 8005526:	2a00      	cmp	r2, #0
 8005528:	d1f8      	bne.n	800551c <GUI__Config+0x40>
 800552a:	f7ff fdff 	bl	800512c <GUI_GetVersionString>
 800552e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005532:	4622      	mov	r2, r4
 8005534:	f804 3b01 	strb.w	r3, [r4], #1
 8005538:	7803      	ldrb	r3, [r0, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f7      	bne.n	800552e <GUI__Config+0x52>
 800553e:	7053      	strb	r3, [r2, #1]
 8005540:	f7ff f80e 	bl	8004560 <GUI_X_Config>
 8005544:	f7ff f8a0 	bl	8004688 <LCD_X_Config>
 8005548:	4b08      	ldr	r3, [pc, #32]	; (800556c <GUI__Config+0x90>)
 800554a:	4809      	ldr	r0, [pc, #36]	; (8005570 <GUI__Config+0x94>)
 800554c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
 8005550:	b005      	add	sp, #20
 8005552:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005556:	f000 b8d1 	b.w	80056fc <GUI__RegisterExit>
 800555a:	b005      	add	sp, #20
 800555c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800555e:	bf00      	nop
 8005560:	2000009c 	.word	0x2000009c
 8005564:	0800cc64 	.word	0x0800cc64
 8005568:	20000120 	.word	0x20000120
 800556c:	08005405 	.word	0x08005405
 8005570:	20000134 	.word	0x20000134

08005574 <GUI_Init>:
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4a53      	ldr	r2, [pc, #332]	; (80056c8 <GUI_Init+0x154>)
 800557c:	4b52      	ldr	r3, [pc, #328]	; (80056c8 <GUI_Init+0x154>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	4b51      	ldr	r3, [pc, #324]	; (80056cc <GUI_Init+0x158>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800558e:	f240 4249 	movw	r2, #1097	; 0x449
 8005592:	4293      	cmp	r3, r2
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2da      	uxtb	r2, r3
 800559c:	4b4b      	ldr	r3, [pc, #300]	; (80056cc <GUI_Init+0x158>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055a4:	f240 4151 	movw	r1, #1105	; 0x451
 80055a8:	428b      	cmp	r3, r1
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	4619      	mov	r1, r3
 80055b8:	4b44      	ldr	r3, [pc, #272]	; (80056cc <GUI_Init+0x158>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055c0:	f240 4252 	movw	r2, #1106	; 0x452
 80055c4:	4293      	cmp	r3, r2
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	430b      	orrs	r3, r1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <GUI_Init+0x82>
 80055d4:	4b3e      	ldr	r3, [pc, #248]	; (80056d0 <GUI_Init+0x15c>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	bf00      	nop
 80055dc:	4b3c      	ldr	r3, [pc, #240]	; (80056d0 <GUI_Init+0x15c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1fb      	bne.n	80055dc <GUI_Init+0x68>
 80055e4:	4b3b      	ldr	r3, [pc, #236]	; (80056d4 <GUI_Init+0x160>)
 80055e6:	4a3c      	ldr	r2, [pc, #240]	; (80056d8 <GUI_Init+0x164>)
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	4b3a      	ldr	r3, [pc, #232]	; (80056d4 <GUI_Init+0x160>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a3b      	ldr	r2, [pc, #236]	; (80056dc <GUI_Init+0x168>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <GUI_Init+0xb2>
 80055f4:	e7fe      	b.n	80055f4 <GUI_Init+0x80>
 80055f6:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <GUI_Init+0x16c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055fe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005602:	d110      	bne.n	8005626 <GUI_Init+0xb2>
 8005604:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <GUI_Init+0x170>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	bf00      	nop
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <GUI_Init+0x170>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1fb      	bne.n	800560c <GUI_Init+0x98>
 8005614:	4b34      	ldr	r3, [pc, #208]	; (80056e8 <GUI_Init+0x174>)
 8005616:	4a30      	ldr	r2, [pc, #192]	; (80056d8 <GUI_Init+0x164>)
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	4b33      	ldr	r3, [pc, #204]	; (80056e8 <GUI_Init+0x174>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2f      	ldr	r2, [pc, #188]	; (80056dc <GUI_Init+0x168>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d000      	beq.n	8005626 <GUI_Init+0xb2>
 8005624:	e7fe      	b.n	8005624 <GUI_Init+0xb0>
 8005626:	f7ff ff59 	bl	80054dc <GUI__Config>
 800562a:	4b30      	ldr	r3, [pc, #192]	; (80056ec <GUI_Init+0x178>)
 800562c:	222e      	movs	r2, #46	; 0x2e
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	f7ff fa00 	bl	8004a34 <GUI_X_Init>
 8005634:	482e      	ldr	r0, [pc, #184]	; (80056f0 <GUI_Init+0x17c>)
 8005636:	f7ff fea3 	bl	8005380 <_InitContext>
 800563a:	f000 fd43 	bl	80060c4 <emWin_LCD_Init>
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	f000 ff3e 	bl	80064c0 <LCD_GetXSizeDisplay>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2dc      	uxtb	r4, r3
 8005650:	f000 ff3c 	bl	80064cc <LCD_GetYSizeDisplay>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4323      	orrs	r3, r4
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <GUI_Init+0x108>
 8005668:	f000 ff1a 	bl	80064a0 <LCD_GetXSizeMax>
 800566c:	4604      	mov	r4, r0
 800566e:	f000 ff1a 	bl	80064a6 <LCD_GetYSizeMax>
 8005672:	4603      	mov	r3, r0
 8005674:	4619      	mov	r1, r3
 8005676:	4620      	mov	r0, r4
 8005678:	f000 ff1c 	bl	80064b4 <LCD_SetDisplaySize>
 800567c:	2100      	movs	r1, #0
 800567e:	2000      	movs	r0, #0
 8005680:	f7ff fe2a 	bl	80052d8 <GUI_SetOrg>
 8005684:	f004 faf8 	bl	8009c78 <WM_Init>
 8005688:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <GUI_Init+0x180>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d012      	beq.n	80056b6 <GUI_Init+0x142>
 8005690:	e00d      	b.n	80056ae <GUI_Init+0x13a>
 8005692:	4b18      	ldr	r3, [pc, #96]	; (80056f4 <GUI_Init+0x180>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <GUI_Init+0x130>
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <GUI_Init+0x180>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4798      	blx	r3
 80056a4:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <GUI_Init+0x180>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	4a12      	ldr	r2, [pc, #72]	; (80056f4 <GUI_Init+0x180>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <GUI_Init+0x180>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1ed      	bne.n	8005692 <GUI_Init+0x11e>
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <GUI_Init+0x184>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}
 80056c6:	bf00      	nop
 80056c8:	e0002000 	.word	0xe0002000
 80056cc:	e0042000 	.word	0xe0042000
 80056d0:	40023008 	.word	0x40023008
 80056d4:	40023000 	.word	0x40023000
 80056d8:	f407a5c2 	.word	0xf407a5c2
 80056dc:	b5e8b5cd 	.word	0xb5e8b5cd
 80056e0:	5c001000 	.word	0x5c001000
 80056e4:	58024c08 	.word	0x58024c08
 80056e8:	58024c00 	.word	0x58024c00
 80056ec:	2001d9a0 	.word	0x2001d9a0
 80056f0:	200000a0 	.word	0x200000a0
 80056f4:	20000118 	.word	0x20000118
 80056f8:	2001d9c8 	.word	0x2001d9c8

080056fc <GUI__RegisterExit>:
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <GUI__RegisterExit+0x24>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	605a      	str	r2, [r3, #4]
 800570c:	4a04      	ldr	r2, [pc, #16]	; (8005720 <GUI__RegisterExit+0x24>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000114 	.word	0x20000114

08005724 <GUI_DEVICE__GetpDriver>:
 8005724:	2801      	cmp	r0, #1
 8005726:	dc09      	bgt.n	800573c <GUI_DEVICE__GetpDriver+0x18>
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <GUI_DEVICE__GetpDriver+0x1c>)
 800572a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800572e:	b120      	cbz	r0, 800573a <GUI_DEVICE__GetpDriver+0x16>
 8005730:	68c3      	ldr	r3, [r0, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	b11b      	cbz	r3, 800573e <GUI_DEVICE__GetpDriver+0x1a>
 8005736:	6800      	ldr	r0, [r0, #0]
 8005738:	e7f9      	b.n	800572e <GUI_DEVICE__GetpDriver+0xa>
 800573a:	4770      	bx	lr
 800573c:	2000      	movs	r0, #0
 800573e:	4770      	bx	lr
 8005740:	2001d9e8 	.word	0x2001d9e8

08005744 <GUI_DEVICE_Delete>:
 8005744:	f7ff babe 	b.w	8004cc4 <GUI_ALLOC_FreeFixedBlock>

08005748 <GUI_DEVICE_Create>:
 8005748:	2b01      	cmp	r3, #1
 800574a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574c:	4606      	mov	r6, r0
 800574e:	460d      	mov	r5, r1
 8005750:	4617      	mov	r7, r2
 8005752:	461c      	mov	r4, r3
 8005754:	dd01      	ble.n	800575a <GUI_DEVICE_Create+0x12>
 8005756:	2000      	movs	r0, #0
 8005758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800575a:	201c      	movs	r0, #28
 800575c:	f7ff fb8a 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 8005760:	2800      	cmp	r0, #0
 8005762:	d0f8      	beq.n	8005756 <GUI_DEVICE_Create+0xe>
 8005764:	b10d      	cbz	r5, 800576a <GUI_DEVICE_Create+0x22>
 8005766:	6105      	str	r5, [r0, #16]
 8005768:	e009      	b.n	800577e <GUI_DEVICE_Create+0x36>
 800576a:	4b09      	ldr	r3, [pc, #36]	; (8005790 <GUI_DEVICE_Create+0x48>)
 800576c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8005770:	b129      	cbz	r1, 800577e <GUI_DEVICE_Create+0x36>
 8005772:	680b      	ldr	r3, [r1, #0]
 8005774:	b10b      	cbz	r3, 800577a <GUI_DEVICE_Create+0x32>
 8005776:	4619      	mov	r1, r3
 8005778:	e7fb      	b.n	8005772 <GUI_DEVICE_Create+0x2a>
 800577a:	690b      	ldr	r3, [r1, #16]
 800577c:	6103      	str	r3, [r0, #16]
 800577e:	2300      	movs	r3, #0
 8005780:	6184      	str	r4, [r0, #24]
 8005782:	8287      	strh	r7, [r0, #20]
 8005784:	60c6      	str	r6, [r0, #12]
 8005786:	6003      	str	r3, [r0, #0]
 8005788:	6043      	str	r3, [r0, #4]
 800578a:	6083      	str	r3, [r0, #8]
 800578c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800578e:	bf00      	nop
 8005790:	2001d9e8 	.word	0x2001d9e8

08005794 <GUI_DEVICE_Unlink>:
 8005794:	6981      	ldr	r1, [r0, #24]
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <GUI_DEVICE_Unlink+0x2c>)
 8005798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800579c:	4298      	cmp	r0, r3
 800579e:	6803      	ldr	r3, [r0, #0]
 80057a0:	d104      	bne.n	80057ac <GUI_DEVICE_Unlink+0x18>
 80057a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80057a6:	b10b      	cbz	r3, 80057ac <GUI_DEVICE_Unlink+0x18>
 80057a8:	2200      	movs	r2, #0
 80057aa:	605a      	str	r2, [r3, #4]
 80057ac:	6842      	ldr	r2, [r0, #4]
 80057ae:	b102      	cbz	r2, 80057b2 <GUI_DEVICE_Unlink+0x1e>
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	6803      	ldr	r3, [r0, #0]
 80057b4:	b103      	cbz	r3, 80057b8 <GUI_DEVICE_Unlink+0x24>
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	2300      	movs	r3, #0
 80057ba:	6003      	str	r3, [r0, #0]
 80057bc:	6043      	str	r3, [r0, #4]
 80057be:	4770      	bx	lr
 80057c0:	2001d9e8 	.word	0x2001d9e8

080057c4 <GUI_DEVICE_Link>:
 80057c4:	b530      	push	{r4, r5, lr}
 80057c6:	b908      	cbnz	r0, 80057cc <GUI_DEVICE_Link+0x8>
 80057c8:	2001      	movs	r0, #1
 80057ca:	bd30      	pop	{r4, r5, pc}
 80057cc:	6984      	ldr	r4, [r0, #24]
 80057ce:	2c01      	cmp	r4, #1
 80057d0:	dcfa      	bgt.n	80057c8 <GUI_DEVICE_Link+0x4>
 80057d2:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <GUI_DEVICE_Link+0x7c>)
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	4294      	cmp	r4, r2
 80057d8:	bfa4      	itt	ge
 80057da:	1c62      	addge	r2, r4, #1
 80057dc:	701a      	strbge	r2, [r3, #0]
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <GUI_DEVICE_Link+0x80>)
 80057e0:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80057e4:	4615      	mov	r5, r2
 80057e6:	b91b      	cbnz	r3, 80057f0 <GUI_DEVICE_Link+0x2c>
 80057e8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80057ec:	4618      	mov	r0, r3
 80057ee:	bd30      	pop	{r4, r5, pc}
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	b10a      	cbz	r2, 80057f8 <GUI_DEVICE_Link+0x34>
 80057f4:	4613      	mov	r3, r2
 80057f6:	e7fb      	b.n	80057f0 <GUI_DEVICE_Link+0x2c>
 80057f8:	68c2      	ldr	r2, [r0, #12]
 80057fa:	6812      	ldr	r2, [r2, #0]
 80057fc:	68d9      	ldr	r1, [r3, #12]
 80057fe:	6809      	ldr	r1, [r1, #0]
 8005800:	4291      	cmp	r1, r2
 8005802:	dd03      	ble.n	800580c <GUI_DEVICE_Link+0x48>
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f8      	bne.n	80057fc <GUI_DEVICE_Link+0x38>
 800580a:	e7dd      	b.n	80057c8 <GUI_DEVICE_Link+0x4>
 800580c:	d109      	bne.n	8005822 <GUI_DEVICE_Link+0x5e>
 800580e:	8a81      	ldrh	r1, [r0, #20]
 8005810:	2901      	cmp	r1, #1
 8005812:	d106      	bne.n	8005822 <GUI_DEVICE_Link+0x5e>
 8005814:	6819      	ldr	r1, [r3, #0]
 8005816:	b121      	cbz	r1, 8005822 <GUI_DEVICE_Link+0x5e>
 8005818:	460b      	mov	r3, r1
 800581a:	68c9      	ldr	r1, [r1, #12]
 800581c:	6809      	ldr	r1, [r1, #0]
 800581e:	428a      	cmp	r2, r1
 8005820:	ddf8      	ble.n	8005814 <GUI_DEVICE_Link+0x50>
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	b112      	cbz	r2, 800582c <GUI_DEVICE_Link+0x68>
 8005826:	6010      	str	r0, [r2, #0]
 8005828:	6042      	str	r2, [r0, #4]
 800582a:	e001      	b.n	8005830 <GUI_DEVICE_Link+0x6c>
 800582c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8005830:	6058      	str	r0, [r3, #4]
 8005832:	4298      	cmp	r0, r3
 8005834:	bf08      	it	eq
 8005836:	2300      	moveq	r3, #0
 8005838:	6003      	str	r3, [r0, #0]
 800583a:	2000      	movs	r0, #0
 800583c:	bd30      	pop	{r4, r5, pc}
 800583e:	bf00      	nop
 8005840:	2001d99a 	.word	0x2001d99a
 8005844:	2001d9e8 	.word	0x2001d9e8

08005848 <GUI_DEVICE_CreateAndLink>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	461d      	mov	r5, r3
 800584c:	f7ff ff7c 	bl	8005748 <GUI_DEVICE_Create>
 8005850:	4604      	mov	r4, r0
 8005852:	b148      	cbz	r0, 8005868 <GUI_DEVICE_CreateAndLink+0x20>
 8005854:	f7ff ffb6 	bl	80057c4 <GUI_DEVICE_Link>
 8005858:	68e3      	ldr	r3, [r4, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b923      	cbnz	r3, 8005868 <GUI_DEVICE_CreateAndLink+0x20>
 800585e:	4b03      	ldr	r3, [pc, #12]	; (800586c <GUI_DEVICE_CreateAndLink+0x24>)
 8005860:	3516      	adds	r5, #22
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
 8005868:	4620      	mov	r0, r4
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20000014 	.word	0x20000014

08005870 <GUI_DispString>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	4605      	mov	r5, r0
 8005876:	b085      	sub	sp, #20
 8005878:	2800      	cmp	r0, #0
 800587a:	d07f      	beq.n	800597c <GUI_DispString+0x10c>
 800587c:	4c41      	ldr	r4, [pc, #260]	; (8005984 <GUI_DispString+0x114>)
 800587e:	f004 fdcd 	bl	800a41c <GUI_GetFontDistY>
 8005882:	4607      	mov	r7, r0
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	46a1      	mov	r9, r4
 8005888:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 800588c:	f004 fdae 	bl	800a3ec <GUI_GetYAdjust>
 8005890:	6822      	ldr	r2, [r4, #0]
 8005892:	b286      	uxth	r6, r0
 8005894:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8005896:	1b9b      	subs	r3, r3, r6
 8005898:	8493      	strh	r3, [r2, #36]	; 0x24
 800589a:	782b      	ldrb	r3, [r5, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d061      	beq.n	8005964 <GUI_DispString+0xf4>
 80058a0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80058a4:	4628      	mov	r0, r5
 80058a6:	f004 fe21 	bl	800a4ec <GUI__GetLineNumChars>
 80058aa:	4601      	mov	r1, r0
 80058ac:	4682      	mov	sl, r0
 80058ae:	4628      	mov	r0, r5
 80058b0:	f004 fe46 	bl	800a540 <GUI__GetLineDistX>
 80058b4:	6822      	ldr	r2, [r4, #0]
 80058b6:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d004      	beq.n	80058ca <GUI_DispString+0x5a>
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d104      	bne.n	80058ce <GUI_DispString+0x5e>
 80058c4:	fb90 f3f3 	sdiv	r3, r0, r3
 80058c8:	e002      	b.n	80058d0 <GUI_DispString+0x60>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e000      	b.n	80058d0 <GUI_DispString+0x60>
 80058ce:	2300      	movs	r3, #0
 80058d0:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 80058d2:	fa1f fb80 	uxth.w	fp, r0
 80058d6:	4628      	mov	r0, r5
 80058d8:	1acb      	subs	r3, r1, r3
 80058da:	b29b      	uxth	r3, r3
 80058dc:	b219      	sxth	r1, r3
 80058de:	8451      	strh	r1, [r2, #34]	; 0x22
 80058e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80058e4:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
 80058e8:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 80058ec:	440b      	add	r3, r1
 80058ee:	4651      	mov	r1, sl
 80058f0:	f8ad 200a 	strh.w	r2, [sp, #10]
 80058f4:	3a01      	subs	r2, #1
 80058f6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80058fa:	b2bb      	uxth	r3, r7
 80058fc:	441a      	add	r2, r3
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	f8ad 200e 	strh.w	r2, [sp, #14]
 8005904:	aa02      	add	r2, sp, #8
 8005906:	f004 fe4b 	bl	800a5a0 <GUI__DispLine>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8005910:	4628      	mov	r0, r5
 8005912:	8491      	strh	r1, [r2, #36]	; 0x24
 8005914:	4651      	mov	r1, sl
 8005916:	f000 f88d 	bl	8005a34 <GUI_UC__NumChars2NumBytes>
 800591a:	5c2a      	ldrb	r2, [r5, r0]
 800591c:	eb05 0e00 	add.w	lr, r5, r0
 8005920:	9b01      	ldr	r3, [sp, #4]
 8005922:	2a0a      	cmp	r2, #10
 8005924:	d001      	beq.n	800592a <GUI_DispString+0xba>
 8005926:	2a0d      	cmp	r2, #13
 8005928:	d112      	bne.n	8005950 <GUI_DispString+0xe0>
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800592e:	f001 0103 	and.w	r1, r1, #3
 8005932:	3901      	subs	r1, #1
 8005934:	2901      	cmp	r1, #1
 8005936:	bf8a      	itet	hi
 8005938:	8c11      	ldrhhi	r1, [r2, #32]
 800593a:	f8a2 8022 	strhls.w	r8, [r2, #34]	; 0x22
 800593e:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8005940:	f89e 1000 	ldrb.w	r1, [lr]
 8005944:	290a      	cmp	r1, #10
 8005946:	d10a      	bne.n	800595e <GUI_DispString+0xee>
 8005948:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 800594a:	440b      	add	r3, r1
 800594c:	8493      	strh	r3, [r2, #36]	; 0x24
 800594e:	e006      	b.n	800595e <GUI_DispString+0xee>
 8005950:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8005954:	f8d9 3000 	ldr.w	r3, [r9]
 8005958:	4483      	add	fp, r0
 800595a:	f8a3 b022 	strh.w	fp, [r3, #34]	; 0x22
 800595e:	f89e 3000 	ldrb.w	r3, [lr]
 8005962:	b943      	cbnz	r3, 8005976 <GUI_DispString+0x106>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8005968:	4416      	add	r6, r2
 800596a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800596c:	f022 0203 	bic.w	r2, r2, #3
 8005970:	849e      	strh	r6, [r3, #36]	; 0x24
 8005972:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005974:	e002      	b.n	800597c <GUI_DispString+0x10c>
 8005976:	f10e 0501 	add.w	r5, lr, #1
 800597a:	e78e      	b.n	800589a <GUI_DispString+0x2a>
 800597c:	b005      	add	sp, #20
 800597e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005982:	bf00      	nop
 8005984:	20000014 	.word	0x20000014

08005988 <GUI_DispStringAt>:
 8005988:	4b02      	ldr	r3, [pc, #8]	; (8005994 <GUI_DispStringAt+0xc>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	8459      	strh	r1, [r3, #34]	; 0x22
 800598e:	849a      	strh	r2, [r3, #36]	; 0x24
 8005990:	f7ff bf6e 	b.w	8005870 <GUI_DispString>
 8005994:	20000014 	.word	0x20000014

08005998 <GUI_DispStringHCenterAt>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <GUI_DispStringHCenterAt+0x30>)
 800599c:	4605      	mov	r5, r0
 800599e:	460e      	mov	r6, r1
 80059a0:	4617      	mov	r7, r2
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 80059a8:	f040 0002 	orr.w	r0, r0, #2
 80059ac:	f7ff fcb0 	bl	8005310 <GUI_SetTextAlign>
 80059b0:	4604      	mov	r4, r0
 80059b2:	463a      	mov	r2, r7
 80059b4:	4628      	mov	r0, r5
 80059b6:	4631      	mov	r1, r6
 80059b8:	f7ff ffe6 	bl	8005988 <GUI_DispStringAt>
 80059bc:	4620      	mov	r0, r4
 80059be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80059c2:	f7ff bca5 	b.w	8005310 <GUI_SetTextAlign>
 80059c6:	bf00      	nop
 80059c8:	20000014 	.word	0x20000014

080059cc <GUI_StoreKey>:
 80059cc:	4b02      	ldr	r3, [pc, #8]	; (80059d8 <GUI_StoreKey+0xc>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	b902      	cbnz	r2, 80059d4 <GUI_StoreKey+0x8>
 80059d2:	6018      	str	r0, [r3, #0]
 80059d4:	f000 b84a 	b.w	8005a6c <GUI_SignalEvent>
 80059d8:	2000013c 	.word	0x2000013c

080059dc <GUI_PollKeyMsg>:
 80059dc:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <GUI_PollKeyMsg+0x28>)
 80059de:	6813      	ldr	r3, [r2, #0]
 80059e0:	6851      	ldr	r1, [r2, #4]
 80059e2:	428b      	cmp	r3, r1
 80059e4:	b510      	push	{r4, lr}
 80059e6:	d00b      	beq.n	8005a00 <GUI_PollKeyMsg+0x24>
 80059e8:	4c07      	ldr	r4, [pc, #28]	; (8005a08 <GUI_PollKeyMsg+0x2c>)
 80059ea:	42a3      	cmp	r3, r4
 80059ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059f0:	bf14      	ite	ne
 80059f2:	3308      	addne	r3, #8
 80059f4:	3b50      	subeq	r3, #80	; 0x50
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	f004 fa1e 	bl	8009e38 <WM_OnKey>
 80059fc:	2001      	movs	r0, #1
 80059fe:	bd10      	pop	{r4, pc}
 8005a00:	2000      	movs	r0, #0
 8005a02:	bd10      	pop	{r4, pc}
 8005a04:	20000018 	.word	0x20000018
 8005a08:	20000190 	.word	0x20000190

08005a0c <GUI_UC__GetCharCodeInc>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	4e08      	ldr	r6, [pc, #32]	; (8005a30 <GUI_UC__GetCharCodeInc+0x24>)
 8005a10:	4605      	mov	r5, r0
 8005a12:	6804      	ldr	r4, [r0, #0]
 8005a14:	6833      	ldr	r3, [r6, #0]
 8005a16:	4620      	mov	r0, r4
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4798      	blx	r3
 8005a1c:	6833      	ldr	r3, [r6, #0]
 8005a1e:	4607      	mov	r7, r0
 8005a20:	4620      	mov	r0, r4
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4798      	blx	r3
 8005a26:	4420      	add	r0, r4
 8005a28:	6028      	str	r0, [r5, #0]
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	2001d9e0 	.word	0x2001d9e0

08005a34 <GUI_UC__NumChars2NumBytes>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	4606      	mov	r6, r0
 8005a38:	460d      	mov	r5, r1
 8005a3a:	2400      	movs	r4, #0
 8005a3c:	4f05      	ldr	r7, [pc, #20]	; (8005a54 <GUI_UC__NumChars2NumBytes+0x20>)
 8005a3e:	b13d      	cbz	r5, 8005a50 <GUI_UC__NumChars2NumBytes+0x1c>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4630      	mov	r0, r6
 8005a44:	3d01      	subs	r5, #1
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	4798      	blx	r3
 8005a4a:	4406      	add	r6, r0
 8005a4c:	4404      	add	r4, r0
 8005a4e:	e7f6      	b.n	8005a3e <GUI_UC__NumChars2NumBytes+0xa>
 8005a50:	4620      	mov	r0, r4
 8005a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a54:	2001d9e0 	.word	0x2001d9e0

08005a58 <_GetCharCode>:
 8005a58:	7800      	ldrb	r0, [r0, #0]
 8005a5a:	4770      	bx	lr

08005a5c <_GetCharSize>:
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	4770      	bx	lr

08005a60 <_CalcSizeOfChar>:
 8005a60:	2001      	movs	r0, #1
 8005a62:	4770      	bx	lr

08005a64 <_Encode>:
 8005a64:	7001      	strb	r1, [r0, #0]
 8005a66:	2001      	movs	r0, #1
 8005a68:	4770      	bx	lr
	...

08005a6c <GUI_SignalEvent>:
 8005a6c:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <GUI_SignalEvent+0xc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	b103      	cbz	r3, 8005a74 <GUI_SignalEvent+0x8>
 8005a72:	4718      	bx	r3
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	2000019c 	.word	0x2000019c

08005a7c <GUI__IntersectRect>:
 8005a7c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8005a80:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005a8a:	bfb8      	it	lt
 8005a8c:	8003      	strhlt	r3, [r0, #0]
 8005a8e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8005a98:	bfb8      	it	lt
 8005a9a:	8043      	strhlt	r3, [r0, #2]
 8005a9c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8005aa6:	bfc8      	it	gt
 8005aa8:	8083      	strhgt	r3, [r0, #4]
 8005aaa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	bfc8      	it	gt
 8005ab2:	80c3      	strhgt	r3, [r0, #6]
 8005ab4:	4770      	bx	lr

08005ab6 <GUI__IntersectRects>:
 8005ab6:	b570      	push	{r4, r5, r6, lr}
 8005ab8:	f9b1 3000 	ldrsh.w	r3, [r1]
 8005abc:	4606      	mov	r6, r0
 8005abe:	f9b2 5000 	ldrsh.w	r5, [r2]
 8005ac2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8005ac6:	429d      	cmp	r5, r3
 8005ac8:	bfb8      	it	lt
 8005aca:	461d      	movlt	r5, r3
 8005acc:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005ad0:	8005      	strh	r5, [r0, #0]
 8005ad2:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8005ad6:	4283      	cmp	r3, r0
 8005ad8:	bfb8      	it	lt
 8005ada:	4603      	movlt	r3, r0
 8005adc:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8005ae0:	4284      	cmp	r4, r0
 8005ae2:	8073      	strh	r3, [r6, #2]
 8005ae4:	bfa8      	it	ge
 8005ae6:	4604      	movge	r4, r0
 8005ae8:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8005aec:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8005af0:	80b4      	strh	r4, [r6, #4]
 8005af2:	4282      	cmp	r2, r0
 8005af4:	bfa8      	it	ge
 8005af6:	4602      	movge	r2, r0
 8005af8:	42a5      	cmp	r5, r4
 8005afa:	80f2      	strh	r2, [r6, #6]
 8005afc:	dc04      	bgt.n	8005b08 <GUI__IntersectRects+0x52>
 8005afe:	4293      	cmp	r3, r2
 8005b00:	bfcc      	ite	gt
 8005b02:	2000      	movgt	r0, #0
 8005b04:	2001      	movle	r0, #1
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	2000      	movs	r0, #0
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}

08005b0c <GUI__memset16>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	0784      	lsls	r4, r0, #30
 8005b10:	bf42      	ittt	mi
 8005b12:	f102 32ff 	addmi.w	r2, r2, #4294967295	; 0xffffffff
 8005b16:	8001      	strhmi	r1, [r0, #0]
 8005b18:	3002      	addmi	r0, #2
 8005b1a:	0854      	lsrs	r4, r2, #1
 8005b1c:	d023      	beq.n	8005b66 <GUI__memset16+0x5a>
 8005b1e:	2c03      	cmp	r4, #3
 8005b20:	4623      	mov	r3, r4
 8005b22:	eb01 4501 	add.w	r5, r1, r1, lsl #16
 8005b26:	d802      	bhi.n	8005b2e <GUI__memset16+0x22>
 8005b28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005b2c:	e016      	b.n	8005b5c <GUI__memset16+0x50>
 8005b2e:	f100 0310 	add.w	r3, r0, #16
 8005b32:	4626      	mov	r6, r4
 8005b34:	3e04      	subs	r6, #4
 8005b36:	f843 5c10 	str.w	r5, [r3, #-16]
 8005b3a:	f843 5c0c 	str.w	r5, [r3, #-12]
 8005b3e:	3310      	adds	r3, #16
 8005b40:	2e03      	cmp	r6, #3
 8005b42:	f843 5c18 	str.w	r5, [r3, #-24]
 8005b46:	f843 5c14 	str.w	r5, [r3, #-20]
 8005b4a:	dcf3      	bgt.n	8005b34 <GUI__memset16+0x28>
 8005b4c:	3c04      	subs	r4, #4
 8005b4e:	08a3      	lsrs	r3, r4, #2
 8005b50:	1c5e      	adds	r6, r3, #1
 8005b52:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8005b56:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8005b5a:	e7e5      	b.n	8005b28 <GUI__memset16+0x1c>
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	d002      	beq.n	8005b66 <GUI__memset16+0x5a>
 8005b60:	f840 5b04 	str.w	r5, [r0], #4
 8005b64:	e7fa      	b.n	8005b5c <GUI__memset16+0x50>
 8005b66:	07d3      	lsls	r3, r2, #31
 8005b68:	bf48      	it	mi
 8005b6a:	8001      	strhmi	r1, [r0, #0]
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b70 <_SetDrawMode>:
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <_SetDrawMode+0x24>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	7c1a      	ldrb	r2, [r3, #16]
 8005b78:	ea82 0100 	eor.w	r1, r2, r0
 8005b7c:	0749      	lsls	r1, r1, #29
 8005b7e:	d505      	bpl.n	8005b8c <_SetDrawMode+0x1c>
 8005b80:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8005b82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b84:	6825      	ldr	r5, [r4, #0]
 8005b86:	680e      	ldr	r6, [r1, #0]
 8005b88:	6026      	str	r6, [r4, #0]
 8005b8a:	600d      	str	r5, [r1, #0]
 8005b8c:	7418      	strb	r0, [r3, #16]
 8005b8e:	4610      	mov	r0, r2
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
 8005b92:	bf00      	nop
 8005b94:	20000014 	.word	0x20000014

08005b98 <LCD_SetDrawMode>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <LCD_SetDrawMode+0x8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	4718      	bx	r3
 8005ba0:	20000028 	.word	0x20000028

08005ba4 <LCD_DrawPixel>:
 8005ba4:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <LCD_DrawPixel+0x58>)
 8005ba6:	460a      	mov	r2, r1
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8005bae:	4291      	cmp	r1, r2
 8005bb0:	b430      	push	{r4, r5}
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	dc20      	bgt.n	8005bf8 <LCD_DrawPixel+0x54>
 8005bb6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8005bba:	428a      	cmp	r2, r1
 8005bbc:	dc1c      	bgt.n	8005bf8 <LCD_DrawPixel+0x54>
 8005bbe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8005bc2:	4281      	cmp	r1, r0
 8005bc4:	dc18      	bgt.n	8005bf8 <LCD_DrawPixel+0x54>
 8005bc6:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8005bca:	4288      	cmp	r0, r1
 8005bcc:	dc14      	bgt.n	8005bf8 <LCD_DrawPixel+0x54>
 8005bce:	7c19      	ldrb	r1, [r3, #16]
 8005bd0:	7c58      	ldrb	r0, [r3, #17]
 8005bd2:	f011 0f01 	tst.w	r1, #1
 8005bd6:	490a      	ldr	r1, [pc, #40]	; (8005c00 <LCD_DrawPixel+0x5c>)
 8005bd8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005bdc:	d004      	beq.n	8005be8 <LCD_DrawPixel+0x44>
 8005bde:	68c3      	ldr	r3, [r0, #12]
 8005be0:	4621      	mov	r1, r4
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	bc30      	pop	{r4, r5}
 8005be6:	4718      	bx	r3
 8005be8:	68c1      	ldr	r1, [r0, #12]
 8005bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bec:	698d      	ldr	r5, [r1, #24]
 8005bee:	4621      	mov	r1, r4
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	46ac      	mov	ip, r5
 8005bf4:	bc30      	pop	{r4, r5}
 8005bf6:	4760      	bx	ip
 8005bf8:	bc30      	pop	{r4, r5}
 8005bfa:	4770      	bx	lr
 8005bfc:	20000014 	.word	0x20000014
 8005c00:	2001d9e8 	.word	0x2001d9e8

08005c04 <LCD_DrawHLine>:
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <LCD_DrawHLine+0x48>)
 8005c06:	b430      	push	{r4, r5}
 8005c08:	681c      	ldr	r4, [r3, #0]
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8005c10:	428b      	cmp	r3, r1
 8005c12:	dc19      	bgt.n	8005c48 <LCD_DrawHLine+0x44>
 8005c14:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005c18:	4299      	cmp	r1, r3
 8005c1a:	dc15      	bgt.n	8005c48 <LCD_DrawHLine+0x44>
 8005c1c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8005c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c24:	4281      	cmp	r1, r0
 8005c26:	bfb8      	it	lt
 8005c28:	4601      	movlt	r1, r0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bfa8      	it	ge
 8005c2e:	4613      	movge	r3, r2
 8005c30:	4299      	cmp	r1, r3
 8005c32:	dc09      	bgt.n	8005c48 <LCD_DrawHLine+0x44>
 8005c34:	7c60      	ldrb	r0, [r4, #17]
 8005c36:	4a06      	ldr	r2, [pc, #24]	; (8005c50 <LCD_DrawHLine+0x4c>)
 8005c38:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005c3c:	68c2      	ldr	r2, [r0, #12]
 8005c3e:	6894      	ldr	r4, [r2, #8]
 8005c40:	462a      	mov	r2, r5
 8005c42:	46a4      	mov	ip, r4
 8005c44:	bc30      	pop	{r4, r5}
 8005c46:	4760      	bx	ip
 8005c48:	bc30      	pop	{r4, r5}
 8005c4a:	4770      	bx	lr
 8005c4c:	20000014 	.word	0x20000014
 8005c50:	2001d9e8 	.word	0x2001d9e8

08005c54 <LCD_FillRect>:
 8005c54:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c56:	4c13      	ldr	r4, [pc, #76]	; (8005ca4 <LCD_FillRect+0x50>)
 8005c58:	6824      	ldr	r4, [r4, #0]
 8005c5a:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8005c5e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8005c62:	4285      	cmp	r5, r0
 8005c64:	bfb8      	it	lt
 8005c66:	4605      	movlt	r5, r0
 8005c68:	4296      	cmp	r6, r2
 8005c6a:	bfa8      	it	ge
 8005c6c:	4616      	movge	r6, r2
 8005c6e:	42ae      	cmp	r6, r5
 8005c70:	db15      	blt.n	8005c9e <LCD_FillRect+0x4a>
 8005c72:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8005c76:	428a      	cmp	r2, r1
 8005c78:	bfb8      	it	lt
 8005c7a:	460a      	movlt	r2, r1
 8005c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c80:	428b      	cmp	r3, r1
 8005c82:	bfa8      	it	ge
 8005c84:	460b      	movge	r3, r1
 8005c86:	429a      	cmp	r2, r3
 8005c88:	dc09      	bgt.n	8005c9e <LCD_FillRect+0x4a>
 8005c8a:	7c60      	ldrb	r0, [r4, #17]
 8005c8c:	4906      	ldr	r1, [pc, #24]	; (8005ca8 <LCD_FillRect+0x54>)
 8005c8e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005c92:	68c1      	ldr	r1, [r0, #12]
 8005c94:	9300      	str	r3, [sp, #0]
 8005c96:	4633      	mov	r3, r6
 8005c98:	690c      	ldr	r4, [r1, #16]
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	47a0      	blx	r4
 8005c9e:	b002      	add	sp, #8
 8005ca0:	bd70      	pop	{r4, r5, r6, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000014 	.word	0x20000014
 8005ca8:	2001d9e8 	.word	0x2001d9e8

08005cac <LCD__DrawBitmap_1bpp>:
 8005cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb0:	b08f      	sub	sp, #60	; 0x3c
 8005cb2:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 8005e80 <LCD__DrawBitmap_1bpp+0x1d4>
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4617      	mov	r7, r2
 8005cba:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8005cbc:	f8de e000 	ldr.w	lr, [lr]
 8005cc0:	9502      	str	r5, [sp, #8]
 8005cc2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005cc4:	9007      	str	r0, [sp, #28]
 8005cc6:	9508      	str	r5, [sp, #32]
 8005cc8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	9503      	str	r5, [sp, #12]
 8005cce:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005cd2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8005cd4:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8005cd8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8005cda:	f1be 0f00 	cmp.w	lr, #0
 8005cde:	d002      	beq.n	8005ce6 <LCD__DrawBitmap_1bpp+0x3a>
 8005ce0:	f8de 4000 	ldr.w	r4, [lr]
 8005ce4:	e054      	b.n	8005d90 <LCD__DrawBitmap_1bpp+0xe4>
 8005ce6:	9b02      	ldr	r3, [sp, #8]
 8005ce8:	9a08      	ldr	r2, [sp, #32]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d154      	bne.n	8005d9a <LCD__DrawBitmap_1bpp+0xee>
 8005cf0:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <LCD__DrawBitmap_1bpp+0x1cc>)
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8005cf8:	1a53      	subs	r3, r2, r1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dd0a      	ble.n	8005d14 <LCD__DrawBitmap_1bpp+0x68>
 8005cfe:	9901      	ldr	r1, [sp, #4]
 8005d00:	ebc3 0e01 	rsb	lr, r3, r1
 8005d04:	f1be 0f00 	cmp.w	lr, #0
 8005d08:	f340 80b2 	ble.w	8005e70 <LCD__DrawBitmap_1bpp+0x1c4>
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	fb01 6603 	mla	r6, r1, r3, r6
 8005d12:	e002      	b.n	8005d1a <LCD__DrawBitmap_1bpp+0x6e>
 8005d14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005d18:	460a      	mov	r2, r1
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	441c      	add	r4, r3
 8005d1e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8005d22:	3c01      	subs	r4, #1
 8005d24:	1ae4      	subs	r4, r4, r3
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	dd05      	ble.n	8005d36 <LCD__DrawBitmap_1bpp+0x8a>
 8005d2a:	ebc4 0e0e 	rsb	lr, r4, lr
 8005d2e:	f1be 0f00 	cmp.w	lr, #0
 8005d32:	f340 809d 	ble.w	8005e70 <LCD__DrawBitmap_1bpp+0x1c4>
 8005d36:	9b07      	ldr	r3, [sp, #28]
 8005d38:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8005d3c:	443b      	add	r3, r7
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	1a5b      	subs	r3, r3, r1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	bfc8      	it	gt
 8005d46:	1aff      	subgt	r7, r7, r3
 8005d48:	9b07      	ldr	r3, [sp, #28]
 8005d4a:	1b59      	subs	r1, r3, r5
 8005d4c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8005d50:	4299      	cmp	r1, r3
 8005d52:	da09      	bge.n	8005d68 <LCD__DrawBitmap_1bpp+0xbc>
 8005d54:	1a5b      	subs	r3, r3, r1
 8005d56:	441d      	add	r5, r3
 8005d58:	1aff      	subs	r7, r7, r3
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 8005d62:	f005 0507 	and.w	r5, r5, #7
 8005d66:	4419      	add	r1, r3
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	f340 8081 	ble.w	8005e70 <LCD__DrawBitmap_1bpp+0x1c4>
 8005d6e:	7c40      	ldrb	r0, [r0, #17]
 8005d70:	4b42      	ldr	r3, [pc, #264]	; (8005e7c <LCD__DrawBitmap_1bpp+0x1d0>)
 8005d72:	9c03      	ldr	r4, [sp, #12]
 8005d74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8005d78:	68c3      	ldr	r3, [r0, #12]
 8005d7a:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 8005d7e:	951c      	str	r5, [sp, #112]	; 0x70
 8005d80:	961b      	str	r6, [sp, #108]	; 0x6c
 8005d82:	941a      	str	r4, [sp, #104]	; 0x68
 8005d84:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8005d88:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8005d8c:	685c      	ldr	r4, [r3, #4]
 8005d8e:	463b      	mov	r3, r7
 8005d90:	46a4      	mov	ip, r4
 8005d92:	b00f      	add	sp, #60	; 0x3c
 8005d94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	4760      	bx	ip
 8005d9a:	f1ca 0308 	rsb	r3, sl, #8
 8005d9e:	4675      	mov	r5, lr
 8005da0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8005e78 <LCD__DrawBitmap_1bpp+0x1cc>
 8005da4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005da6:	9b02      	ldr	r3, [sp, #8]
 8005da8:	f8cd e014 	str.w	lr, [sp, #20]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	930d      	str	r3, [sp, #52]	; 0x34
 8005db0:	9b05      	ldr	r3, [sp, #20]
 8005db2:	9a01      	ldr	r2, [sp, #4]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	da5b      	bge.n	8005e70 <LCD__DrawBitmap_1bpp+0x1c4>
 8005db8:	9b08      	ldr	r3, [sp, #32]
 8005dba:	18e3      	adds	r3, r4, r3
 8005dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005dc2:	f8d9 3000 	ldr.w	r3, [r9]
 8005dc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005dc8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8005dcc:	428a      	cmp	r2, r1
 8005dce:	dc48      	bgt.n	8005e62 <LCD__DrawBitmap_1bpp+0x1b6>
 8005dd0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	dc44      	bgt.n	8005e62 <LCD__DrawBitmap_1bpp+0x1b6>
 8005dd8:	9b07      	ldr	r3, [sp, #28]
 8005dda:	f04f 0800 	mov.w	r8, #0
 8005dde:	9606      	str	r6, [sp, #24]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	f8cd 8010 	str.w	r8, [sp, #16]
 8005de6:	9b04      	ldr	r3, [sp, #16]
 8005de8:	42bb      	cmp	r3, r7
 8005dea:	da3a      	bge.n	8005e62 <LCD__DrawBitmap_1bpp+0x1b6>
 8005dec:	f1b8 0f00 	cmp.w	r8, #0
 8005df0:	d105      	bne.n	8005dfe <LCD__DrawBitmap_1bpp+0x152>
 8005df2:	9b06      	ldr	r3, [sp, #24]
 8005df4:	f04f 0808 	mov.w	r8, #8
 8005df8:	781d      	ldrb	r5, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	9306      	str	r3, [sp, #24]
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e00:	ebca 0808 	rsb	r8, sl, r8
 8005e04:	fa45 f303 	asr.w	r3, r5, r3
 8005e08:	fa05 f50a 	lsl.w	r5, r5, sl
 8005e0c:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8005e10:	b2ed      	uxtb	r5, r5
 8005e12:	d104      	bne.n	8005e1e <LCD__DrawBitmap_1bpp+0x172>
 8005e14:	f8d9 2000 	ldr.w	r2, [r9]
 8005e18:	7c12      	ldrb	r2, [r2, #16]
 8005e1a:	0792      	lsls	r2, r2, #30
 8005e1c:	d419      	bmi.n	8005e52 <LCD__DrawBitmap_1bpp+0x1a6>
 8005e1e:	f8d9 2000 	ldr.w	r2, [r9]
 8005e22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e24:	6810      	ldr	r0, [r2, #0]
 8005e26:	900c      	str	r0, [sp, #48]	; 0x30
 8005e28:	f1bb 0f00 	cmp.w	fp, #0
 8005e2c:	d002      	beq.n	8005e34 <LCD__DrawBitmap_1bpp+0x188>
 8005e2e:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 8005e32:	e000      	b.n	8005e36 <LCD__DrawBitmap_1bpp+0x18a>
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	9900      	ldr	r1, [sp, #0]
 8005e3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3e:	440a      	add	r2, r1
 8005e40:	9800      	ldr	r0, [sp, #0]
 8005e42:	4621      	mov	r1, r4
 8005e44:	f7ff ff06 	bl	8005c54 <LCD_FillRect>
 8005e48:	f8d9 3000 	ldr.w	r3, [r9]
 8005e4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	9a02      	ldr	r2, [sp, #8]
 8005e56:	3301      	adds	r3, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	9b00      	ldr	r3, [sp, #0]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	e7c1      	b.n	8005de6 <LCD__DrawBitmap_1bpp+0x13a>
 8005e62:	9b05      	ldr	r3, [sp, #20]
 8005e64:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005e66:	3301      	adds	r3, #1
 8005e68:	9305      	str	r3, [sp, #20]
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	441e      	add	r6, r3
 8005e6e:	e79f      	b.n	8005db0 <LCD__DrawBitmap_1bpp+0x104>
 8005e70:	b00f      	add	sp, #60	; 0x3c
 8005e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e76:	bf00      	nop
 8005e78:	20000014 	.word	0x20000014
 8005e7c:	2001d9e8 	.word	0x2001d9e8
 8005e80:	2001d9a4 	.word	0x2001d9a4

08005e84 <LCD_DrawBitmap>:
 8005e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	b08f      	sub	sp, #60	; 0x3c
 8005e8a:	f8df e218 	ldr.w	lr, [pc, #536]	; 80060a4 <LCD_DrawBitmap+0x220>
 8005e8e:	4605      	mov	r5, r0
 8005e90:	4690      	mov	r8, r2
 8005e92:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8005e94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005e96:	9402      	str	r4, [sp, #8]
 8005e98:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8005e9a:	f8de e000 	ldr.w	lr, [lr]
 8005e9e:	9408      	str	r4, [sp, #32]
 8005ea0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8005ea2:	9100      	str	r1, [sp, #0]
 8005ea4:	9403      	str	r4, [sp, #12]
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005eaa:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005eac:	9604      	str	r6, [sp, #16]
 8005eae:	f1be 0f00 	cmp.w	lr, #0
 8005eb2:	d002      	beq.n	8005eba <LCD_DrawBitmap+0x36>
 8005eb4:	f8de 4000 	ldr.w	r4, [lr]
 8005eb8:	e07a      	b.n	8005fb0 <LCD_DrawBitmap+0x12c>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	9a08      	ldr	r2, [sp, #32]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d17a      	bne.n	8005fba <LCD_DrawBitmap+0x136>
 8005ec4:	4b75      	ldr	r3, [pc, #468]	; (800609c <LCD_DrawBitmap+0x218>)
 8005ec6:	9901      	ldr	r1, [sp, #4]
 8005ec8:	6818      	ldr	r0, [r3, #0]
 8005eca:	9b00      	ldr	r3, [sp, #0]
 8005ecc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	dd07      	ble.n	8005ee6 <LCD_DrawBitmap+0x62>
 8005ed6:	1ac9      	subs	r1, r1, r3
 8005ed8:	2900      	cmp	r1, #0
 8005eda:	f340 80db 	ble.w	8006094 <LCD_DrawBitmap+0x210>
 8005ede:	9e03      	ldr	r6, [sp, #12]
 8005ee0:	fb06 4403 	mla	r4, r6, r3, r4
 8005ee4:	e000      	b.n	8005ee8 <LCD_DrawBitmap+0x64>
 8005ee6:	9a00      	ldr	r2, [sp, #0]
 8005ee8:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8005eec:	441e      	add	r6, r3
 8005eee:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8005ef2:	3e01      	subs	r6, #1
 8005ef4:	1af6      	subs	r6, r6, r3
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	dd03      	ble.n	8005f02 <LCD_DrawBitmap+0x7e>
 8005efa:	1b89      	subs	r1, r1, r6
 8005efc:	2900      	cmp	r1, #0
 8005efe:	f340 80c9 	ble.w	8006094 <LCD_DrawBitmap+0x210>
 8005f02:	eb05 0308 	add.w	r3, r5, r8
 8005f06:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	1b9b      	subs	r3, r3, r6
 8005f0e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bfc8      	it	gt
 8005f16:	ebc3 0808 	rsbgt	r8, r3, r8
 8005f1a:	42b5      	cmp	r5, r6
 8005f1c:	da31      	bge.n	8005f82 <LCD_DrawBitmap+0xfe>
 8005f1e:	1b73      	subs	r3, r6, r5
 8005f20:	2f08      	cmp	r7, #8
 8005f22:	ebc3 0808 	rsb	r8, r3, r8
 8005f26:	d027      	beq.n	8005f78 <LCD_DrawBitmap+0xf4>
 8005f28:	dc0d      	bgt.n	8005f46 <LCD_DrawBitmap+0xc2>
 8005f2a:	2f02      	cmp	r7, #2
 8005f2c:	d014      	beq.n	8005f58 <LCD_DrawBitmap+0xd4>
 8005f2e:	2f04      	cmp	r7, #4
 8005f30:	d01a      	beq.n	8005f68 <LCD_DrawBitmap+0xe4>
 8005f32:	2f01      	cmp	r7, #1
 8005f34:	d126      	bne.n	8005f84 <LCD_DrawBitmap+0x100>
 8005f36:	f023 0607 	bic.w	r6, r3, #7
 8005f3a:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	4435      	add	r5, r6
 8005f44:	e01e      	b.n	8005f84 <LCD_DrawBitmap+0x100>
 8005f46:	2f18      	cmp	r7, #24
 8005f48:	d018      	beq.n	8005f7c <LCD_DrawBitmap+0xf8>
 8005f4a:	2f20      	cmp	r7, #32
 8005f4c:	d016      	beq.n	8005f7c <LCD_DrawBitmap+0xf8>
 8005f4e:	2f10      	cmp	r7, #16
 8005f50:	d118      	bne.n	8005f84 <LCD_DrawBitmap+0x100>
 8005f52:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8005f56:	e013      	b.n	8005f80 <LCD_DrawBitmap+0xfc>
 8005f58:	f023 0603 	bic.w	r6, r3, #3
 8005f5c:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	4435      	add	r5, r6
 8005f66:	e00d      	b.n	8005f84 <LCD_DrawBitmap+0x100>
 8005f68:	f023 0601 	bic.w	r6, r3, #1
 8005f6c:	eb04 0463 	add.w	r4, r4, r3, asr #1
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	4435      	add	r5, r6
 8005f76:	e005      	b.n	8005f84 <LCD_DrawBitmap+0x100>
 8005f78:	441c      	add	r4, r3
 8005f7a:	e001      	b.n	8005f80 <LCD_DrawBitmap+0xfc>
 8005f7c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005f80:	4635      	mov	r5, r6
 8005f82:	2300      	movs	r3, #0
 8005f84:	f1b8 0f00 	cmp.w	r8, #0
 8005f88:	f340 8084 	ble.w	8006094 <LCD_DrawBitmap+0x210>
 8005f8c:	7c46      	ldrb	r6, [r0, #17]
 8005f8e:	4844      	ldr	r0, [pc, #272]	; (80060a0 <LCD_DrawBitmap+0x21c>)
 8005f90:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8005f94:	9e04      	ldr	r6, [sp, #16]
 8005f96:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8005f9a:	931c      	str	r3, [sp, #112]	; 0x70
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	9118      	str	r1, [sp, #96]	; 0x60
 8005fa0:	4629      	mov	r1, r5
 8005fa2:	931a      	str	r3, [sp, #104]	; 0x68
 8005fa4:	4643      	mov	r3, r8
 8005fa6:	961d      	str	r6, [sp, #116]	; 0x74
 8005fa8:	941b      	str	r4, [sp, #108]	; 0x6c
 8005faa:	9719      	str	r7, [sp, #100]	; 0x64
 8005fac:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005fb0:	46a4      	mov	ip, r4
 8005fb2:	b00f      	add	sp, #60	; 0x3c
 8005fb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb8:	4760      	bx	ip
 8005fba:	f1c7 0308 	rsb	r3, r7, #8
 8005fbe:	46f3      	mov	fp, lr
 8005fc0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800609c <LCD_DrawBitmap+0x218>
 8005fc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fc6:	9b02      	ldr	r3, [sp, #8]
 8005fc8:	f8cd e018 	str.w	lr, [sp, #24]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	930d      	str	r3, [sp, #52]	; 0x34
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	9a01      	ldr	r2, [sp, #4]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	da5d      	bge.n	8006094 <LCD_DrawBitmap+0x210>
 8005fd8:	9a00      	ldr	r2, [sp, #0]
 8005fda:	9b08      	ldr	r3, [sp, #32]
 8005fdc:	4413      	add	r3, r2
 8005fde:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fe4:	f8da 3000 	ldr.w	r3, [sl]
 8005fe8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005fea:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8005fee:	428a      	cmp	r2, r1
 8005ff0:	dc48      	bgt.n	8006084 <LCD_DrawBitmap+0x200>
 8005ff2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005ff6:	9a00      	ldr	r2, [sp, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	dc43      	bgt.n	8006084 <LCD_DrawBitmap+0x200>
 8005ffc:	f04f 0900 	mov.w	r9, #0
 8006000:	462e      	mov	r6, r5
 8006002:	9407      	str	r4, [sp, #28]
 8006004:	f8cd 9014 	str.w	r9, [sp, #20]
 8006008:	9b05      	ldr	r3, [sp, #20]
 800600a:	4543      	cmp	r3, r8
 800600c:	da3a      	bge.n	8006084 <LCD_DrawBitmap+0x200>
 800600e:	f1b9 0f00 	cmp.w	r9, #0
 8006012:	d106      	bne.n	8006022 <LCD_DrawBitmap+0x19e>
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	f04f 0908 	mov.w	r9, #8
 800601a:	f893 b000 	ldrb.w	fp, [r3]
 800601e:	3301      	adds	r3, #1
 8006020:	9307      	str	r3, [sp, #28]
 8006022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006024:	fa0b f207 	lsl.w	r2, fp, r7
 8006028:	ebc7 0909 	rsb	r9, r7, r9
 800602c:	fa4b f303 	asr.w	r3, fp, r3
 8006030:	fa5f fb82 	uxtb.w	fp, r2
 8006034:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8006038:	d104      	bne.n	8006044 <LCD_DrawBitmap+0x1c0>
 800603a:	f8da 2000 	ldr.w	r2, [sl]
 800603e:	7c12      	ldrb	r2, [r2, #16]
 8006040:	0792      	lsls	r2, r2, #30
 8006042:	d417      	bmi.n	8006074 <LCD_DrawBitmap+0x1f0>
 8006044:	f8da 2000 	ldr.w	r2, [sl]
 8006048:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800604a:	6810      	ldr	r0, [r2, #0]
 800604c:	900c      	str	r0, [sp, #48]	; 0x30
 800604e:	9804      	ldr	r0, [sp, #16]
 8006050:	b110      	cbz	r0, 8006058 <LCD_DrawBitmap+0x1d4>
 8006052:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8006056:	e000      	b.n	800605a <LCD_DrawBitmap+0x1d6>
 8006058:	b2db      	uxtb	r3, r3
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	4630      	mov	r0, r6
 800605e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006062:	4432      	add	r2, r6
 8006064:	9900      	ldr	r1, [sp, #0]
 8006066:	f7ff fdf5 	bl	8005c54 <LCD_FillRect>
 800606a:	f8da 3000 	ldr.w	r3, [sl]
 800606e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	9a02      	ldr	r2, [sp, #8]
 8006078:	3301      	adds	r3, #1
 800607a:	9305      	str	r3, [sp, #20]
 800607c:	4633      	mov	r3, r6
 800607e:	4413      	add	r3, r2
 8006080:	461e      	mov	r6, r3
 8006082:	e7c1      	b.n	8006008 <LCD_DrawBitmap+0x184>
 8006084:	9b06      	ldr	r3, [sp, #24]
 8006086:	3301      	adds	r3, #1
 8006088:	9306      	str	r3, [sp, #24]
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	441c      	add	r4, r3
 800608e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	e79d      	b.n	8005fd0 <LCD_DrawBitmap+0x14c>
 8006094:	b00f      	add	sp, #60	; 0x3c
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	bf00      	nop
 800609c:	20000014 	.word	0x20000014
 80060a0:	2001d9e8 	.word	0x2001d9e8
 80060a4:	2001d9a4 	.word	0x2001d9a4

080060a8 <LCD_SetClipRectMax>:
 80060a8:	4b04      	ldr	r3, [pc, #16]	; (80060bc <LCD_SetClipRectMax+0x14>)
 80060aa:	6819      	ldr	r1, [r3, #0]
 80060ac:	4b04      	ldr	r3, [pc, #16]	; (80060c0 <LCD_SetClipRectMax+0x18>)
 80060ae:	7c4a      	ldrb	r2, [r1, #17]
 80060b0:	3108      	adds	r1, #8
 80060b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80060b6:	68c3      	ldr	r3, [r0, #12]
 80060b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ba:	4718      	bx	r3
 80060bc:	20000014 	.word	0x20000014
 80060c0:	2001d9e8 	.word	0x2001d9e8

080060c4 <emWin_LCD_Init>:
 80060c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c6:	f7ff ffef 	bl	80060a8 <LCD_SetClipRectMax>
 80060ca:	f000 f8bb 	bl	8006244 <LCD_InitColors>
 80060ce:	4604      	mov	r4, r0
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d144      	bne.n	800615e <emWin_LCD_Init+0x9a>
 80060d4:	4605      	mov	r5, r0
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7ff fb24 	bl	8005724 <GUI_DEVICE__GetpDriver>
 80060dc:	9001      	str	r0, [sp, #4]
 80060de:	b150      	cbz	r0, 80060f6 <emWin_LCD_Init+0x32>
 80060e0:	68c3      	ldr	r3, [r0, #12]
 80060e2:	210c      	movs	r1, #12
 80060e4:	a801      	add	r0, sp, #4
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	4798      	blx	r3
 80060ea:	4603      	mov	r3, r0
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d034      	beq.n	800615a <emWin_LCD_Init+0x96>
 80060f0:	9801      	ldr	r0, [sp, #4]
 80060f2:	4798      	blx	r3
 80060f4:	4304      	orrs	r4, r0
 80060f6:	3501      	adds	r5, #1
 80060f8:	2d02      	cmp	r5, #2
 80060fa:	d1ec      	bne.n	80060d6 <emWin_LCD_Init+0x12>
 80060fc:	bb7c      	cbnz	r4, 800615e <emWin_LCD_Init+0x9a>
 80060fe:	f000 f8f7 	bl	80062f0 <LCD_InitLUT>
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <emWin_LCD_Init+0xa0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800610a:	429a      	cmp	r2, r3
 800610c:	d101      	bne.n	8006112 <emWin_LCD_Init+0x4e>
 800610e:	2000      	movs	r0, #0
 8006110:	e026      	b.n	8006160 <emWin_LCD_Init+0x9c>
 8006112:	2401      	movs	r4, #1
 8006114:	4620      	mov	r0, r4
 8006116:	f7ff fb05 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800611a:	9001      	str	r0, [sp, #4]
 800611c:	b1c8      	cbz	r0, 8006152 <emWin_LCD_Init+0x8e>
 800611e:	4620      	mov	r0, r4
 8006120:	f004 fc04 	bl	800a92c <GUI_SelectLayer>
 8006124:	2004      	movs	r0, #4
 8006126:	f7ff fd37 	bl	8005b98 <LCD_SetDrawMode>
 800612a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800612e:	2100      	movs	r1, #0
 8006130:	461a      	mov	r2, r3
 8006132:	4608      	mov	r0, r1
 8006134:	f7ff fd8e 	bl	8005c54 <LCD_FillRect>
 8006138:	2000      	movs	r0, #0
 800613a:	f7ff fd2d 	bl	8005b98 <LCD_SetDrawMode>
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	210e      	movs	r1, #14
 8006142:	a801      	add	r0, sp, #4
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	4798      	blx	r3
 800614a:	4603      	mov	r3, r0
 800614c:	b108      	cbz	r0, 8006152 <emWin_LCD_Init+0x8e>
 800614e:	9801      	ldr	r0, [sp, #4]
 8006150:	4798      	blx	r3
 8006152:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8006156:	d2dd      	bcs.n	8006114 <emWin_LCD_Init+0x50>
 8006158:	e7d9      	b.n	800610e <emWin_LCD_Init+0x4a>
 800615a:	2001      	movs	r0, #1
 800615c:	e000      	b.n	8006160 <emWin_LCD_Init+0x9c>
 800615e:	4620      	mov	r0, r4
 8006160:	b003      	add	sp, #12
 8006162:	bd30      	pop	{r4, r5, pc}
 8006164:	2000009c 	.word	0x2000009c

08006168 <LCD_Color2Index>:
 8006168:	4b04      	ldr	r3, [pc, #16]	; (800617c <LCD_Color2Index+0x14>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	7c5a      	ldrb	r2, [r3, #17]
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <LCD_Color2Index+0x18>)
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4718      	bx	r3
 800617a:	bf00      	nop
 800617c:	20000014 	.word	0x20000014
 8006180:	2001d9e8 	.word	0x2001d9e8

08006184 <LCD_Index2Color>:
 8006184:	4b04      	ldr	r3, [pc, #16]	; (8006198 <LCD_Index2Color+0x14>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	7c5a      	ldrb	r2, [r3, #17]
 800618a:	4b04      	ldr	r3, [pc, #16]	; (800619c <LCD_Index2Color+0x18>)
 800618c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	4718      	bx	r3
 8006196:	bf00      	nop
 8006198:	20000014 	.word	0x20000014
 800619c:	2001d9e8 	.word	0x2001d9e8

080061a0 <LCD_SetColorIndex>:
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <LCD_SetColorIndex+0x14>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	7c1a      	ldrb	r2, [r3, #16]
 80061a6:	0752      	lsls	r2, r2, #29
 80061a8:	bf4c      	ite	mi
 80061aa:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80061ac:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80061ae:	6018      	str	r0, [r3, #0]
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000014 	.word	0x20000014

080061b8 <_SetColor>:
 80061b8:	b508      	push	{r3, lr}
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <_SetColor+0x1c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061c0:	4281      	cmp	r1, r0
 80061c2:	d006      	beq.n	80061d2 <_SetColor+0x1a>
 80061c4:	6318      	str	r0, [r3, #48]	; 0x30
 80061c6:	f7ff ffcf 	bl	8006168 <LCD_Color2Index>
 80061ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061ce:	f7ff bfe7 	b.w	80061a0 <LCD_SetColorIndex>
 80061d2:	bd08      	pop	{r3, pc}
 80061d4:	20000014 	.word	0x20000014

080061d8 <LCD_SetBkColorIndex>:
 80061d8:	4b04      	ldr	r3, [pc, #16]	; (80061ec <LCD_SetBkColorIndex+0x14>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	7c1a      	ldrb	r2, [r3, #16]
 80061de:	0752      	lsls	r2, r2, #29
 80061e0:	bf4c      	ite	mi
 80061e2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80061e4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80061e6:	6018      	str	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000014 	.word	0x20000014

080061f0 <_SetBkColor>:
 80061f0:	b508      	push	{r3, lr}
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <_SetBkColor+0x1c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80061f8:	4281      	cmp	r1, r0
 80061fa:	d006      	beq.n	800620a <_SetBkColor+0x1a>
 80061fc:	6358      	str	r0, [r3, #52]	; 0x34
 80061fe:	f7ff ffb3 	bl	8006168 <LCD_Color2Index>
 8006202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006206:	f7ff bfe7 	b.w	80061d8 <LCD_SetBkColorIndex>
 800620a:	bd08      	pop	{r3, pc}
 800620c:	20000014 	.word	0x20000014

08006210 <LCD_SetBkColor>:
 8006210:	4b01      	ldr	r3, [pc, #4]	; (8006218 <LCD_SetBkColor+0x8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	4718      	bx	r3
 8006218:	20000028 	.word	0x20000028

0800621c <LCD_SetColor>:
 800621c:	4b01      	ldr	r3, [pc, #4]	; (8006224 <LCD_SetColor+0x8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4718      	bx	r3
 8006224:	20000028 	.word	0x20000028

08006228 <_OnExit>:
 8006228:	b510      	push	{r4, lr}
 800622a:	4c04      	ldr	r4, [pc, #16]	; (800623c <_OnExit+0x14>)
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	f7fe fd49 	bl	8004cc4 <GUI_ALLOC_FreeFixedBlock>
 8006232:	2300      	movs	r3, #0
 8006234:	4a02      	ldr	r2, [pc, #8]	; (8006240 <_OnExit+0x18>)
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	6013      	str	r3, [r2, #0]
 800623a:	bd10      	pop	{r4, pc}
 800623c:	2001d9f8 	.word	0x2001d9f8
 8006240:	200001a4 	.word	0x200001a4

08006244 <LCD_InitColors>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d0a      	ldr	r5, [pc, #40]	; (8006270 <LCD_InitColors+0x2c>)
 8006248:	682c      	ldr	r4, [r5, #0]
 800624a:	b964      	cbnz	r4, 8006266 <LCD_InitColors+0x22>
 800624c:	4b09      	ldr	r3, [pc, #36]	; (8006274 <LCD_InitColors+0x30>)
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	0080      	lsls	r0, r0, #2
 8006252:	f7fe fe0f 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 8006256:	6028      	str	r0, [r5, #0]
 8006258:	b138      	cbz	r0, 800626a <LCD_InitColors+0x26>
 800625a:	4807      	ldr	r0, [pc, #28]	; (8006278 <LCD_InitColors+0x34>)
 800625c:	4b07      	ldr	r3, [pc, #28]	; (800627c <LCD_InitColors+0x38>)
 800625e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006262:	f7ff fa4b 	bl	80056fc <GUI__RegisterExit>
 8006266:	2000      	movs	r0, #0
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	2001      	movs	r0, #1
 800626c:	bd38      	pop	{r3, r4, r5, pc}
 800626e:	bf00      	nop
 8006270:	2001d9f8 	.word	0x2001d9f8
 8006274:	2000002c 	.word	0x2000002c
 8006278:	200001a4 	.word	0x200001a4
 800627c:	08006229 	.word	0x08006229

08006280 <LCD_GetpPalConvTableUncached>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	4604      	mov	r4, r0
 8006286:	b318      	cbz	r0, 80062d0 <LCD_GetpPalConvTableUncached+0x50>
 8006288:	6887      	ldr	r7, [r0, #8]
 800628a:	b31f      	cbz	r7, 80062d4 <LCD_GetpPalConvTableUncached+0x54>
 800628c:	4d14      	ldr	r5, [pc, #80]	; (80062e0 <LCD_GetpPalConvTableUncached+0x60>)
 800628e:	6828      	ldr	r0, [r5, #0]
 8006290:	b320      	cbz	r0, 80062dc <LCD_GetpPalConvTableUncached+0x5c>
 8006292:	6822      	ldr	r2, [r4, #0]
 8006294:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8006298:	dc1f      	bgt.n	80062da <LCD_GetpPalConvTableUncached+0x5a>
 800629a:	4b12      	ldr	r3, [pc, #72]	; (80062e4 <LCD_GetpPalConvTableUncached+0x64>)
 800629c:	2600      	movs	r6, #0
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	bfa8      	it	ge
 80062a4:	461a      	movge	r2, r3
 80062a6:	4690      	mov	r8, r2
 80062a8:	4546      	cmp	r6, r8
 80062aa:	da09      	bge.n	80062c0 <LCD_GetpPalConvTableUncached+0x40>
 80062ac:	f8d5 9000 	ldr.w	r9, [r5]
 80062b0:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80062b4:	f7ff ff58 	bl	8006168 <LCD_Color2Index>
 80062b8:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 80062bc:	3601      	adds	r6, #1
 80062be:	e7f3      	b.n	80062a8 <LCD_GetpPalConvTableUncached+0x28>
 80062c0:	4b09      	ldr	r3, [pc, #36]	; (80062e8 <LCD_GetpPalConvTableUncached+0x68>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	b10b      	cbz	r3, 80062ca <LCD_GetpPalConvTableUncached+0x4a>
 80062c6:	4620      	mov	r0, r4
 80062c8:	4798      	blx	r3
 80062ca:	6828      	ldr	r0, [r5, #0]
 80062cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d4:	4638      	mov	r0, r7
 80062d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062da:	2000      	movs	r0, #0
 80062dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e0:	2001d9f8 	.word	0x2001d9f8
 80062e4:	2000002c 	.word	0x2000002c
 80062e8:	200001a4 	.word	0x200001a4

080062ec <LCD_GetpPalConvTableBM>:
 80062ec:	f7ff bfc8 	b.w	8006280 <LCD_GetpPalConvTableUncached>

080062f0 <LCD_InitLUT>:
 80062f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	4e1d      	ldr	r6, [pc, #116]	; (800636c <LCD_InitLUT+0x7c>)
 80062f6:	f000 f944 	bl	8006582 <LCD_GetNumLayers>
 80062fa:	2400      	movs	r4, #0
 80062fc:	4680      	mov	r8, r0
 80062fe:	46b1      	mov	r9, r6
 8006300:	f8df a070 	ldr.w	sl, [pc, #112]	; 8006374 <LCD_InitLUT+0x84>
 8006304:	4544      	cmp	r4, r8
 8006306:	da2d      	bge.n	8006364 <LCD_InitLUT+0x74>
 8006308:	4620      	mov	r0, r4
 800630a:	f7ff fa0b 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800630e:	b338      	cbz	r0, 8006360 <LCD_InitLUT+0x70>
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	4620      	mov	r0, r4
 8006314:	f893 b011 	ldrb.w	fp, [r3, #17]
 8006318:	745c      	strb	r4, [r3, #17]
 800631a:	f000 f869 	bl	80063f0 <LCD_GetBitsPerPixelEx>
 800631e:	2808      	cmp	r0, #8
 8006320:	dd04      	ble.n	800632c <LCD_InitLUT+0x3c>
 8006322:	f8d9 3000 	ldr.w	r3, [r9]
 8006326:	f883 b011 	strb.w	fp, [r3, #17]
 800632a:	e019      	b.n	8006360 <LCD_InitLUT+0x70>
 800632c:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <LCD_InitLUT+0x80>)
 8006334:	429a      	cmp	r2, r3
 8006336:	d0f4      	beq.n	8006322 <LCD_InitLUT+0x32>
 8006338:	4620      	mov	r0, r4
 800633a:	2500      	movs	r5, #0
 800633c:	f000 f85b 	bl	80063f6 <LCD_GetNumColorsEx>
 8006340:	4603      	mov	r3, r0
 8006342:	429d      	cmp	r5, r3
 8006344:	daed      	bge.n	8006322 <LCD_InitLUT+0x32>
 8006346:	b2ef      	uxtb	r7, r5
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	3501      	adds	r5, #1
 800634c:	4638      	mov	r0, r7
 800634e:	f7ff ff19 	bl	8006184 <LCD_Index2Color>
 8006352:	4639      	mov	r1, r7
 8006354:	4602      	mov	r2, r0
 8006356:	4620      	mov	r0, r4
 8006358:	f000 f942 	bl	80065e0 <LCD_SetLUTEntryEx>
 800635c:	9b01      	ldr	r3, [sp, #4]
 800635e:	e7f0      	b.n	8006342 <LCD_InitLUT+0x52>
 8006360:	3401      	adds	r4, #1
 8006362:	e7cf      	b.n	8006304 <LCD_InitLUT+0x14>
 8006364:	b003      	add	sp, #12
 8006366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636a:	bf00      	nop
 800636c:	20000014 	.word	0x20000014
 8006370:	0800e874 	.word	0x0800e874
 8006374:	2001d9e8 	.word	0x2001d9e8

08006378 <LCD_GetBkColorIndex>:
 8006378:	4b02      	ldr	r3, [pc, #8]	; (8006384 <LCD_GetBkColorIndex+0xc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000014 	.word	0x20000014

08006388 <LCD_GetColorIndex>:
 8006388:	4b02      	ldr	r3, [pc, #8]	; (8006394 <LCD_GetColorIndex+0xc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000014 	.word	0x20000014

08006398 <_GetDevProp>:
 8006398:	2801      	cmp	r0, #1
 800639a:	b510      	push	{r4, lr}
 800639c:	460c      	mov	r4, r1
 800639e:	dc08      	bgt.n	80063b2 <_GetDevProp+0x1a>
 80063a0:	f7ff f9c0 	bl	8005724 <GUI_DEVICE__GetpDriver>
 80063a4:	b128      	cbz	r0, 80063b2 <_GetDevProp+0x1a>
 80063a6:	68c3      	ldr	r3, [r0, #12]
 80063a8:	4621      	mov	r1, r4
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063b0:	4718      	bx	r3
 80063b2:	2000      	movs	r0, #0
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <_GetMaxValue>:
 80063b6:	b538      	push	{r3, r4, r5, lr}
 80063b8:	4601      	mov	r1, r0
 80063ba:	4605      	mov	r5, r0
 80063bc:	2001      	movs	r0, #1
 80063be:	f7ff ffeb 	bl	8006398 <_GetDevProp>
 80063c2:	4604      	mov	r4, r0
 80063c4:	4629      	mov	r1, r5
 80063c6:	2000      	movs	r0, #0
 80063c8:	f7ff ffe6 	bl	8006398 <_GetDevProp>
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	bfb8      	it	lt
 80063d0:	4620      	movlt	r0, r4
 80063d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80063d6:	bd38      	pop	{r3, r4, r5, pc}

080063d8 <LCD_GetXSizeEx>:
 80063d8:	2101      	movs	r1, #1
 80063da:	f7ff bfdd 	b.w	8006398 <_GetDevProp>

080063de <LCD_GetYSizeEx>:
 80063de:	2102      	movs	r1, #2
 80063e0:	f7ff bfda 	b.w	8006398 <_GetDevProp>

080063e4 <LCD_GetVXSizeEx>:
 80063e4:	2103      	movs	r1, #3
 80063e6:	f7ff bfd7 	b.w	8006398 <_GetDevProp>

080063ea <LCD_GetVYSizeEx>:
 80063ea:	2104      	movs	r1, #4
 80063ec:	f7ff bfd4 	b.w	8006398 <_GetDevProp>

080063f0 <LCD_GetBitsPerPixelEx>:
 80063f0:	2108      	movs	r1, #8
 80063f2:	f7ff bfd1 	b.w	8006398 <_GetDevProp>

080063f6 <LCD_GetNumColorsEx>:
 80063f6:	2109      	movs	r1, #9
 80063f8:	f7ff bfce 	b.w	8006398 <_GetDevProp>

080063fc <LCD_GetSwapXYEx>:
 80063fc:	210e      	movs	r1, #14
 80063fe:	f7ff bfcb 	b.w	8006398 <_GetDevProp>
	...

08006404 <LCD_GetXSize>:
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <LCD_GetXSize+0xc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	7c58      	ldrb	r0, [r3, #17]
 800640a:	f7ff bfe5 	b.w	80063d8 <LCD_GetXSizeEx>
 800640e:	bf00      	nop
 8006410:	20000014 	.word	0x20000014

08006414 <LCD_GetYSize>:
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <LCD_GetYSize+0xc>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	7c58      	ldrb	r0, [r3, #17]
 800641a:	f7ff bfe0 	b.w	80063de <LCD_GetYSizeEx>
 800641e:	bf00      	nop
 8006420:	20000014 	.word	0x20000014

08006424 <LCD_GetNumColors>:
 8006424:	4b02      	ldr	r3, [pc, #8]	; (8006430 <LCD_GetNumColors+0xc>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	7c58      	ldrb	r0, [r3, #17]
 800642a:	f7ff bfe4 	b.w	80063f6 <LCD_GetNumColorsEx>
 800642e:	bf00      	nop
 8006430:	20000014 	.word	0x20000014

08006434 <LCD_GetSwapXY>:
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <LCD_GetSwapXY+0xc>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	7c58      	ldrb	r0, [r3, #17]
 800643a:	f7ff bfdf 	b.w	80063fc <LCD_GetSwapXYEx>
 800643e:	bf00      	nop
 8006440:	20000014 	.word	0x20000014

08006444 <GUI_GetBitsPerPixelEx>:
 8006444:	4b03      	ldr	r3, [pc, #12]	; (8006454 <GUI_GetBitsPerPixelEx+0x10>)
 8006446:	2108      	movs	r1, #8
 8006448:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800644c:	68c3      	ldr	r3, [r0, #12]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	4718      	bx	r3
 8006452:	bf00      	nop
 8006454:	2001d9e8 	.word	0x2001d9e8

08006458 <LCD_GetPaletteEx>:
 8006458:	b510      	push	{r4, lr}
 800645a:	f7ff f963 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800645e:	b128      	cbz	r0, 800646c <LCD_GetPaletteEx+0x14>
 8006460:	68c3      	ldr	r3, [r0, #12]
 8006462:	2102      	movs	r1, #2
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800646a:	4718      	bx	r3
 800646c:	bd10      	pop	{r4, pc}
	...

08006470 <LCD_GetPalette>:
 8006470:	4b02      	ldr	r3, [pc, #8]	; (800647c <LCD_GetPalette+0xc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	7c58      	ldrb	r0, [r3, #17]
 8006476:	f7ff bfef 	b.w	8006458 <LCD_GetPaletteEx>
 800647a:	bf00      	nop
 800647c:	20000014 	.word	0x20000014

08006480 <GUI_GetpfIndex2ColorEx>:
 8006480:	4b02      	ldr	r3, [pc, #8]	; (800648c <GUI_GetpfIndex2ColorEx+0xc>)
 8006482:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	6858      	ldr	r0, [r3, #4]
 800648a:	4770      	bx	lr
 800648c:	2001d9e8 	.word	0x2001d9e8

08006490 <GUI_GetpfColor2IndexEx>:
 8006490:	4b02      	ldr	r3, [pc, #8]	; (800649c <GUI_GetpfColor2IndexEx+0xc>)
 8006492:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	4770      	bx	lr
 800649c:	2001d9e8 	.word	0x2001d9e8

080064a0 <LCD_GetXSizeMax>:
 80064a0:	2001      	movs	r0, #1
 80064a2:	f7ff bf88 	b.w	80063b6 <_GetMaxValue>

080064a6 <LCD_GetYSizeMax>:
 80064a6:	2002      	movs	r0, #2
 80064a8:	f7ff bf85 	b.w	80063b6 <_GetMaxValue>

080064ac <LCD_GetVXSizeMax>:
 80064ac:	2003      	movs	r0, #3
 80064ae:	f7ff bf82 	b.w	80063b6 <_GetMaxValue>
	...

080064b4 <LCD_SetDisplaySize>:
 80064b4:	4b01      	ldr	r3, [pc, #4]	; (80064bc <LCD_SetDisplaySize+0x8>)
 80064b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80064ba:	4770      	bx	lr
 80064bc:	200001b0 	.word	0x200001b0

080064c0 <LCD_GetXSizeDisplay>:
 80064c0:	4b01      	ldr	r3, [pc, #4]	; (80064c8 <LCD_GetXSizeDisplay+0x8>)
 80064c2:	6818      	ldr	r0, [r3, #0]
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	200001b0 	.word	0x200001b0

080064cc <LCD_GetYSizeDisplay>:
 80064cc:	4b01      	ldr	r3, [pc, #4]	; (80064d4 <LCD_GetYSizeDisplay+0x8>)
 80064ce:	6858      	ldr	r0, [r3, #4]
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	200001b0 	.word	0x200001b0

080064d8 <LCD__GetBPP>:
 80064d8:	2800      	cmp	r0, #0
 80064da:	d03b      	beq.n	8006554 <LCD__GetBPP+0x7c>
 80064dc:	f030 0301 	bics.w	r3, r0, #1
 80064e0:	d029      	beq.n	8006536 <LCD__GetBPP+0x5e>
 80064e2:	f030 0303 	bics.w	r3, r0, #3
 80064e6:	d028      	beq.n	800653a <LCD__GetBPP+0x62>
 80064e8:	f030 0307 	bics.w	r3, r0, #7
 80064ec:	d027      	beq.n	800653e <LCD__GetBPP+0x66>
 80064ee:	f030 030f 	bics.w	r3, r0, #15
 80064f2:	d026      	beq.n	8006542 <LCD__GetBPP+0x6a>
 80064f4:	f030 031f 	bics.w	r3, r0, #31
 80064f8:	d025      	beq.n	8006546 <LCD__GetBPP+0x6e>
 80064fa:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80064fe:	d024      	beq.n	800654a <LCD__GetBPP+0x72>
 8006500:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	b30b      	cbz	r3, 800654e <LCD__GetBPP+0x76>
 800650a:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	b1e3      	cbz	r3, 800654e <LCD__GetBPP+0x76>
 8006514:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8006518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800651c:	b1bb      	cbz	r3, 800654e <LCD__GetBPP+0x76>
 800651e:	0c03      	lsrs	r3, r0, #16
 8006520:	041b      	lsls	r3, r3, #16
 8006522:	b1a3      	cbz	r3, 800654e <LCD__GetBPP+0x76>
 8006524:	0c83      	lsrs	r3, r0, #18
 8006526:	049b      	lsls	r3, r3, #18
 8006528:	b19b      	cbz	r3, 8006552 <LCD__GetBPP+0x7a>
 800652a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800652e:	bf0c      	ite	eq
 8006530:	2018      	moveq	r0, #24
 8006532:	2020      	movne	r0, #32
 8006534:	4770      	bx	lr
 8006536:	2001      	movs	r0, #1
 8006538:	4770      	bx	lr
 800653a:	2002      	movs	r0, #2
 800653c:	4770      	bx	lr
 800653e:	2003      	movs	r0, #3
 8006540:	4770      	bx	lr
 8006542:	2004      	movs	r0, #4
 8006544:	4770      	bx	lr
 8006546:	2005      	movs	r0, #5
 8006548:	4770      	bx	lr
 800654a:	2008      	movs	r0, #8
 800654c:	4770      	bx	lr
 800654e:	2010      	movs	r0, #16
 8006550:	4770      	bx	lr
 8006552:	2012      	movs	r0, #18
 8006554:	4770      	bx	lr

08006556 <LCD__GetBPPDevice>:
 8006556:	b508      	push	{r3, lr}
 8006558:	f7ff ffbe 	bl	80064d8 <LCD__GetBPP>
 800655c:	2801      	cmp	r0, #1
 800655e:	d00f      	beq.n	8006580 <LCD__GetBPPDevice+0x2a>
 8006560:	1e83      	subs	r3, r0, #2
 8006562:	2b06      	cmp	r3, #6
 8006564:	d909      	bls.n	800657a <LCD__GetBPPDevice+0x24>
 8006566:	f1a0 0309 	sub.w	r3, r0, #9
 800656a:	2b07      	cmp	r3, #7
 800656c:	d907      	bls.n	800657e <LCD__GetBPPDevice+0x28>
 800656e:	3811      	subs	r0, #17
 8006570:	280f      	cmp	r0, #15
 8006572:	bf8c      	ite	hi
 8006574:	2000      	movhi	r0, #0
 8006576:	2020      	movls	r0, #32
 8006578:	bd08      	pop	{r3, pc}
 800657a:	2008      	movs	r0, #8
 800657c:	bd08      	pop	{r3, pc}
 800657e:	2010      	movs	r0, #16
 8006580:	bd08      	pop	{r3, pc}

08006582 <LCD_GetNumLayers>:
 8006582:	b510      	push	{r4, lr}
 8006584:	2000      	movs	r0, #0
 8006586:	f7ff f8cd 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800658a:	1c04      	adds	r4, r0, #0
 800658c:	f04f 0001 	mov.w	r0, #1
 8006590:	bf18      	it	ne
 8006592:	2401      	movne	r4, #1
 8006594:	f7ff f8c6 	bl	8005724 <GUI_DEVICE__GetpDriver>
 8006598:	b100      	cbz	r0, 800659c <LCD_GetNumLayers+0x1a>
 800659a:	3401      	adds	r4, #1
 800659c:	4620      	mov	r0, r4
 800659e:	bd10      	pop	{r4, pc}

080065a0 <LCD_SelectLCD>:
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <LCD_SelectLCD+0x38>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	b510      	push	{r4, lr}
 80065a6:	7c51      	ldrb	r1, [r2, #17]
 80065a8:	461c      	mov	r4, r3
 80065aa:	4a0c      	ldr	r2, [pc, #48]	; (80065dc <LCD_SelectLCD+0x3c>)
 80065ac:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80065b0:	b140      	cbz	r0, 80065c4 <LCD_SelectLCD+0x24>
 80065b2:	68c3      	ldr	r3, [r0, #12]
 80065b4:	b113      	cbz	r3, 80065bc <LCD_SelectLCD+0x1c>
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d001      	beq.n	80065c0 <LCD_SelectLCD+0x20>
 80065bc:	6800      	ldr	r0, [r0, #0]
 80065be:	e7f7      	b.n	80065b0 <LCD_SelectLCD+0x10>
 80065c0:	f7ff f8e8 	bl	8005794 <GUI_DEVICE_Unlink>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	2200      	movs	r2, #0
 80065c8:	661a      	str	r2, [r3, #96]	; 0x60
 80065ca:	f103 0208 	add.w	r2, r3, #8
 80065ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d2:	615a      	str	r2, [r3, #20]
 80065d4:	f7ff bd68 	b.w	80060a8 <LCD_SetClipRectMax>
 80065d8:	20000014 	.word	0x20000014
 80065dc:	2001d9e8 	.word	0x2001d9e8

080065e0 <LCD_SetLUTEntryEx>:
 80065e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065e2:	460c      	mov	r4, r1
 80065e4:	4615      	mov	r5, r2
 80065e6:	f7ff f89d 	bl	8005724 <GUI_DEVICE__GetpDriver>
 80065ea:	9001      	str	r0, [sp, #4]
 80065ec:	b908      	cbnz	r0, 80065f2 <LCD_SetLUTEntryEx+0x12>
 80065ee:	2001      	movs	r0, #1
 80065f0:	e00c      	b.n	800660c <LCD_SetLUTEntryEx+0x2c>
 80065f2:	68c3      	ldr	r3, [r0, #12]
 80065f4:	2110      	movs	r1, #16
 80065f6:	a801      	add	r0, sp, #4
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	4798      	blx	r3
 80065fc:	4603      	mov	r3, r0
 80065fe:	2800      	cmp	r0, #0
 8006600:	d0f5      	beq.n	80065ee <LCD_SetLUTEntryEx+0xe>
 8006602:	9801      	ldr	r0, [sp, #4]
 8006604:	462a      	mov	r2, r5
 8006606:	4621      	mov	r1, r4
 8006608:	4798      	blx	r3
 800660a:	2000      	movs	r0, #0
 800660c:	b003      	add	sp, #12
 800660e:	bd30      	pop	{r4, r5, pc}

08006610 <LCD_SetSizeEx>:
 8006610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	4615      	mov	r5, r2
 8006616:	f7ff f885 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	b908      	cbnz	r0, 8006622 <LCD_SetSizeEx+0x12>
 800661e:	2001      	movs	r0, #1
 8006620:	e00c      	b.n	800663c <LCD_SetSizeEx+0x2c>
 8006622:	68c3      	ldr	r3, [r0, #12]
 8006624:	210b      	movs	r1, #11
 8006626:	a801      	add	r0, sp, #4
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	4798      	blx	r3
 800662c:	4603      	mov	r3, r0
 800662e:	2800      	cmp	r0, #0
 8006630:	d0f5      	beq.n	800661e <LCD_SetSizeEx+0xe>
 8006632:	9801      	ldr	r0, [sp, #4]
 8006634:	462a      	mov	r2, r5
 8006636:	4621      	mov	r1, r4
 8006638:	4798      	blx	r3
 800663a:	2000      	movs	r0, #0
 800663c:	b003      	add	sp, #12
 800663e:	bd30      	pop	{r4, r5, pc}

08006640 <LCD_SetVSizeEx>:
 8006640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006642:	460c      	mov	r4, r1
 8006644:	4615      	mov	r5, r2
 8006646:	f7ff f86d 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800664a:	9001      	str	r0, [sp, #4]
 800664c:	b908      	cbnz	r0, 8006652 <LCD_SetVSizeEx+0x12>
 800664e:	2001      	movs	r0, #1
 8006650:	e00c      	b.n	800666c <LCD_SetVSizeEx+0x2c>
 8006652:	68c3      	ldr	r3, [r0, #12]
 8006654:	210a      	movs	r1, #10
 8006656:	a801      	add	r0, sp, #4
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	4798      	blx	r3
 800665c:	4603      	mov	r3, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d0f5      	beq.n	800664e <LCD_SetVSizeEx+0xe>
 8006662:	9801      	ldr	r0, [sp, #4]
 8006664:	462a      	mov	r2, r5
 8006666:	4621      	mov	r1, r4
 8006668:	4798      	blx	r3
 800666a:	2000      	movs	r0, #0
 800666c:	b003      	add	sp, #12
 800666e:	bd30      	pop	{r4, r5, pc}

08006670 <LCD_UpdateColorIndices>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4c07      	ldr	r4, [pc, #28]	; (8006690 <LCD_UpdateColorIndices+0x20>)
 8006674:	6823      	ldr	r3, [r4, #0]
 8006676:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006678:	f7ff fd76 	bl	8006168 <LCD_Color2Index>
 800667c:	f7ff fd90 	bl	80061a0 <LCD_SetColorIndex>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006684:	f7ff fd70 	bl	8006168 <LCD_Color2Index>
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bda4 	b.w	80061d8 <LCD_SetBkColorIndex>
 8006690:	20000014 	.word	0x20000014

08006694 <_Log2PhysY_X1Y0S0>:
 8006694:	4610      	mov	r0, r2
 8006696:	4770      	bx	lr

08006698 <_Log2PhysY_X1Y1S0>:
 8006698:	6840      	ldr	r0, [r0, #4]
 800669a:	1a80      	subs	r0, r0, r2
 800669c:	3801      	subs	r0, #1
 800669e:	4770      	bx	lr

080066a0 <_Log2PhysY_X1Y0S1>:
 80066a0:	4608      	mov	r0, r1
 80066a2:	4770      	bx	lr

080066a4 <_Log2PhysY_X1Y1S1>:
 80066a4:	6800      	ldr	r0, [r0, #0]
 80066a6:	1a40      	subs	r0, r0, r1
 80066a8:	3801      	subs	r0, #1
 80066aa:	4770      	bx	lr

080066ac <_SetPixelIndex>:
 80066ac:	b410      	push	{r4}
 80066ae:	6884      	ldr	r4, [r0, #8]
 80066b0:	f8d4 40f8 	ldr.w	r4, [r4, #248]	; 0xf8
 80066b4:	46a4      	mov	ip, r4
 80066b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ba:	4760      	bx	ip

080066bc <_GetPixelIndex>:
 80066bc:	6883      	ldr	r3, [r0, #8]
 80066be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066c2:	4718      	bx	r3

080066c4 <_XorPixel>:
 80066c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c6:	6887      	ldr	r7, [r0, #8]
 80066c8:	4616      	mov	r6, r2
 80066ca:	4604      	mov	r4, r0
 80066cc:	460d      	mov	r5, r1
 80066ce:	f7ff fff5 	bl	80066bc <_GetPixelIndex>
 80066d2:	9001      	str	r0, [sp, #4]
 80066d4:	9a01      	ldr	r2, [sp, #4]
 80066d6:	4629      	mov	r1, r5
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	4620      	mov	r0, r4
 80066dc:	4053      	eors	r3, r2
 80066de:	4632      	mov	r2, r6
 80066e0:	f7ff ffe4 	bl	80066ac <_SetPixelIndex>
 80066e4:	b003      	add	sp, #12
 80066e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066e8 <_DrawHLine>:
 80066e8:	b513      	push	{r0, r1, r4, lr}
 80066ea:	6884      	ldr	r4, [r0, #8]
 80066ec:	9200      	str	r2, [sp, #0]
 80066ee:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 80066f2:	47a0      	blx	r4
 80066f4:	b002      	add	sp, #8
 80066f6:	bd10      	pop	{r4, pc}

080066f8 <_DrawVLine>:
 80066f8:	b513      	push	{r0, r1, r4, lr}
 80066fa:	6884      	ldr	r4, [r0, #8]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	460b      	mov	r3, r1
 8006700:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8006704:	47a0      	blx	r4
 8006706:	b002      	add	sp, #8
 8006708:	bd10      	pop	{r4, pc}

0800670a <_FillRect>:
 800670a:	b410      	push	{r4}
 800670c:	6884      	ldr	r4, [r0, #8]
 800670e:	f8d4 40f0 	ldr.w	r4, [r4, #240]	; 0xf0
 8006712:	46a4      	mov	ip, r4
 8006714:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006718:	4760      	bx	ip

0800671a <_DrawBitmap>:
 800671a:	b430      	push	{r4, r5}
 800671c:	6884      	ldr	r4, [r0, #8]
 800671e:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
 8006722:	46a4      	mov	ip, r4
 8006724:	bc30      	pop	{r4, r5}
 8006726:	4760      	bx	ip

08006728 <_GetDevFunc_SetRect>:
 8006728:	4770      	bx	lr
	...

0800672c <_GetDevFunc_SetRectOutside>:
 800672c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800672e:	9e07      	ldr	r6, [sp, #28]
 8006730:	6884      	ldr	r4, [r0, #8]
 8006732:	4d0c      	ldr	r5, [pc, #48]	; (8006764 <_GetDevFunc_SetRectOutside+0x38>)
 8006734:	b176      	cbz	r6, 8006754 <_GetDevFunc_SetRectOutside+0x28>
 8006736:	6828      	ldr	r0, [r5, #0]
 8006738:	b988      	cbnz	r0, 800675e <_GetDevFunc_SetRectOutside+0x32>
 800673a:	9806      	ldr	r0, [sp, #24]
 800673c:	9000      	str	r0, [sp, #0]
 800673e:	4620      	mov	r0, r4
 8006740:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006744:	47b0      	blx	r6
 8006746:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800674a:	602b      	str	r3, [r5, #0]
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <_GetDevFunc_SetRectOutside+0x3c>)
 800674e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 8006752:	e004      	b.n	800675e <_GetDevFunc_SetRectOutside+0x32>
 8006754:	682b      	ldr	r3, [r5, #0]
 8006756:	b113      	cbz	r3, 800675e <_GetDevFunc_SetRectOutside+0x32>
 8006758:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 800675c:	602e      	str	r6, [r5, #0]
 800675e:	b002      	add	sp, #8
 8006760:	bd70      	pop	{r4, r5, r6, pc}
 8006762:	bf00      	nop
 8006764:	200001b8 	.word	0x200001b8
 8006768:	08006729 	.word	0x08006729

0800676c <_ReadPixelCust_16bpp>:
 800676c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800676e:	f8d0 30dc 	ldr.w	r3, [r0, #220]	; 0xdc
 8006772:	6990      	ldr	r0, [r2, #24]
 8006774:	4718      	bx	r3

08006776 <_ReadPixelCust_18bpp>:
 8006776:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006778:	f8d0 30e0 	ldr.w	r3, [r0, #224]	; 0xe0
 800677c:	6990      	ldr	r0, [r2, #24]
 800677e:	4718      	bx	r3

08006780 <_ReadRectCust_16bpp>:
 8006780:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006786:	4691      	mov	r9, r2
 8006788:	6885      	ldr	r5, [r0, #8]
 800678a:	468a      	mov	sl, r1
 800678c:	4698      	mov	r8, r3
 800678e:	9400      	str	r4, [sp, #0]
 8006790:	ebc9 0404 	rsb	r4, r9, r4
 8006794:	4628      	mov	r0, r5
 8006796:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 800679a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800679c:	47b0      	blx	r6
 800679e:	ebca 0608 	rsb	r6, sl, r8
 80067a2:	1c62      	adds	r2, r4, #1
 80067a4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80067a6:	4639      	mov	r1, r7
 80067a8:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
 80067ac:	fb06 2202 	mla	r2, r6, r2, r2
 80067b0:	6980      	ldr	r0, [r0, #24]
 80067b2:	b002      	add	sp, #8
 80067b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	4718      	bx	r3

080067ba <_ReadRectCust_18bpp>:
 80067ba:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80067be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067c0:	4691      	mov	r9, r2
 80067c2:	6885      	ldr	r5, [r0, #8]
 80067c4:	468a      	mov	sl, r1
 80067c6:	4698      	mov	r8, r3
 80067c8:	9400      	str	r4, [sp, #0]
 80067ca:	ebc9 0404 	rsb	r4, r9, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 80067d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80067d6:	47b0      	blx	r6
 80067d8:	ebca 0608 	rsb	r6, sl, r8
 80067dc:	1c62      	adds	r2, r4, #1
 80067de:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80067e0:	4639      	mov	r1, r7
 80067e2:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
 80067e6:	fb06 2202 	mla	r2, r6, r2, r2
 80067ea:	6980      	ldr	r0, [r0, #24]
 80067ec:	b002      	add	sp, #8
 80067ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f2:	4718      	bx	r3

080067f4 <_GetDevFunc>:
 80067f4:	3901      	subs	r1, #1
 80067f6:	2917      	cmp	r1, #23
 80067f8:	d828      	bhi.n	800684c <_GetDevFunc+0x58>
 80067fa:	e8df f001 	tbb	[pc, r1]
 80067fe:	2714      	.short	0x2714
 8006800:	27272727 	.word	0x27272727
 8006804:	0e272727 	.word	0x0e272727
 8006808:	29191210 	.word	0x29191210
 800680c:	2727270c 	.word	0x2727270c
 8006810:	23272727 	.word	0x23272727
 8006814:	251e      	.short	0x251e
 8006816:	480f      	ldr	r0, [pc, #60]	; (8006854 <_GetDevFunc+0x60>)
 8006818:	4770      	bx	lr
 800681a:	480f      	ldr	r0, [pc, #60]	; (8006858 <_GetDevFunc+0x64>)
 800681c:	4770      	bx	lr
 800681e:	480f      	ldr	r0, [pc, #60]	; (800685c <_GetDevFunc+0x68>)
 8006820:	4770      	bx	lr
 8006822:	480f      	ldr	r0, [pc, #60]	; (8006860 <_GetDevFunc+0x6c>)
 8006824:	4770      	bx	lr
 8006826:	6803      	ldr	r3, [r0, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
 800682e:	4770      	bx	lr
 8006830:	6803      	ldr	r3, [r0, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f8d3 00fc 	ldr.w	r0, [r3, #252]	; 0xfc
 8006838:	4770      	bx	lr
 800683a:	6803      	ldr	r3, [r0, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8006842:	4770      	bx	lr
 8006844:	4807      	ldr	r0, [pc, #28]	; (8006864 <_GetDevFunc+0x70>)
 8006846:	4770      	bx	lr
 8006848:	4807      	ldr	r0, [pc, #28]	; (8006868 <_GetDevFunc+0x74>)
 800684a:	4770      	bx	lr
 800684c:	2000      	movs	r0, #0
 800684e:	4770      	bx	lr
 8006850:	4806      	ldr	r0, [pc, #24]	; (800686c <_GetDevFunc+0x78>)
 8006852:	4770      	bx	lr
 8006854:	08006c17 	.word	0x08006c17
 8006858:	08006c03 	.word	0x08006c03
 800685c:	08006bef 	.word	0x08006bef
 8006860:	08006ba5 	.word	0x08006ba5
 8006864:	08006b09 	.word	0x08006b09
 8006868:	0800672d 	.word	0x0800672d
 800686c:	08006c2d 	.word	0x08006c2d

08006870 <_GetDevProp>:
 8006870:	3901      	subs	r1, #1
 8006872:	6880      	ldr	r0, [r0, #8]
 8006874:	290d      	cmp	r1, #13
 8006876:	d823      	bhi.n	80068c0 <_GetDevProp+0x50>
 8006878:	e8df f001 	tbb	[pc, r1]
 800687c:	0f0d0b09 	.word	0x0f0d0b09
 8006880:	11222222 	.word	0x11222222
 8006884:	13070725 	.word	0x13070725
 8006888:	1d18      	.short	0x1d18
 800688a:	2001      	movs	r0, #1
 800688c:	4770      	bx	lr
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	4770      	bx	lr
 8006892:	6840      	ldr	r0, [r0, #4]
 8006894:	4770      	bx	lr
 8006896:	6880      	ldr	r0, [r0, #8]
 8006898:	4770      	bx	lr
 800689a:	68c0      	ldr	r0, [r0, #12]
 800689c:	4770      	bx	lr
 800689e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80068a0:	4770      	bx	lr
 80068a2:	b188      	cbz	r0, 80068c8 <_GetDevProp+0x58>
 80068a4:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80068a6:	f000 0001 	and.w	r0, r0, #1
 80068aa:	4770      	bx	lr
 80068ac:	b160      	cbz	r0, 80068c8 <_GetDevProp+0x58>
 80068ae:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80068b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 80068b4:	4770      	bx	lr
 80068b6:	b138      	cbz	r0, 80068c8 <_GetDevProp+0x58>
 80068b8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80068ba:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80068be:	4770      	bx	lr
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c4:	4770      	bx	lr
 80068c6:	2000      	movs	r0, #0
 80068c8:	4770      	bx	lr

080068ca <_GetDevData>:
 80068ca:	6883      	ldr	r3, [r0, #8]
 80068cc:	2901      	cmp	r1, #1
 80068ce:	bf0c      	ite	eq
 80068d0:	6c58      	ldreq	r0, [r3, #68]	; 0x44
 80068d2:	2000      	movne	r0, #0
 80068d4:	4770      	bx	lr

080068d6 <_GetRect>:
 80068d6:	6882      	ldr	r2, [r0, #8]
 80068d8:	2300      	movs	r3, #0
 80068da:	800b      	strh	r3, [r1, #0]
 80068dc:	804b      	strh	r3, [r1, #2]
 80068de:	6813      	ldr	r3, [r2, #0]
 80068e0:	3b01      	subs	r3, #1
 80068e2:	808b      	strh	r3, [r1, #4]
 80068e4:	6853      	ldr	r3, [r2, #4]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	80cb      	strh	r3, [r1, #6]
 80068ea:	4770      	bx	lr

080068ec <GUIDRV_FlexColor__SetLog2Phys>:
 80068ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ee:	4c10      	ldr	r4, [pc, #64]	; (8006930 <GUIDRV_FlexColor__SetLog2Phys+0x44>)
 80068f0:	b091      	sub	sp, #68	; 0x44
 80068f2:	4607      	mov	r7, r0
 80068f4:	4626      	mov	r6, r4
 80068f6:	466d      	mov	r5, sp
 80068f8:	3420      	adds	r4, #32
 80068fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80068fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068fe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006902:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006908:	ad08      	add	r5, sp, #32
 800690a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800690c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006910:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006914:	aa10      	add	r2, sp, #64	; 0x40
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800691c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8006920:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006924:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800692c:	b011      	add	sp, #68	; 0x44
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006930:	0800d000 	.word	0x0800d000

08006934 <_SetOrg>:
 8006934:	b507      	push	{r0, r1, r2, lr}
 8006936:	e88d 0006 	stmia.w	sp, {r1, r2}
 800693a:	466a      	mov	r2, sp
 800693c:	2103      	movs	r1, #3
 800693e:	6980      	ldr	r0, [r0, #24]
 8006940:	f7fd ff0c 	bl	800475c <LCD_X_DisplayDriver>
 8006944:	b003      	add	sp, #12
 8006946:	f85d fb04 	ldr.w	pc, [sp], #4

0800694a <_Log2PhysY_X0Y0S1>:
 800694a:	4608      	mov	r0, r1
 800694c:	4770      	bx	lr

0800694e <_Log2PhysX_X0Y0S0>:
 800694e:	4608      	mov	r0, r1
 8006950:	4770      	bx	lr

08006952 <_Log2PhysX_X0Y1S0>:
 8006952:	4608      	mov	r0, r1
 8006954:	4770      	bx	lr

08006956 <_Log2PhysX_X0Y0S1>:
 8006956:	4610      	mov	r0, r2
 8006958:	4770      	bx	lr

0800695a <_Log2PhysX_X0Y1S1>:
 800695a:	4610      	mov	r0, r2
 800695c:	4770      	bx	lr

0800695e <_Log2PhysY_X0Y0S0>:
 800695e:	4610      	mov	r0, r2
 8006960:	4770      	bx	lr

08006962 <_Log2PhysY_X0Y1S0>:
 8006962:	6840      	ldr	r0, [r0, #4]
 8006964:	1a80      	subs	r0, r0, r2
 8006966:	3801      	subs	r0, #1
 8006968:	4770      	bx	lr

0800696a <_Log2PhysX_X1Y0S0>:
 800696a:	6800      	ldr	r0, [r0, #0]
 800696c:	1a40      	subs	r0, r0, r1
 800696e:	3801      	subs	r0, #1
 8006970:	4770      	bx	lr

08006972 <_Log2PhysX_X1Y1S0>:
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	1a40      	subs	r0, r0, r1
 8006976:	3801      	subs	r0, #1
 8006978:	4770      	bx	lr

0800697a <_Log2PhysX_X1Y0S1>:
 800697a:	6840      	ldr	r0, [r0, #4]
 800697c:	1a80      	subs	r0, r0, r2
 800697e:	3801      	subs	r0, #1
 8006980:	4770      	bx	lr

08006982 <_Log2PhysX_X1Y1S1>:
 8006982:	6840      	ldr	r0, [r0, #4]
 8006984:	1a80      	subs	r0, r0, r2
 8006986:	3801      	subs	r0, #1
 8006988:	4770      	bx	lr

0800698a <_Log2PhysY_X0Y1S1>:
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	1a40      	subs	r0, r0, r1
 800698e:	3801      	subs	r0, #1
 8006990:	4770      	bx	lr

08006992 <GUIDRV_FlexColor__SetPixelIndexNoCache>:
 8006992:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006996:	6884      	ldr	r4, [r0, #8]
 8006998:	4698      	mov	r8, r3
 800699a:	460e      	mov	r6, r1
 800699c:	4617      	mov	r7, r2
 800699e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80069a0:	079b      	lsls	r3, r3, #30
 80069a2:	d52e      	bpl.n	8006a02 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x70>
 80069a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80069a8:	4620      	mov	r0, r4
 80069aa:	4798      	blx	r3
 80069ac:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80069b0:	4605      	mov	r5, r0
 80069b2:	463a      	mov	r2, r7
 80069b4:	4631      	mov	r1, r6
 80069b6:	4620      	mov	r0, r4
 80069b8:	4798      	blx	r3
 80069ba:	69a3      	ldr	r3, [r4, #24]
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	4606      	mov	r6, r0
 80069c0:	429d      	cmp	r5, r3
 80069c2:	bfd4      	ite	le
 80069c4:	2300      	movle	r3, #0
 80069c6:	2301      	movgt	r3, #1
 80069c8:	4295      	cmp	r5, r2
 80069ca:	bfb8      	it	lt
 80069cc:	f043 0301 	orrlt.w	r3, r3, #1
 80069d0:	6962      	ldr	r2, [r4, #20]
 80069d2:	4290      	cmp	r0, r2
 80069d4:	bfb8      	it	lt
 80069d6:	f043 0301 	orrlt.w	r3, r3, #1
 80069da:	b913      	cbnz	r3, 80069e2 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x50>
 80069dc:	69e3      	ldr	r3, [r4, #28]
 80069de:	4298      	cmp	r0, r3
 80069e0:	dd0a      	ble.n	80069f8 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x66>
 80069e2:	6862      	ldr	r2, [r4, #4]
 80069e4:	4620      	mov	r0, r4
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	3a01      	subs	r2, #1
 80069ea:	3b01      	subs	r3, #1
 80069ec:	9200      	str	r2, [sp, #0]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 80069f4:	4611      	mov	r1, r2
 80069f6:	47b8      	blx	r7
 80069f8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80069fc:	4632      	mov	r2, r6
 80069fe:	4629      	mov	r1, r5
 8006a00:	e001      	b.n	8006a06 <GUIDRV_FlexColor__SetPixelIndexNoCache+0x74>
 8006a02:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006a06:	4620      	mov	r0, r4
 8006a08:	4798      	blx	r3
 8006a0a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4620      	mov	r0, r4
 8006a12:	b002      	add	sp, #8
 8006a14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	4718      	bx	r3

08006a1a <GUIDRV_FlexColor__GetPixelIndexNoCache>:
 8006a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1c:	6884      	ldr	r4, [r0, #8]
 8006a1e:	460e      	mov	r6, r1
 8006a20:	4617      	mov	r7, r2
 8006a22:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006a24:	079b      	lsls	r3, r3, #30
 8006a26:	d543      	bpl.n	8006ab0 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x96>
 8006a28:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	4798      	blx	r3
 8006a30:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8006a34:	4631      	mov	r1, r6
 8006a36:	4605      	mov	r5, r0
 8006a38:	463a      	mov	r2, r7
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	4798      	blx	r3
 8006a3e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006a42:	4606      	mov	r6, r0
 8006a44:	b11b      	cbz	r3, 8006a4e <GUIDRV_FlexColor__GetPixelIndexNoCache+0x34>
 8006a46:	2200      	movs	r2, #0
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	4798      	blx	r3
 8006a4e:	69a3      	ldr	r3, [r4, #24]
 8006a50:	6922      	ldr	r2, [r4, #16]
 8006a52:	429d      	cmp	r5, r3
 8006a54:	bfd4      	ite	le
 8006a56:	2300      	movle	r3, #0
 8006a58:	2301      	movgt	r3, #1
 8006a5a:	4295      	cmp	r5, r2
 8006a5c:	bfb8      	it	lt
 8006a5e:	f043 0301 	orrlt.w	r3, r3, #1
 8006a62:	6962      	ldr	r2, [r4, #20]
 8006a64:	4296      	cmp	r6, r2
 8006a66:	bfb8      	it	lt
 8006a68:	f043 0301 	orrlt.w	r3, r3, #1
 8006a6c:	b913      	cbnz	r3, 8006a74 <GUIDRV_FlexColor__GetPixelIndexNoCache+0x5a>
 8006a6e:	69e3      	ldr	r3, [r4, #28]
 8006a70:	429e      	cmp	r6, r3
 8006a72:	dd0a      	ble.n	8006a8a <GUIDRV_FlexColor__GetPixelIndexNoCache+0x70>
 8006a74:	6862      	ldr	r2, [r4, #4]
 8006a76:	4620      	mov	r0, r4
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	3a01      	subs	r2, #1
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	9200      	str	r2, [sp, #0]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
 8006a86:	4611      	mov	r1, r2
 8006a88:	47b8      	blx	r7
 8006a8a:	4629      	mov	r1, r5
 8006a8c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006a90:	4632      	mov	r2, r6
 8006a92:	4620      	mov	r0, r4
 8006a94:	4798      	blx	r3
 8006a96:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	4798      	blx	r3
 8006a9e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	b17b      	cbz	r3, 8006ac6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4620      	mov	r0, r4
 8006aac:	4798      	blx	r3
 8006aae:	e00a      	b.n	8006ac6 <GUIDRV_FlexColor__GetPixelIndexNoCache+0xac>
 8006ab0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	4798      	blx	r3
 8006ab8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8006abc:	4620      	mov	r0, r4
 8006abe:	b003      	add	sp, #12
 8006ac0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8006ac4:	4718      	bx	r3
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	b003      	add	sp, #12
 8006aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006acc <GUIDRV_FlexColor__InitOnce>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	6885      	ldr	r5, [r0, #8]
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	b99d      	cbnz	r5, 8006afc <GUIDRV_FlexColor__InitOnce+0x30>
 8006ad4:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8006ad8:	f7fe f9cc 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 8006adc:	4b08      	ldr	r3, [pc, #32]	; (8006b00 <GUIDRV_FlexColor__InitOnce+0x34>)
 8006ade:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8006ae2:	60a0      	str	r0, [r4, #8]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	4798      	blx	r3
 8006aea:	68a3      	ldr	r3, [r4, #8]
 8006aec:	2202      	movs	r2, #2
 8006aee:	641c      	str	r4, [r3, #64]	; 0x40
 8006af0:	84da      	strh	r2, [r3, #38]	; 0x26
 8006af2:	2201      	movs	r2, #1
 8006af4:	621a      	str	r2, [r3, #32]
 8006af6:	4a03      	ldr	r2, [pc, #12]	; (8006b04 <GUIDRV_FlexColor__InitOnce+0x38>)
 8006af8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	20000024 	.word	0x20000024
 8006b04:	080068ed 	.word	0x080068ed

08006b08 <_SetDevFunc>:
 8006b08:	b570      	push	{r4, r5, r6, lr}
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	4614      	mov	r4, r2
 8006b10:	f7ff ffdc 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006b14:	68b3      	ldr	r3, [r6, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03b      	beq.n	8006b92 <_SetDevFunc+0x8a>
 8006b1a:	2d26      	cmp	r5, #38	; 0x26
 8006b1c:	d002      	beq.n	8006b24 <_SetDevFunc+0x1c>
 8006b1e:	2d27      	cmp	r5, #39	; 0x27
 8006b20:	d016      	beq.n	8006b50 <_SetDevFunc+0x48>
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b26:	2a10      	cmp	r2, #16
 8006b28:	d002      	beq.n	8006b30 <_SetDevFunc+0x28>
 8006b2a:	2a12      	cmp	r2, #18
 8006b2c:	d008      	beq.n	8006b40 <_SetDevFunc+0x38>
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <_SetDevFunc+0x8c>)
 8006b32:	f8c3 40dc 	str.w	r4, [r3, #220]	; 0xdc
 8006b36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8006b3a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
 8006b40:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <_SetDevFunc+0x90>)
 8006b42:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 8006b46:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8006b4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b52:	2a10      	cmp	r2, #16
 8006b54:	d002      	beq.n	8006b5c <_SetDevFunc+0x54>
 8006b56:	2a12      	cmp	r2, #18
 8006b58:	d00e      	beq.n	8006b78 <_SetDevFunc+0x70>
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	b13c      	cbz	r4, 8006b6e <_SetDevFunc+0x66>
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	; (8006b9c <_SetDevFunc+0x94>)
 8006b60:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 8006b64:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8006b68:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 8006b72:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	b13c      	cbz	r4, 8006b8a <_SetDevFunc+0x82>
 8006b7a:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <_SetDevFunc+0x98>)
 8006b7c:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 8006b80:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8006b84:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 8006b8e:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 8006b92:	bd70      	pop	{r4, r5, r6, pc}
 8006b94:	0800676d 	.word	0x0800676d
 8006b98:	08006777 	.word	0x08006777
 8006b9c:	08006781 	.word	0x08006781
 8006ba0:	080067bb 	.word	0x080067bb

08006ba4 <_GetDevFunc_Init>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4605      	mov	r5, r0
 8006ba8:	f7ff ff90 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bb0:	68ac      	ldr	r4, [r5, #8]
 8006bb2:	f7fe f95f 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 8006bb6:	66a0      	str	r0, [r4, #104]	; 0x68
 8006bb8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	3007      	adds	r0, #7
 8006bbe:	10c0      	asrs	r0, r0, #3
 8006bc0:	4358      	muls	r0, r3
 8006bc2:	f7fe f957 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2101      	movs	r1, #1
 8006bca:	66e0      	str	r0, [r4, #108]	; 0x6c
 8006bcc:	69a8      	ldr	r0, [r5, #24]
 8006bce:	f7fd fdc5 	bl	800475c <LCD_X_DisplayDriver>
 8006bd2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4798      	blx	r3
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8006be2:	4798      	blx	r3
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	bfd4      	ite	le
 8006be8:	2000      	movle	r0, #0
 8006bea:	2001      	movgt	r0, #1
 8006bec:	bd38      	pop	{r3, r4, r5, pc}

08006bee <_GetDevFunc_SetSize>:
 8006bee:	b570      	push	{r4, r5, r6, lr}
 8006bf0:	4606      	mov	r6, r0
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	f7ff ff69 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006bfa:	68b3      	ldr	r3, [r6, #8]
 8006bfc:	601d      	str	r5, [r3, #0]
 8006bfe:	605c      	str	r4, [r3, #4]
 8006c00:	bd70      	pop	{r4, r5, r6, pc}

08006c02 <_GetDevFunc_SetVSize>:
 8006c02:	b570      	push	{r4, r5, r6, lr}
 8006c04:	4606      	mov	r6, r0
 8006c06:	460d      	mov	r5, r1
 8006c08:	4614      	mov	r4, r2
 8006c0a:	f7ff ff5f 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006c0e:	68b3      	ldr	r3, [r6, #8]
 8006c10:	609d      	str	r5, [r3, #8]
 8006c12:	60dc      	str	r4, [r3, #12]
 8006c14:	bd70      	pop	{r4, r5, r6, pc}

08006c16 <_GetDevFunc_Off>:
 8006c16:	b510      	push	{r4, lr}
 8006c18:	4604      	mov	r4, r0
 8006c1a:	f7ff ff57 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2106      	movs	r1, #6
 8006c22:	69a0      	ldr	r0, [r4, #24]
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f7fd bd98 	b.w	800475c <LCD_X_DisplayDriver>

08006c2c <_GetDevFunc_On>:
 8006c2c:	b510      	push	{r4, lr}
 8006c2e:	4604      	mov	r4, r0
 8006c30:	f7ff ff4c 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006c34:	2200      	movs	r2, #0
 8006c36:	2105      	movs	r1, #5
 8006c38:	69a0      	ldr	r0, [r4, #24]
 8006c3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c3e:	f7fd bd8d 	b.w	800475c <LCD_X_DisplayDriver>

08006c42 <GUIDRV_FlexColor_Config>:
 8006c42:	b538      	push	{r3, r4, r5, lr}
 8006c44:	460c      	mov	r4, r1
 8006c46:	4605      	mov	r5, r0
 8006c48:	f7ff ff40 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	68ab      	ldr	r3, [r5, #8]
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c52:	6862      	ldr	r2, [r4, #4]
 8006c54:	631a      	str	r2, [r3, #48]	; 0x30
 8006c56:	68a2      	ldr	r2, [r4, #8]
 8006c58:	635a      	str	r2, [r3, #52]	; 0x34
 8006c5a:	0752      	lsls	r2, r2, #29
 8006c5c:	d507      	bpl.n	8006c6e <GUIDRV_FlexColor_Config+0x2c>
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
 8006c62:	e883 0006 	stmia.w	r3, {r1, r2}
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68d9      	ldr	r1, [r3, #12]
 8006c6a:	60da      	str	r2, [r3, #12]
 8006c6c:	6099      	str	r1, [r3, #8]
 8006c6e:	89a2      	ldrh	r2, [r4, #12]
 8006c70:	849a      	strh	r2, [r3, #36]	; 0x24
 8006c72:	6922      	ldr	r2, [r4, #16]
 8006c74:	b112      	cbz	r2, 8006c7c <GUIDRV_FlexColor_Config+0x3a>
 8006c76:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006c7a:	621a      	str	r2, [r3, #32]
 8006c7c:	bd38      	pop	{r3, r4, r5, pc}

08006c7e <GUIDRV_FlexColor_SetFunc>:
 8006c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c82:	4604      	mov	r4, r0
 8006c84:	461e      	mov	r6, r3
 8006c86:	4617      	mov	r7, r2
 8006c88:	4688      	mov	r8, r1
 8006c8a:	f7ff ff1f 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8006c8e:	68a5      	ldr	r5, [r4, #8]
 8006c90:	2268      	movs	r2, #104	; 0x68
 8006c92:	4641      	mov	r1, r8
 8006c94:	f505 708a 	add.w	r0, r5, #276	; 0x114
 8006c98:	f005 ff8e 	bl	800cbb8 <memcpy>
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	47b8      	blx	r7
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	47b0      	blx	r6
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	4798      	blx	r3
 8006caa:	62a8      	str	r0, [r5, #40]	; 0x28
 8006cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006cb0 <_WriteU16_A1>:
 8006cb0:	0a0b      	lsrs	r3, r1, #8
 8006cb2:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	3071      	adds	r0, #113	; 0x71
 8006cba:	7003      	strb	r3, [r0, #0]
 8006cbc:	f8d0 30af 	ldr.w	r3, [r0, #175]	; 0xaf
 8006cc0:	4718      	bx	r3

08006cc2 <_WriteDataMP>:
 8006cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460e      	mov	r6, r1
 8006cca:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8006ccc:	4615      	mov	r5, r2
 8006cce:	2100      	movs	r1, #0
 8006cd0:	b1a5      	cbz	r5, 8006cfc <_WriteDataMP+0x3a>
 8006cd2:	f836 2b02 	ldrh.w	r2, [r6], #2
 8006cd6:	3101      	adds	r1, #1
 8006cd8:	4603      	mov	r3, r0
 8006cda:	0a17      	lsrs	r7, r2, #8
 8006cdc:	29fa      	cmp	r1, #250	; 0xfa
 8006cde:	f803 7b02 	strb.w	r7, [r3], #2
 8006ce2:	7042      	strb	r2, [r0, #1]
 8006ce4:	d107      	bne.n	8006cf6 <_WriteDataMP+0x34>
 8006ce6:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006cea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006cee:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006cf0:	4798      	blx	r3
 8006cf2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	3d01      	subs	r5, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	e7e9      	b.n	8006cd0 <_WriteDataMP+0xe>
 8006cfc:	b131      	cbz	r1, 8006d0c <_WriteDataMP+0x4a>
 8006cfe:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8006d02:	0049      	lsls	r1, r1, #1
 8006d04:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	4718      	bx	r3
 8006d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d10 <_ReadData>:
 8006d10:	b508      	push	{r3, lr}
 8006d12:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 8006d16:	4798      	blx	r3
 8006d18:	bd08      	pop	{r3, pc}

08006d1a <_WriteData>:
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	f7ff bfc8 	b.w	8006cb0 <_WriteU16_A1>

08006d20 <_FillRect>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	4e3e      	ldr	r6, [pc, #248]	; (8006e20 <_FillRect+0x100>)
 8006d26:	4682      	mov	sl, r0
 8006d28:	6885      	ldr	r5, [r0, #8]
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	6830      	ldr	r0, [r6, #0]
 8006d2e:	4688      	mov	r8, r1
 8006d30:	4614      	mov	r4, r2
 8006d32:	4699      	mov	r9, r3
 8006d34:	7c00      	ldrb	r0, [r0, #16]
 8006d36:	f010 0f01 	tst.w	r0, #1
 8006d3a:	eba3 0001 	sub.w	r0, r3, r1
 8006d3e:	d03d      	beq.n	8006dbc <_FillRect+0x9c>
 8006d40:	0043      	lsls	r3, r0, #1
 8006d42:	1c47      	adds	r7, r0, #1
 8006d44:	9303      	str	r3, [sp, #12]
 8006d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d48:	429c      	cmp	r4, r3
 8006d4a:	dc66      	bgt.n	8006e1a <_FillRect+0xfa>
 8006d4c:	f8d5 b0cc 	ldr.w	fp, [r5, #204]	; 0xcc
 8006d50:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8006d52:	f1bb 0f00 	cmp.w	fp, #0
 8006d56:	d101      	bne.n	8006d5c <_FillRect+0x3c>
 8006d58:	46c3      	mov	fp, r8
 8006d5a:	e007      	b.n	8006d6c <_FillRect+0x4c>
 8006d5c:	e88d 0050 	stmia.w	sp, {r4, r6}
 8006d60:	464b      	mov	r3, r9
 8006d62:	4622      	mov	r2, r4
 8006d64:	4641      	mov	r1, r8
 8006d66:	4650      	mov	r0, sl
 8006d68:	47d8      	blx	fp
 8006d6a:	e00d      	b.n	8006d88 <_FillRect+0x68>
 8006d6c:	45cb      	cmp	fp, r9
 8006d6e:	dc0a      	bgt.n	8006d86 <_FillRect+0x66>
 8006d70:	4659      	mov	r1, fp
 8006d72:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8006d76:	4622      	mov	r2, r4
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4798      	blx	r3
 8006d7c:	f10b 0b01 	add.w	fp, fp, #1
 8006d80:	f826 0b02 	strh.w	r0, [r6], #2
 8006d84:	e7f2      	b.n	8006d6c <_FillRect+0x4c>
 8006d86:	6eee      	ldr	r6, [r5, #108]	; 0x6c
 8006d88:	9a03      	ldr	r2, [sp, #12]
 8006d8a:	1eb3      	subs	r3, r6, #2
 8006d8c:	4416      	add	r6, r2
 8006d8e:	42b3      	cmp	r3, r6
 8006d90:	d005      	beq.n	8006d9e <_FillRect+0x7e>
 8006d92:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006d94:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8006d98:	404a      	eors	r2, r1
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	e7f7      	b.n	8006d8e <_FillRect+0x6e>
 8006d9e:	9400      	str	r4, [sp, #0]
 8006da0:	4622      	mov	r2, r4
 8006da2:	464b      	mov	r3, r9
 8006da4:	4641      	mov	r1, r8
 8006da6:	4628      	mov	r0, r5
 8006da8:	f8d5 60a8 	ldr.w	r6, [r5, #168]	; 0xa8
 8006dac:	47b0      	blx	r6
 8006dae:	463a      	mov	r2, r7
 8006db0:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8006db2:	4628      	mov	r0, r5
 8006db4:	f7ff ff85 	bl	8006cc2 <_WriteDataMP>
 8006db8:	3401      	adds	r4, #1
 8006dba:	e7c4      	b.n	8006d46 <_FillRect+0x26>
 8006dbc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006dbe:	1abc      	subs	r4, r7, r2
 8006dc0:	1c67      	adds	r7, r4, #1
 8006dc2:	fb00 7707 	mla	r7, r0, r7, r7
 8006dc6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006dc8:	9000      	str	r0, [sp, #0]
 8006dca:	4628      	mov	r0, r5
 8006dcc:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
 8006dd0:	47a0      	blx	r4
 8006dd2:	6833      	ldr	r3, [r6, #0]
 8006dd4:	6eae      	ldr	r6, [r5, #104]	; 0x68
 8006dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd8:	681c      	ldr	r4, [r3, #0]
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f3c4 2907 	ubfx	r9, r4, #8, #8
 8006de0:	eb06 0a03 	add.w	sl, r6, r3
 8006de4:	b2e4      	uxtb	r4, r4
 8006de6:	b1c7      	cbz	r7, 8006e1a <_FillRect+0xfa>
 8006de8:	2ff9      	cmp	r7, #249	; 0xf9
 8006dea:	46b8      	mov	r8, r7
 8006dec:	bf28      	it	cs
 8006dee:	f04f 08f9 	movcs.w	r8, #249	; 0xf9
 8006df2:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8006df6:	b93b      	cbnz	r3, 8006e08 <_FillRect+0xe8>
 8006df8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8006dfc:	4650      	mov	r0, sl
 8006dfe:	4798      	blx	r3
 8006e00:	ebc8 0707 	rsb	r7, r8, r7
 8006e04:	2300      	movs	r3, #0
 8006e06:	e7ee      	b.n	8006de6 <_FillRect+0xc6>
 8006e08:	4633      	mov	r3, r6
 8006e0a:	1872      	adds	r2, r6, r1
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d0f3      	beq.n	8006df8 <_FillRect+0xd8>
 8006e10:	f883 9001 	strb.w	r9, [r3, #1]
 8006e14:	f803 4f02 	strb.w	r4, [r3, #2]!
 8006e18:	e7f8      	b.n	8006e0c <_FillRect+0xec>
 8006e1a:	b005      	add	sp, #20
 8006e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e20:	20000014 	.word	0x20000014

08006e24 <_DrawBitmap>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	b08f      	sub	sp, #60	; 0x3c
 8006e2a:	9303      	str	r3, [sp, #12]
 8006e2c:	6883      	ldr	r3, [r0, #8]
 8006e2e:	9005      	str	r0, [sp, #20]
 8006e30:	9309      	str	r3, [sp, #36]	; 0x24
 8006e32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e34:	9106      	str	r1, [sp, #24]
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	9208      	str	r2, [sp, #32]
 8006e3a:	d80c      	bhi.n	8006e56 <_DrawBitmap+0x32>
 8006e3c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8006e40:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e42:	40d3      	lsrs	r3, r2
 8006e44:	07db      	lsls	r3, r3, #31
 8006e46:	d506      	bpl.n	8006e56 <_DrawBitmap+0x32>
 8006e48:	4b97      	ldr	r3, [pc, #604]	; (80070a8 <_DrawBitmap+0x284>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	7c1b      	ldrb	r3, [r3, #16]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d010      	beq.n	8006e78 <_DrawBitmap+0x54>
 8006e56:	9b06      	ldr	r3, [sp, #24]
 8006e58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e5a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006e5c:	1899      	adds	r1, r3, r2
 8006e5e:	9a08      	ldr	r2, [sp, #32]
 8006e60:	9b03      	ldr	r3, [sp, #12]
 8006e62:	4402      	add	r2, r0
 8006e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e66:	18cb      	adds	r3, r1, r3
 8006e68:	3a01      	subs	r2, #1
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	9200      	str	r2, [sp, #0]
 8006e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e70:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 8006e74:	9a08      	ldr	r2, [sp, #32]
 8006e76:	47a0      	blx	r4
 8006e78:	9b03      	ldr	r3, [sp, #12]
 8006e7a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	9f08      	ldr	r7, [sp, #32]
 8006e80:	930d      	str	r3, [sp, #52]	; 0x34
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	4413      	add	r3, r2
 8006e86:	9304      	str	r3, [sp, #16]
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e8c:	4413      	add	r3, r2
 8006e8e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e90:	9b08      	ldr	r3, [sp, #32]
 8006e92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e94:	1afb      	subs	r3, r7, r3
 8006e96:	429a      	cmp	r2, r3
 8006e98:	f340 8251 	ble.w	800733e <_DrawBitmap+0x51a>
 8006e9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	2b0f      	cmp	r3, #15
 8006ea2:	f200 8246 	bhi.w	8007332 <_DrawBitmap+0x50e>
 8006ea6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006eaa:	0010      	.short	0x0010
 8006eac:	024400bf 	.word	0x024400bf
 8006eb0:	02440146 	.word	0x02440146
 8006eb4:	02440244 	.word	0x02440244
 8006eb8:	024401d6 	.word	0x024401d6
 8006ebc:	02440244 	.word	0x02440244
 8006ec0:	02440244 	.word	0x02440244
 8006ec4:	02440244 	.word	0x02440244
 8006ec8:	023f      	.short	0x023f
 8006eca:	9b05      	ldr	r3, [sp, #20]
 8006ecc:	689c      	ldr	r4, [r3, #8]
 8006ece:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ed4:	4b74      	ldr	r3, [pc, #464]	; (80070a8 <_DrawBitmap+0x284>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	7c1b      	ldrb	r3, [r3, #16]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d022      	beq.n	8006f28 <_DrawBitmap+0x104>
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d074      	beq.n	8006fd0 <_DrawBitmap+0x1ac>
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d072      	beq.n	8006fd0 <_DrawBitmap+0x1ac>
 8006eea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006eec:	f04f 0880 	mov.w	r8, #128	; 0x80
 8006ef0:	9e03      	ldr	r6, [sp, #12]
 8006ef2:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006ef4:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8006ef8:	f8b3 9000 	ldrh.w	r9, [r3]
 8006efc:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8006f00:	f89b 2000 	ldrb.w	r2, [fp]
 8006f04:	fa48 f305 	asr.w	r3, r8, r5
 8006f08:	3501      	adds	r5, #1
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	421a      	tst	r2, r3
 8006f0e:	bf14      	ite	ne
 8006f10:	4651      	movne	r1, sl
 8006f12:	4649      	moveq	r1, r9
 8006f14:	f7ff fecc 	bl	8006cb0 <_WriteU16_A1>
 8006f18:	2d08      	cmp	r5, #8
 8006f1a:	bf04      	itt	eq
 8006f1c:	f10b 0b01 	addeq.w	fp, fp, #1
 8006f20:	2500      	moveq	r5, #0
 8006f22:	3e01      	subs	r6, #1
 8006f24:	d1ec      	bne.n	8006f00 <_DrawBitmap+0xdc>
 8006f26:	e204      	b.n	8007332 <_DrawBitmap+0x50e>
 8006f28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006f30:	930a      	str	r3, [sp, #40]	; 0x28
 8006f32:	462b      	mov	r3, r5
 8006f34:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8006f38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006f3c:	f8cd b01c 	str.w	fp, [sp, #28]
 8006f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f42:	f892 9000 	ldrb.w	r9, [r2]
 8006f46:	2280      	movs	r2, #128	; 0x80
 8006f48:	fa42 f208 	asr.w	r2, r2, r8
 8006f4c:	ea19 0902 	ands.w	r9, r9, r2
 8006f50:	d00d      	beq.n	8006f6e <_DrawBitmap+0x14a>
 8006f52:	b91b      	cbnz	r3, 8006f5c <_DrawBitmap+0x138>
 8006f54:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8006f58:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8006f5c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8006f60:	3501      	adds	r5, #1
 8006f62:	f10a 0a02 	add.w	sl, sl, #2
 8006f66:	f82a 3c02 	strh.w	r3, [sl, #-2]
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e013      	b.n	8006f96 <_DrawBitmap+0x172>
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d110      	bne.n	8006f94 <_DrawBitmap+0x170>
 8006f72:	9b07      	ldr	r3, [sp, #28]
 8006f74:	463a      	mov	r2, r7
 8006f76:	9700      	str	r7, [sp, #0]
 8006f78:	4659      	mov	r1, fp
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006f82:	47b0      	blx	r6
 8006f84:	462a      	mov	r2, r5
 8006f86:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f7ff fe9a 	bl	8006cc2 <_WriteDataMP>
 8006f8e:	464d      	mov	r5, r9
 8006f90:	464b      	mov	r3, r9
 8006f92:	e000      	b.n	8006f96 <_DrawBitmap+0x172>
 8006f94:	464b      	mov	r3, r9
 8006f96:	9a07      	ldr	r2, [sp, #28]
 8006f98:	f108 0801 	add.w	r8, r8, #1
 8006f9c:	9903      	ldr	r1, [sp, #12]
 8006f9e:	3201      	adds	r2, #1
 8006fa0:	f1b8 0f08 	cmp.w	r8, #8
 8006fa4:	9207      	str	r2, [sp, #28]
 8006fa6:	bf01      	itttt	eq
 8006fa8:	f04f 0800 	moveq.w	r8, #0
 8006fac:	9a0a      	ldreq	r2, [sp, #40]	; 0x28
 8006fae:	3201      	addeq	r2, #1
 8006fb0:	920a      	streq	r2, [sp, #40]	; 0x28
 8006fb2:	9a04      	ldr	r2, [sp, #16]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	9907      	ldr	r1, [sp, #28]
 8006fb8:	4291      	cmp	r1, r2
 8006fba:	d1c1      	bne.n	8006f40 <_DrawBitmap+0x11c>
 8006fbc:	2d00      	cmp	r5, #0
 8006fbe:	f000 81b8 	beq.w	8007332 <_DrawBitmap+0x50e>
 8006fc2:	9700      	str	r7, [sp, #0]
 8006fc4:	463a      	mov	r2, r7
 8006fc6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8006fca:	4659      	mov	r1, fp
 8006fcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006fce:	e1a5      	b.n	800731c <_DrawBitmap+0x4f8>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	f04f 0b80 	mov.w	fp, #128	; 0x80
 8006fd6:	9a04      	ldr	r2, [sp, #16]
 8006fd8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006fda:	f8dd 806c 	ldr.w	r8, [sp, #108]	; 0x6c
 8006fde:	eb03 0a02 	add.w	sl, r3, r2
 8006fe2:	9307      	str	r3, [sp, #28]
 8006fe4:	9b07      	ldr	r3, [sp, #28]
 8006fe6:	f898 2000 	ldrb.w	r2, [r8]
 8006fea:	ebc3 090a 	rsb	r9, r3, sl
 8006fee:	fa4b f305 	asr.w	r3, fp, r5
 8006ff2:	421a      	tst	r2, r3
 8006ff4:	d00d      	beq.n	8007012 <_DrawBitmap+0x1ee>
 8006ff6:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006ffa:	463a      	mov	r2, r7
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	9805      	ldr	r0, [sp, #20]
 8007000:	4798      	blx	r3
 8007002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007004:	463a      	mov	r2, r7
 8007006:	4649      	mov	r1, r9
 8007008:	4043      	eors	r3, r0
 800700a:	f8d4 60f8 	ldr.w	r6, [r4, #248]	; 0xf8
 800700e:	9805      	ldr	r0, [sp, #20]
 8007010:	47b0      	blx	r6
 8007012:	3501      	adds	r5, #1
 8007014:	9b07      	ldr	r3, [sp, #28]
 8007016:	2d08      	cmp	r5, #8
 8007018:	bf04      	itt	eq
 800701a:	f108 0801 	addeq.w	r8, r8, #1
 800701e:	2500      	moveq	r5, #0
 8007020:	3b01      	subs	r3, #1
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	d1de      	bne.n	8006fe4 <_DrawBitmap+0x1c0>
 8007026:	e184      	b.n	8007332 <_DrawBitmap+0x50e>
 8007028:	9b05      	ldr	r3, [sp, #20]
 800702a:	689c      	ldr	r4, [r3, #8]
 800702c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 817f 	beq.w	8007332 <_DrawBitmap+0x50e>
 8007034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007036:	f893 b000 	ldrb.w	fp, [r3]
 800703a:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <_DrawBitmap+0x284>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	7c1b      	ldrb	r3, [r3, #16]
 8007040:	f013 0303 	ands.w	r3, r3, #3
 8007044:	d00f      	beq.n	8007066 <_DrawBitmap+0x242>
 8007046:	2b02      	cmp	r3, #2
 8007048:	f040 8173 	bne.w	8007332 <_DrawBitmap+0x50e>
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	2600      	movs	r6, #0
 8007050:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8007054:	930a      	str	r3, [sp, #40]	; 0x28
 8007056:	4632      	mov	r2, r6
 8007058:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800705a:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800705e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007060:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007064:	e045      	b.n	80070f2 <_DrawBitmap+0x2ce>
 8007066:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007068:	f04f 08c0 	mov.w	r8, #192	; 0xc0
 800706c:	9e03      	ldr	r6, [sp, #12]
 800706e:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8007072:	f1c5 0303 	rsb	r3, r5, #3
 8007076:	3501      	adds	r5, #1
 8007078:	4620      	mov	r0, r4
 800707a:	005a      	lsls	r2, r3, #1
 800707c:	f1c2 0306 	rsb	r3, r2, #6
 8007080:	fa48 f303 	asr.w	r3, r8, r3
 8007084:	ea03 030b 	and.w	r3, r3, fp
 8007088:	40d3      	lsrs	r3, r2
 800708a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800708c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8007090:	f7ff fe0e 	bl	8006cb0 <_WriteU16_A1>
 8007094:	2d04      	cmp	r5, #4
 8007096:	bf02      	ittt	eq
 8007098:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 800709c:	2500      	moveq	r5, #0
 800709e:	f109 0901 	addeq.w	r9, r9, #1
 80070a2:	3e01      	subs	r6, #1
 80070a4:	d1e5      	bne.n	8007072 <_DrawBitmap+0x24e>
 80070a6:	e144      	b.n	8007332 <_DrawBitmap+0x50e>
 80070a8:	20000014 	.word	0x20000014
 80070ac:	b91a      	cbnz	r2, 80070b6 <_DrawBitmap+0x292>
 80070ae:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 80070b2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80070b6:	9a07      	ldr	r2, [sp, #28]
 80070b8:	3601      	adds	r6, #1
 80070ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070bc:	f10a 0a02 	add.w	sl, sl, #2
 80070c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f82a 3c02 	strh.w	r3, [sl, #-2]
 80070ca:	f109 0901 	add.w	r9, r9, #1
 80070ce:	f108 0801 	add.w	r8, r8, #1
 80070d2:	f1b9 0f04 	cmp.w	r9, #4
 80070d6:	d106      	bne.n	80070e6 <_DrawBitmap+0x2c2>
 80070d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070da:	f04f 0900 	mov.w	r9, #0
 80070de:	f893 b001 	ldrb.w	fp, [r3, #1]
 80070e2:	3301      	adds	r3, #1
 80070e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80070e6:	9b04      	ldr	r3, [sp, #16]
 80070e8:	9903      	ldr	r1, [sp, #12]
 80070ea:	440b      	add	r3, r1
 80070ec:	4598      	cmp	r8, r3
 80070ee:	f000 80a6 	beq.w	800723e <_DrawBitmap+0x41a>
 80070f2:	f1c9 0503 	rsb	r5, r9, #3
 80070f6:	21c0      	movs	r1, #192	; 0xc0
 80070f8:	006d      	lsls	r5, r5, #1
 80070fa:	f1c5 0306 	rsb	r3, r5, #6
 80070fe:	fa41 f303 	asr.w	r3, r1, r3
 8007102:	ea03 030b 	and.w	r3, r3, fp
 8007106:	40eb      	lsrs	r3, r5
 8007108:	9307      	str	r3, [sp, #28]
 800710a:	d1cf      	bne.n	80070ac <_DrawBitmap+0x288>
 800710c:	2a01      	cmp	r2, #1
 800710e:	d110      	bne.n	8007132 <_DrawBitmap+0x30e>
 8007110:	9700      	str	r7, [sp, #0]
 8007112:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8007116:	463a      	mov	r2, r7
 8007118:	990a      	ldr	r1, [sp, #40]	; 0x28
 800711a:	4620      	mov	r0, r4
 800711c:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007120:	47a8      	blx	r5
 8007122:	4632      	mov	r2, r6
 8007124:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007126:	4620      	mov	r0, r4
 8007128:	f7ff fdcb 	bl	8006cc2 <_WriteDataMP>
 800712c:	9e07      	ldr	r6, [sp, #28]
 800712e:	4632      	mov	r2, r6
 8007130:	e7cb      	b.n	80070ca <_DrawBitmap+0x2a6>
 8007132:	9a07      	ldr	r2, [sp, #28]
 8007134:	e7c9      	b.n	80070ca <_DrawBitmap+0x2a6>
 8007136:	9b05      	ldr	r3, [sp, #20]
 8007138:	689c      	ldr	r4, [r3, #8]
 800713a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80f8 	beq.w	8007332 <_DrawBitmap+0x50e>
 8007142:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007144:	f893 b000 	ldrb.w	fp, [r3]
 8007148:	4b7e      	ldr	r3, [pc, #504]	; (8007344 <_DrawBitmap+0x520>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	7c1b      	ldrb	r3, [r3, #16]
 800714e:	f013 0303 	ands.w	r3, r3, #3
 8007152:	d00f      	beq.n	8007174 <_DrawBitmap+0x350>
 8007154:	2b02      	cmp	r3, #2
 8007156:	f040 80ec 	bne.w	8007332 <_DrawBitmap+0x50e>
 800715a:	9b04      	ldr	r3, [sp, #16]
 800715c:	2600      	movs	r6, #0
 800715e:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 8007162:	930a      	str	r3, [sp, #40]	; 0x28
 8007164:	4632      	mov	r2, r6
 8007166:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007168:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800716c:	930b      	str	r3, [sp, #44]	; 0x2c
 800716e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007172:	e042      	b.n	80071fa <_DrawBitmap+0x3d6>
 8007174:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8007176:	f04f 08f0 	mov.w	r8, #240	; 0xf0
 800717a:	9e03      	ldr	r6, [sp, #12]
 800717c:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 8007180:	f1c5 0301 	rsb	r3, r5, #1
 8007184:	3501      	adds	r5, #1
 8007186:	4620      	mov	r0, r4
 8007188:	009a      	lsls	r2, r3, #2
 800718a:	f1c2 0304 	rsb	r3, r2, #4
 800718e:	fa48 f303 	asr.w	r3, r8, r3
 8007192:	ea03 030b 	and.w	r3, r3, fp
 8007196:	40d3      	lsrs	r3, r2
 8007198:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800719a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800719e:	f7ff fd87 	bl	8006cb0 <_WriteU16_A1>
 80071a2:	2d02      	cmp	r5, #2
 80071a4:	bf02      	ittt	eq
 80071a6:	f899 b001 	ldrbeq.w	fp, [r9, #1]
 80071aa:	2500      	moveq	r5, #0
 80071ac:	f109 0901 	addeq.w	r9, r9, #1
 80071b0:	3e01      	subs	r6, #1
 80071b2:	d1e5      	bne.n	8007180 <_DrawBitmap+0x35c>
 80071b4:	e0bd      	b.n	8007332 <_DrawBitmap+0x50e>
 80071b6:	b91a      	cbnz	r2, 80071c0 <_DrawBitmap+0x39c>
 80071b8:	f8d4 a06c 	ldr.w	sl, [r4, #108]	; 0x6c
 80071bc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80071c0:	9a07      	ldr	r2, [sp, #28]
 80071c2:	3601      	adds	r6, #1
 80071c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071c6:	f10a 0a02 	add.w	sl, sl, #2
 80071ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f82a 3c02 	strh.w	r3, [sl, #-2]
 80071d4:	f109 0901 	add.w	r9, r9, #1
 80071d8:	f108 0801 	add.w	r8, r8, #1
 80071dc:	f1b9 0f02 	cmp.w	r9, #2
 80071e0:	d106      	bne.n	80071f0 <_DrawBitmap+0x3cc>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e4:	f04f 0900 	mov.w	r9, #0
 80071e8:	f893 b001 	ldrb.w	fp, [r3, #1]
 80071ec:	3301      	adds	r3, #1
 80071ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	9904      	ldr	r1, [sp, #16]
 80071f4:	440b      	add	r3, r1
 80071f6:	4598      	cmp	r8, r3
 80071f8:	d021      	beq.n	800723e <_DrawBitmap+0x41a>
 80071fa:	f1c9 0501 	rsb	r5, r9, #1
 80071fe:	21f0      	movs	r1, #240	; 0xf0
 8007200:	00ad      	lsls	r5, r5, #2
 8007202:	f1c5 0304 	rsb	r3, r5, #4
 8007206:	fa41 f303 	asr.w	r3, r1, r3
 800720a:	ea03 030b 	and.w	r3, r3, fp
 800720e:	40eb      	lsrs	r3, r5
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	d1d0      	bne.n	80071b6 <_DrawBitmap+0x392>
 8007214:	2a01      	cmp	r2, #1
 8007216:	d110      	bne.n	800723a <_DrawBitmap+0x416>
 8007218:	9700      	str	r7, [sp, #0]
 800721a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800721e:	463a      	mov	r2, r7
 8007220:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007222:	4620      	mov	r0, r4
 8007224:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8007228:	47a8      	blx	r5
 800722a:	4632      	mov	r2, r6
 800722c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff fd47 	bl	8006cc2 <_WriteDataMP>
 8007234:	9e07      	ldr	r6, [sp, #28]
 8007236:	4632      	mov	r2, r6
 8007238:	e7cc      	b.n	80071d4 <_DrawBitmap+0x3b0>
 800723a:	9a07      	ldr	r2, [sp, #28]
 800723c:	e7ca      	b.n	80071d4 <_DrawBitmap+0x3b0>
 800723e:	2e00      	cmp	r6, #0
 8007240:	d077      	beq.n	8007332 <_DrawBitmap+0x50e>
 8007242:	9700      	str	r7, [sp, #0]
 8007244:	463a      	mov	r2, r7
 8007246:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800724a:	4620      	mov	r0, r4
 800724c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800724e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007250:	47a8      	blx	r5
 8007252:	4632      	mov	r2, r6
 8007254:	e065      	b.n	8007322 <_DrawBitmap+0x4fe>
 8007256:	9b05      	ldr	r3, [sp, #20]
 8007258:	689c      	ldr	r4, [r3, #8]
 800725a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800725c:	2b00      	cmp	r3, #0
 800725e:	d068      	beq.n	8007332 <_DrawBitmap+0x50e>
 8007260:	4b38      	ldr	r3, [pc, #224]	; (8007344 <_DrawBitmap+0x520>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	7c1b      	ldrb	r3, [r3, #16]
 8007266:	f013 0303 	ands.w	r3, r3, #3
 800726a:	d00f      	beq.n	800728c <_DrawBitmap+0x468>
 800726c:	2b02      	cmp	r3, #2
 800726e:	d160      	bne.n	8007332 <_DrawBitmap+0x50e>
 8007270:	f8dd a018 	ldr.w	sl, [sp, #24]
 8007274:	2500      	movs	r5, #0
 8007276:	9a03      	ldr	r2, [sp, #12]
 8007278:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 800727c:	462b      	mov	r3, r5
 800727e:	4452      	add	r2, sl
 8007280:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8007284:	f8cd a01c 	str.w	sl, [sp, #28]
 8007288:	920a      	str	r2, [sp, #40]	; 0x28
 800728a:	e024      	b.n	80072d6 <_DrawBitmap+0x4b2>
 800728c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800728e:	9b03      	ldr	r3, [sp, #12]
 8007290:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007292:	1b5b      	subs	r3, r3, r5
 8007294:	4413      	add	r3, r2
 8007296:	2b00      	cmp	r3, #0
 8007298:	dd4b      	ble.n	8007332 <_DrawBitmap+0x50e>
 800729a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800729e:	4620      	mov	r0, r4
 80072a0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80072a2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80072a6:	f7ff fd03 	bl	8006cb0 <_WriteU16_A1>
 80072aa:	e7f0      	b.n	800728e <_DrawBitmap+0x46a>
 80072ac:	b91b      	cbnz	r3, 80072b6 <_DrawBitmap+0x492>
 80072ae:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 80072b2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80072b8:	3501      	adds	r5, #1
 80072ba:	f108 0802 	add.w	r8, r8, #2
 80072be:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 80072c2:	f828 3c02 	strh.w	r3, [r8, #-2]
 80072c6:	2301      	movs	r3, #1
 80072c8:	9a07      	ldr	r2, [sp, #28]
 80072ca:	3201      	adds	r2, #1
 80072cc:	9207      	str	r2, [sp, #28]
 80072ce:	9907      	ldr	r1, [sp, #28]
 80072d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072d2:	4291      	cmp	r1, r2
 80072d4:	d019      	beq.n	800730a <_DrawBitmap+0x4e6>
 80072d6:	f81b 9b01 	ldrb.w	r9, [fp], #1
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	d1e5      	bne.n	80072ac <_DrawBitmap+0x488>
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d110      	bne.n	8007306 <_DrawBitmap+0x4e2>
 80072e4:	9b07      	ldr	r3, [sp, #28]
 80072e6:	463a      	mov	r2, r7
 80072e8:	9700      	str	r7, [sp, #0]
 80072ea:	4651      	mov	r1, sl
 80072ec:	3b01      	subs	r3, #1
 80072ee:	4620      	mov	r0, r4
 80072f0:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80072f4:	47b0      	blx	r6
 80072f6:	462a      	mov	r2, r5
 80072f8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80072fa:	4620      	mov	r0, r4
 80072fc:	f7ff fce1 	bl	8006cc2 <_WriteDataMP>
 8007300:	464d      	mov	r5, r9
 8007302:	464b      	mov	r3, r9
 8007304:	e7e0      	b.n	80072c8 <_DrawBitmap+0x4a4>
 8007306:	464b      	mov	r3, r9
 8007308:	e7de      	b.n	80072c8 <_DrawBitmap+0x4a4>
 800730a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800730c:	9a06      	ldr	r2, [sp, #24]
 800730e:	4413      	add	r3, r2
 8007310:	b17d      	cbz	r5, 8007332 <_DrawBitmap+0x50e>
 8007312:	9700      	str	r7, [sp, #0]
 8007314:	463a      	mov	r2, r7
 8007316:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 800731a:	4651      	mov	r1, sl
 800731c:	4620      	mov	r0, r4
 800731e:	47b0      	blx	r6
 8007320:	462a      	mov	r2, r5
 8007322:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007324:	4620      	mov	r0, r4
 8007326:	e002      	b.n	800732e <_DrawBitmap+0x50a>
 8007328:	9a03      	ldr	r2, [sp, #12]
 800732a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800732c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800732e:	f7ff fcc8 	bl	8006cc2 <_WriteDataMP>
 8007332:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007334:	3701      	adds	r7, #1
 8007336:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007338:	4413      	add	r3, r2
 800733a:	931b      	str	r3, [sp, #108]	; 0x6c
 800733c:	e5a8      	b.n	8006e90 <_DrawBitmap+0x6c>
 800733e:	b00f      	add	sp, #60	; 0x3c
 8007340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007344:	20000014 	.word	0x20000014

08007348 <GUIDRV_FlexColor_SetMode16bppC0B8>:
 8007348:	b510      	push	{r4, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	f7ff fbbe 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 8007350:	4b10      	ldr	r3, [pc, #64]	; (8007394 <GUIDRV_FlexColor_SetMode16bppC0B8+0x4c>)
 8007352:	2108      	movs	r1, #8
 8007354:	68a4      	ldr	r4, [r4, #8]
 8007356:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 800735a:	4620      	mov	r0, r4
 800735c:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <GUIDRV_FlexColor_SetMode16bppC0B8+0x50>)
 800735e:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
 8007362:	4b0e      	ldr	r3, [pc, #56]	; (800739c <GUIDRV_FlexColor_SetMode16bppC0B8+0x54>)
 8007364:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
 8007368:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <GUIDRV_FlexColor_SetMode16bppC0B8+0x58>)
 800736a:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <GUIDRV_FlexColor_SetMode16bppC0B8+0x5c>)
 8007370:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <GUIDRV_FlexColor_SetMode16bppC0B8+0x60>)
 8007376:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 800737a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800737e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8007382:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8007386:	4798      	blx	r3
 8007388:	2310      	movs	r3, #16
 800738a:	63a3      	str	r3, [r4, #56]	; 0x38
 800738c:	4b07      	ldr	r3, [pc, #28]	; (80073ac <GUIDRV_FlexColor_SetMode16bppC0B8+0x64>)
 800738e:	6463      	str	r3, [r4, #68]	; 0x44
 8007390:	bd10      	pop	{r4, pc}
 8007392:	bf00      	nop
 8007394:	08006e25 	.word	0x08006e25
 8007398:	08006d21 	.word	0x08006d21
 800739c:	08006a1b 	.word	0x08006a1b
 80073a0:	08006993 	.word	0x08006993
 80073a4:	08006d11 	.word	0x08006d11
 80073a8:	08006d1b 	.word	0x08006d1b
 80073ac:	0800e800 	.word	0x0800e800

080073b0 <_SetPhysRAMAddr>:
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	4604      	mov	r4, r0
 80073b6:	460e      	mov	r6, r1
 80073b8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80073bc:	212a      	movs	r1, #42	; 0x2a
 80073be:	4615      	mov	r5, r2
 80073c0:	4798      	blx	r3
 80073c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80073c4:	4620      	mov	r0, r4
 80073c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80073ca:	b2b7      	uxth	r7, r6
 80073cc:	4431      	add	r1, r6
 80073ce:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80073d2:	4798      	blx	r3
 80073d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80073d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80073da:	4620      	mov	r0, r4
 80073dc:	4439      	add	r1, r7
 80073de:	b2c9      	uxtb	r1, r1
 80073e0:	4798      	blx	r3
 80073e2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80073e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80073e8:	4620      	mov	r0, r4
 80073ea:	4431      	add	r1, r6
 80073ec:	b2ae      	uxth	r6, r5
 80073ee:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80073f2:	4798      	blx	r3
 80073f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80073f6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80073fa:	4620      	mov	r0, r4
 80073fc:	4439      	add	r1, r7
 80073fe:	b2c9      	uxtb	r1, r1
 8007400:	4798      	blx	r3
 8007402:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007406:	4620      	mov	r0, r4
 8007408:	212b      	movs	r1, #43	; 0x2b
 800740a:	4798      	blx	r3
 800740c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800740e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007412:	4620      	mov	r0, r4
 8007414:	4429      	add	r1, r5
 8007416:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800741a:	4798      	blx	r3
 800741c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800741e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007422:	4620      	mov	r0, r4
 8007424:	4431      	add	r1, r6
 8007426:	b2c9      	uxtb	r1, r1
 8007428:	4798      	blx	r3
 800742a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800742c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007430:	4620      	mov	r0, r4
 8007432:	4429      	add	r1, r5
 8007434:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007438:	4798      	blx	r3
 800743a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800743c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007440:	4620      	mov	r0, r4
 8007442:	4431      	add	r1, r6
 8007444:	b2c9      	uxtb	r1, r1
 8007446:	4798      	blx	r3
 8007448:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800744c:	4620      	mov	r0, r4
 800744e:	212c      	movs	r1, #44	; 0x2c
 8007450:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007454:	4718      	bx	r3

08007456 <_SetRect>:
 8007456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800745a:	4604      	mov	r4, r0
 800745c:	4688      	mov	r8, r1
 800745e:	461f      	mov	r7, r3
 8007460:	212a      	movs	r1, #42	; 0x2a
 8007462:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007466:	4616      	mov	r6, r2
 8007468:	9d06      	ldr	r5, [sp, #24]
 800746a:	4798      	blx	r3
 800746c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800746e:	4620      	mov	r0, r4
 8007470:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007474:	4441      	add	r1, r8
 8007476:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800747a:	4798      	blx	r3
 800747c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800747e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007482:	4620      	mov	r0, r4
 8007484:	4441      	add	r1, r8
 8007486:	b2c9      	uxtb	r1, r1
 8007488:	4798      	blx	r3
 800748a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800748c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007490:	4620      	mov	r0, r4
 8007492:	4439      	add	r1, r7
 8007494:	f3c1 210f 	ubfx	r1, r1, #8, #16
 8007498:	4798      	blx	r3
 800749a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800749c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80074a0:	4620      	mov	r0, r4
 80074a2:	4439      	add	r1, r7
 80074a4:	b2c9      	uxtb	r1, r1
 80074a6:	4798      	blx	r3
 80074a8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80074ac:	4620      	mov	r0, r4
 80074ae:	212b      	movs	r1, #43	; 0x2b
 80074b0:	4798      	blx	r3
 80074b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80074b8:	4620      	mov	r0, r4
 80074ba:	4431      	add	r1, r6
 80074bc:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80074c0:	4798      	blx	r3
 80074c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074c4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80074c8:	4620      	mov	r0, r4
 80074ca:	4431      	add	r1, r6
 80074cc:	b2c9      	uxtb	r1, r1
 80074ce:	4798      	blx	r3
 80074d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80074d6:	4620      	mov	r0, r4
 80074d8:	4429      	add	r1, r5
 80074da:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80074de:	4798      	blx	r3
 80074e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80074e6:	4620      	mov	r0, r4
 80074e8:	4429      	add	r1, r5
 80074ea:	b2c9      	uxtb	r1, r1
 80074ec:	4798      	blx	r3
 80074ee:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80074f2:	4620      	mov	r0, r4
 80074f4:	212c      	movs	r1, #44	; 0x2c
 80074f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fa:	4718      	bx	r3

080074fc <_SetOrientation>:
 80074fc:	4a0e      	ldr	r2, [pc, #56]	; (8007538 <_SetOrientation+0x3c>)
 80074fe:	b513      	push	{r0, r1, r4, lr}
 8007500:	4604      	mov	r4, r0
 8007502:	6851      	ldr	r1, [r2, #4]
 8007504:	6810      	ldr	r0, [r2, #0]
 8007506:	466b      	mov	r3, sp
 8007508:	c303      	stmia	r3!, {r0, r1}
 800750a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800750e:	4620      	mov	r0, r4
 8007510:	2136      	movs	r1, #54	; 0x36
 8007512:	4798      	blx	r3
 8007514:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007516:	aa02      	add	r2, sp, #8
 8007518:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800751a:	4620      	mov	r0, r4
 800751c:	4413      	add	r3, r2
 800751e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 8007522:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8007526:	4319      	orrs	r1, r3
 8007528:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800752c:	b289      	uxth	r1, r1
 800752e:	b002      	add	sp, #8
 8007530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007534:	4718      	bx	r3
 8007536:	bf00      	nop
 8007538:	0800d074 	.word	0x0800d074

0800753c <_ReadPixel_16bpp_B8>:
 800753c:	b513      	push	{r0, r1, r4, lr}
 800753e:	4604      	mov	r4, r0
 8007540:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8007544:	202e      	movs	r0, #46	; 0x2e
 8007546:	4798      	blx	r3
 8007548:	6a21      	ldr	r1, [r4, #32]
 800754a:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
 800754e:	4668      	mov	r0, sp
 8007550:	3103      	adds	r1, #3
 8007552:	4798      	blx	r3
 8007554:	6a23      	ldr	r3, [r4, #32]
 8007556:	eb0d 0203 	add.w	r2, sp, r3
 800755a:	f81d 3003 	ldrb.w	r3, [sp, r3]
 800755e:	7850      	ldrb	r0, [r2, #1]
 8007560:	08db      	lsrs	r3, r3, #3
 8007562:	0880      	lsrs	r0, r0, #2
 8007564:	02db      	lsls	r3, r3, #11
 8007566:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
 800756a:	7890      	ldrb	r0, [r2, #2]
 800756c:	ea43 00d0 	orr.w	r0, r3, r0, lsr #3
 8007570:	b002      	add	sp, #8
 8007572:	bd10      	pop	{r4, pc}

08007574 <_ReadPixel_16bpp_B16_I>:
 8007574:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007576:	4604      	mov	r4, r0
 8007578:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 800757c:	202e      	movs	r0, #46	; 0x2e
 800757e:	4798      	blx	r3
 8007580:	6a21      	ldr	r1, [r4, #32]
 8007582:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
 8007586:	4668      	mov	r0, sp
 8007588:	3102      	adds	r1, #2
 800758a:	4798      	blx	r3
 800758c:	6a22      	ldr	r2, [r4, #32]
 800758e:	eb0d 0342 	add.w	r3, sp, r2, lsl #1
 8007592:	885b      	ldrh	r3, [r3, #2]
 8007594:	f3c3 00c4 	ubfx	r0, r3, #3, #5
 8007598:	115b      	asrs	r3, r3, #5
 800759a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800759e:	4303      	orrs	r3, r0
 80075a0:	f83d 0012 	ldrh.w	r0, [sp, r2, lsl #1]
 80075a4:	0200      	lsls	r0, r0, #8
 80075a6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80075aa:	4318      	orrs	r0, r3
 80075ac:	b004      	add	sp, #16
 80075ae:	bd10      	pop	{r4, pc}

080075b0 <_SetReg_B8>:
 80075b0:	b570      	push	{r4, r5, r6, lr}
 80075b2:	4605      	mov	r5, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80075ba:	0a08      	lsrs	r0, r1, #8
 80075bc:	4798      	blx	r3
 80075be:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 80075c2:	b2e0      	uxtb	r0, r4
 80075c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075c8:	4718      	bx	r3

080075ca <_SetReg_B16>:
 80075ca:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
 80075ce:	4608      	mov	r0, r1
 80075d0:	4718      	bx	r3

080075d2 <_WritePara_B8>:
 80075d2:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 80075d6:	b2c8      	uxtb	r0, r1
 80075d8:	4718      	bx	r3

080075da <_WritePara_B16>:
 80075da:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
 80075de:	4608      	mov	r0, r1
 80075e0:	4718      	bx	r3
	...

080075e4 <_SetInterface>:
 80075e4:	2908      	cmp	r1, #8
 80075e6:	d002      	beq.n	80075ee <_SetInterface+0xa>
 80075e8:	2910      	cmp	r1, #16
 80075ea:	d005      	beq.n	80075f8 <_SetInterface+0x14>
 80075ec:	4770      	bx	lr
 80075ee:	4b06      	ldr	r3, [pc, #24]	; (8007608 <_SetInterface+0x24>)
 80075f0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80075f4:	4b05      	ldr	r3, [pc, #20]	; (800760c <_SetInterface+0x28>)
 80075f6:	e003      	b.n	8007600 <_SetInterface+0x1c>
 80075f8:	4b05      	ldr	r3, [pc, #20]	; (8007610 <_SetInterface+0x2c>)
 80075fa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <_SetInterface+0x30>)
 8007600:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	080075b1 	.word	0x080075b1
 800760c:	080075d3 	.word	0x080075d3
 8007610:	080075cb 	.word	0x080075cb
 8007614:	080075db 	.word	0x080075db

08007618 <_ReadRect_16bpp_B8>:
 8007618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800761a:	b085      	sub	sp, #20
 800761c:	6885      	ldr	r5, [r0, #8]
 800761e:	1a58      	subs	r0, r3, r1
 8007620:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007622:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007624:	1abc      	subs	r4, r7, r2
 8007626:	9700      	str	r7, [sp, #0]
 8007628:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 800762c:	3401      	adds	r4, #1
 800762e:	fb00 4404 	mla	r4, r0, r4, r4
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
 800763a:	202e      	movs	r0, #46	; 0x2e
 800763c:	4798      	blx	r3
 800763e:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 8007642:	6a29      	ldr	r1, [r5, #32]
 8007644:	a802      	add	r0, sp, #8
 8007646:	4798      	blx	r3
 8007648:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
 800764c:	2103      	movs	r1, #3
 800764e:	a802      	add	r0, sp, #8
 8007650:	4798      	blx	r3
 8007652:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8007656:	3c01      	subs	r4, #1
 8007658:	ea4f 0293 	mov.w	r2, r3, lsr #2
 800765c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8007660:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007664:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8007668:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800766c:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8007670:	ea43 03d2 	orr.w	r3, r3, r2, lsr #3
 8007674:	f826 3b02 	strh.w	r3, [r6], #2
 8007678:	d1e6      	bne.n	8007648 <_ReadRect_16bpp_B8+0x30>
 800767a:	b005      	add	sp, #20
 800767c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800767e <_ReadRect_16bpp_B16_I>:
 800767e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007680:	b087      	sub	sp, #28
 8007682:	6885      	ldr	r5, [r0, #8]
 8007684:	1a58      	subs	r0, r3, r1
 8007686:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8007688:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800768a:	1abc      	subs	r4, r7, r2
 800768c:	9700      	str	r7, [sp, #0]
 800768e:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 8007692:	3401      	adds	r4, #1
 8007694:	fb00 4404 	mla	r4, r0, r4, r4
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	f8d5 3134 	ldr.w	r3, [r5, #308]	; 0x134
 80076a0:	202e      	movs	r0, #46	; 0x2e
 80076a2:	4798      	blx	r3
 80076a4:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 80076a8:	6a29      	ldr	r1, [r5, #32]
 80076aa:	a802      	add	r0, sp, #8
 80076ac:	4798      	blx	r3
 80076ae:	f8d5 3150 	ldr.w	r3, [r5, #336]	; 0x150
 80076b2:	2102      	movs	r1, #2
 80076b4:	a802      	add	r0, sp, #8
 80076b6:	4798      	blx	r3
 80076b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80076bc:	3c01      	subs	r4, #1
 80076be:	f3c3 02c4 	ubfx	r2, r3, #3, #5
 80076c2:	ea4f 1363 	mov.w	r3, r3, asr #5
 80076c6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80076ca:	ea43 0302 	orr.w	r3, r3, r2
 80076ce:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80076d2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80076d6:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80076da:	ea43 0302 	orr.w	r3, r3, r2
 80076de:	f826 3b02 	strh.w	r3, [r6], #2
 80076e2:	d1e4      	bne.n	80076ae <_ReadRect_16bpp_B16_I+0x30>
 80076e4:	b007      	add	sp, #28
 80076e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076e8 <GUIDRV_FlexColor_SetFunc66709>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	4604      	mov	r4, r0
 80076ec:	f7ff f9ee 	bl	8006acc <GUIDRV_FlexColor__InitOnce>
 80076f0:	4a11      	ldr	r2, [pc, #68]	; (8007738 <GUIDRV_FlexColor_SetFunc66709+0x50>)
 80076f2:	2100      	movs	r1, #0
 80076f4:	68a3      	ldr	r3, [r4, #8]
 80076f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 80076fa:	4a10      	ldr	r2, [pc, #64]	; (800773c <GUIDRV_FlexColor_SetFunc66709+0x54>)
 80076fc:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8007700:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007704:	4a0e      	ldr	r2, [pc, #56]	; (8007740 <GUIDRV_FlexColor_SetFunc66709+0x58>)
 8007706:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
 800770a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800770e:	4a0d      	ldr	r2, [pc, #52]	; (8007744 <GUIDRV_FlexColor_SetFunc66709+0x5c>)
 8007710:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007714:	4a0c      	ldr	r2, [pc, #48]	; (8007748 <GUIDRV_FlexColor_SetFunc66709+0x60>)
 8007716:	6810      	ldr	r0, [r2, #0]
 8007718:	6852      	ldr	r2, [r2, #4]
 800771a:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
 800771e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 8007722:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8007724:	4809      	ldr	r0, [pc, #36]	; (800774c <GUIDRV_FlexColor_SetFunc66709+0x64>)
 8007726:	f022 0203 	bic.w	r2, r2, #3
 800772a:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
 800772e:	84da      	strh	r2, [r3, #38]	; 0x26
 8007730:	4a07      	ldr	r2, [pc, #28]	; (8007750 <GUIDRV_FlexColor_SetFunc66709+0x68>)
 8007732:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007736:	bd10      	pop	{r4, pc}
 8007738:	080073b1 	.word	0x080073b1
 800773c:	08007457 	.word	0x08007457
 8007740:	080074fd 	.word	0x080074fd
 8007744:	0800753d 	.word	0x0800753d
 8007748:	20000030 	.word	0x20000030
 800774c:	08007619 	.word	0x08007619
 8007750:	080075e5 	.word	0x080075e5

08007754 <_GetDevData>:
 8007754:	2901      	cmp	r1, #1
 8007756:	4802      	ldr	r0, [pc, #8]	; (8007760 <_GetDevData+0xc>)
 8007758:	bf18      	it	ne
 800775a:	2000      	movne	r0, #0
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	0800e800 	.word	0x0800e800

08007764 <_GetDevFunc>:
 8007764:	2916      	cmp	r1, #22
 8007766:	4802      	ldr	r0, [pc, #8]	; (8007770 <_GetDevFunc+0xc>)
 8007768:	bf18      	it	ne
 800776a:	2000      	movne	r0, #0
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	08008269 	.word	0x08008269

08007774 <_SetOrg>:
 8007774:	6800      	ldr	r0, [r0, #0]
 8007776:	b110      	cbz	r0, 800777e <_SetOrg+0xa>
 8007778:	68c3      	ldr	r3, [r0, #12]
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	4718      	bx	r3
 800777e:	4770      	bx	lr

08007780 <_GetRect>:
 8007780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007782:	6880      	ldr	r0, [r0, #8]
 8007784:	460d      	mov	r5, r1
 8007786:	f7fd fab1 	bl	8004cec <GUI_ALLOC_LockH>
 800778a:	4602      	mov	r2, r0
 800778c:	a802      	add	r0, sp, #8
 800778e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8007792:	8914      	ldrh	r4, [r2, #8]
 8007794:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 8007798:	802b      	strh	r3, [r5, #0]
 800779a:	441c      	add	r4, r3
 800779c:	8953      	ldrh	r3, [r2, #10]
 800779e:	3c01      	subs	r4, #1
 80077a0:	f840 2d04 	str.w	r2, [r0, #-4]!
 80077a4:	440b      	add	r3, r1
 80077a6:	8069      	strh	r1, [r5, #2]
 80077a8:	80ac      	strh	r4, [r5, #4]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	80eb      	strh	r3, [r5, #6]
 80077ae:	f7fd faab 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80077b2:	b003      	add	sp, #12
 80077b4:	bd30      	pop	{r4, r5, pc}
	...

080077b8 <_XY2PTR>:
 80077b8:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <_XY2PTR+0x3c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077be:	4606      	mov	r6, r0
 80077c0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80077c2:	460d      	mov	r5, r1
 80077c4:	f7fd fa92 	bl	8004cec <GUI_ALLOC_LockH>
 80077c8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80077cc:	ab02      	add	r3, sp, #8
 80077ce:	68c4      	ldr	r4, [r0, #12]
 80077d0:	1a69      	subs	r1, r5, r1
 80077d2:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80077d6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80077da:	1b76      	subs	r6, r6, r5
 80077dc:	0076      	lsls	r6, r6, #1
 80077de:	3618      	adds	r6, #24
 80077e0:	fb04 6501 	mla	r5, r4, r1, r6
 80077e4:	1944      	adds	r4, r0, r5
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fd fa8e 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80077ec:	4620      	mov	r0, r4
 80077ee:	b002      	add	sp, #8
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
 80077f2:	bf00      	nop
 80077f4:	20000014 	.word	0x20000014

080077f8 <_GetPixelIndex>:
 80077f8:	b508      	push	{r3, lr}
 80077fa:	4608      	mov	r0, r1
 80077fc:	4611      	mov	r1, r2
 80077fe:	f7ff ffdb 	bl	80077b8 <_XY2PTR>
 8007802:	8800      	ldrh	r0, [r0, #0]
 8007804:	bd08      	pop	{r3, pc}
	...

08007808 <_XorPixel>:
 8007808:	4b14      	ldr	r3, [pc, #80]	; (800785c <_XorPixel+0x54>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800780e:	4616      	mov	r6, r2
 8007810:	460d      	mov	r5, r1
 8007812:	4607      	mov	r7, r0
 8007814:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007816:	f7fd fa69 	bl	8004cec <GUI_ALLOC_LockH>
 800781a:	4631      	mov	r1, r6
 800781c:	9000      	str	r0, [sp, #0]
 800781e:	4628      	mov	r0, r5
 8007820:	f7ff ffca 	bl	80077b8 <_XY2PTR>
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4604      	mov	r4, r0
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	4798      	blx	r3
 800782c:	8823      	ldrh	r3, [r4, #0]
 800782e:	4058      	eors	r0, r3
 8007830:	9b00      	ldr	r3, [sp, #0]
 8007832:	8020      	strh	r0, [r4, #0]
 8007834:	6958      	ldr	r0, [r3, #20]
 8007836:	b160      	cbz	r0, 8007852 <_XorPixel+0x4a>
 8007838:	f7fd fa58 	bl	8004cec <GUI_ALLOC_LockH>
 800783c:	ac02      	add	r4, sp, #8
 800783e:	6883      	ldr	r3, [r0, #8]
 8007840:	4632      	mov	r2, r6
 8007842:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007846:	4629      	mov	r1, r5
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4798      	blx	r3
 800784c:	4620      	mov	r0, r4
 800784e:	f7fd fa5b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007852:	4668      	mov	r0, sp
 8007854:	f7fd fa58 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007858:	b003      	add	sp, #12
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	20000014 	.word	0x20000014

08007860 <_SetPixelIndex>:
 8007860:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007862:	461c      	mov	r4, r3
 8007864:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <_SetPixelIndex+0x48>)
 8007866:	460d      	mov	r5, r1
 8007868:	4616      	mov	r6, r2
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800786e:	f7fd fa3d 	bl	8004cec <GUI_ALLOC_LockH>
 8007872:	4631      	mov	r1, r6
 8007874:	9000      	str	r0, [sp, #0]
 8007876:	4628      	mov	r0, r5
 8007878:	f7ff ff9e 	bl	80077b8 <_XY2PTR>
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	8004      	strh	r4, [r0, #0]
 8007880:	6958      	ldr	r0, [r3, #20]
 8007882:	b160      	cbz	r0, 800789e <_SetPixelIndex+0x3e>
 8007884:	f7fd fa32 	bl	8004cec <GUI_ALLOC_LockH>
 8007888:	ac02      	add	r4, sp, #8
 800788a:	6883      	ldr	r3, [r0, #8]
 800788c:	4632      	mov	r2, r6
 800788e:	f844 0d04 	str.w	r0, [r4, #-4]!
 8007892:	4629      	mov	r1, r5
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4798      	blx	r3
 8007898:	4620      	mov	r0, r4
 800789a:	f7fd fa35 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800789e:	4668      	mov	r0, sp
 80078a0:	f7fd fa32 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80078a4:	b002      	add	sp, #8
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	20000014 	.word	0x20000014

080078ac <_DrawVLine>:
 80078ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	4c2c      	ldr	r4, [pc, #176]	; (8007964 <_DrawVLine+0xb8>)
 80078b2:	461e      	mov	r6, r3
 80078b4:	4680      	mov	r8, r0
 80078b6:	460f      	mov	r7, r1
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	4615      	mov	r5, r2
 80078bc:	46a1      	mov	r9, r4
 80078be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80078c0:	f7fd fa14 	bl	8004cec <GUI_ALLOC_LockH>
 80078c4:	9000      	str	r0, [sp, #0]
 80078c6:	6940      	ldr	r0, [r0, #20]
 80078c8:	b108      	cbz	r0, 80078ce <_DrawVLine+0x22>
 80078ca:	f7fd fa0f 	bl	8004cec <GUI_ALLOC_LockH>
 80078ce:	9001      	str	r0, [sp, #4]
 80078d0:	4629      	mov	r1, r5
 80078d2:	4638      	mov	r0, r7
 80078d4:	f7ff ff70 	bl	80077b8 <_XY2PTR>
 80078d8:	f8d9 3000 	ldr.w	r3, [r9]
 80078dc:	4604      	mov	r4, r0
 80078de:	7c1a      	ldrb	r2, [r3, #16]
 80078e0:	07d2      	lsls	r2, r2, #31
 80078e2:	d51f      	bpl.n	8007924 <_DrawVLine+0x78>
 80078e4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	4798      	blx	r3
 80078ec:	fa1f f880 	uxth.w	r8, r0
 80078f0:	9801      	ldr	r0, [sp, #4]
 80078f2:	b120      	cbz	r0, 80078fe <_DrawVLine+0x52>
 80078f4:	6883      	ldr	r3, [r0, #8]
 80078f6:	462a      	mov	r2, r5
 80078f8:	4639      	mov	r1, r7
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4798      	blx	r3
 80078fe:	8823      	ldrh	r3, [r4, #0]
 8007900:	3501      	adds	r5, #1
 8007902:	ea88 0303 	eor.w	r3, r8, r3
 8007906:	42b5      	cmp	r5, r6
 8007908:	8023      	strh	r3, [r4, #0]
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	441c      	add	r4, r3
 8007910:	ddee      	ble.n	80078f0 <_DrawVLine+0x44>
 8007912:	4668      	mov	r0, sp
 8007914:	f7fd f9f8 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	b303      	cbz	r3, 800795e <_DrawVLine+0xb2>
 800791c:	a801      	add	r0, sp, #4
 800791e:	f7fd f9f3 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007922:	e01c      	b.n	800795e <_DrawVLine+0xb2>
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	9a00      	ldr	r2, [sp, #0]
 8007928:	f8d3 9000 	ldr.w	r9, [r3]
 800792c:	9b01      	ldr	r3, [sp, #4]
 800792e:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8007932:	b163      	cbz	r3, 800794e <_DrawVLine+0xa2>
 8007934:	9801      	ldr	r0, [sp, #4]
 8007936:	462a      	mov	r2, r5
 8007938:	3501      	adds	r5, #1
 800793a:	4639      	mov	r1, r7
 800793c:	6883      	ldr	r3, [r0, #8]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4798      	blx	r3
 8007942:	42ae      	cmp	r6, r5
 8007944:	f8a4 9000 	strh.w	r9, [r4]
 8007948:	4444      	add	r4, r8
 800794a:	daf3      	bge.n	8007934 <_DrawVLine+0x88>
 800794c:	e7e1      	b.n	8007912 <_DrawVLine+0x66>
 800794e:	1b75      	subs	r5, r6, r5
 8007950:	3501      	adds	r5, #1
 8007952:	3d01      	subs	r5, #1
 8007954:	f8a4 9000 	strh.w	r9, [r4]
 8007958:	4444      	add	r4, r8
 800795a:	d1fa      	bne.n	8007952 <_DrawVLine+0xa6>
 800795c:	e7d9      	b.n	8007912 <_DrawVLine+0x66>
 800795e:	b003      	add	sp, #12
 8007960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007964:	20000014 	.word	0x20000014

08007968 <_FillRect>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	4f2a      	ldr	r7, [pc, #168]	; (8007a18 <_FillRect+0xb0>)
 800796e:	461d      	mov	r5, r3
 8007970:	4614      	mov	r4, r2
 8007972:	b087      	sub	sp, #28
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	4689      	mov	r9, r1
 8007978:	4683      	mov	fp, r0
 800797a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800797c:	ebc9 0505 	rsb	r5, r9, r5
 8007980:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	f105 0a01 	add.w	sl, r5, #1
 8007988:	9202      	str	r2, [sp, #8]
 800798a:	f7fd f9af 	bl	8004cec <GUI_ALLOC_LockH>
 800798e:	4621      	mov	r1, r4
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	4648      	mov	r0, r9
 8007994:	f7ff ff10 	bl	80077b8 <_XY2PTR>
 8007998:	9a04      	ldr	r2, [sp, #16]
 800799a:	4606      	mov	r6, r0
 800799c:	68d3      	ldr	r3, [r2, #12]
 800799e:	6950      	ldr	r0, [r2, #20]
 80079a0:	9303      	str	r3, [sp, #12]
 80079a2:	b188      	cbz	r0, 80079c8 <_FillRect+0x60>
 80079a4:	f7fd f9a2 	bl	8004cec <GUI_ALLOC_LockH>
 80079a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079aa:	f10d 0818 	add.w	r8, sp, #24
 80079ae:	4622      	mov	r2, r4
 80079b0:	1b1b      	subs	r3, r3, r4
 80079b2:	4649      	mov	r1, r9
 80079b4:	f848 0d04 	str.w	r0, [r8, #-4]!
 80079b8:	3301      	adds	r3, #1
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	4653      	mov	r3, sl
 80079be:	f000 fbff 	bl	80081c0 <GUI_USAGE_AddRect>
 80079c2:	4640      	mov	r0, r8
 80079c4:	f7fd f9a0 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80079c8:	006d      	lsls	r5, r5, #1
 80079ca:	f8bd 8008 	ldrh.w	r8, [sp, #8]
 80079ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079d0:	429c      	cmp	r4, r3
 80079d2:	dc1a      	bgt.n	8007a0a <_FillRect+0xa2>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	7c1b      	ldrb	r3, [r3, #16]
 80079d8:	07db      	lsls	r3, r3, #31
 80079da:	d50d      	bpl.n	80079f8 <_FillRect+0x90>
 80079dc:	f8db 3010 	ldr.w	r3, [fp, #16]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	4798      	blx	r3
 80079e4:	1eb3      	subs	r3, r6, #2
 80079e6:	b280      	uxth	r0, r0
 80079e8:	1971      	adds	r1, r6, r5
 80079ea:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 80079ee:	4042      	eors	r2, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	801a      	strh	r2, [r3, #0]
 80079f4:	d1f9      	bne.n	80079ea <_FillRect+0x82>
 80079f6:	e004      	b.n	8007a02 <_FillRect+0x9a>
 80079f8:	4652      	mov	r2, sl
 80079fa:	4641      	mov	r1, r8
 80079fc:	4630      	mov	r0, r6
 80079fe:	f7fe f885 	bl	8005b0c <GUI__memset16>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	3401      	adds	r4, #1
 8007a06:	441e      	add	r6, r3
 8007a08:	e7e1      	b.n	80079ce <_FillRect+0x66>
 8007a0a:	a804      	add	r0, sp, #16
 8007a0c:	f7fd f97c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007a10:	b007      	add	sp, #28
 8007a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a16:	bf00      	nop
 8007a18:	20000014 	.word	0x20000014

08007a1c <_DrawHLine>:
 8007a1c:	b507      	push	{r0, r1, r2, lr}
 8007a1e:	9200      	str	r2, [sp, #0]
 8007a20:	f7ff ffa2 	bl	8007968 <_FillRect>
 8007a24:	b003      	add	sp, #12
 8007a26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007a2c <_DrawBitmap>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	4d99      	ldr	r5, [pc, #612]	; (8007c98 <_DrawBitmap+0x26c>)
 8007a32:	b091      	sub	sp, #68	; 0x44
 8007a34:	460e      	mov	r6, r1
 8007a36:	9302      	str	r3, [sp, #8]
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	900a      	str	r0, [sp, #40]	; 0x28
 8007a3c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007a3e:	9205      	str	r2, [sp, #20]
 8007a40:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8007a42:	f7fd f953 	bl	8004cec <GUI_ALLOC_LockH>
 8007a46:	900e      	str	r0, [sp, #56]	; 0x38
 8007a48:	6940      	ldr	r0, [r0, #20]
 8007a4a:	b108      	cbz	r0, 8007a50 <_DrawBitmap+0x24>
 8007a4c:	f7fd f94e 	bl	8004cec <GUI_ALLOC_LockH>
 8007a50:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a52:	a810      	add	r0, sp, #64	; 0x40
 8007a54:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	9306      	str	r3, [sp, #24]
 8007a5c:	f7fd f954 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007a60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007a62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007a64:	eb06 0b03 	add.w	fp, r6, r3
 8007a68:	b150      	cbz	r0, 8007a80 <_DrawBitmap+0x54>
 8007a6a:	682b      	ldr	r3, [r5, #0]
 8007a6c:	7c1b      	ldrb	r3, [r3, #16]
 8007a6e:	0799      	lsls	r1, r3, #30
 8007a70:	d106      	bne.n	8007a80 <_DrawBitmap+0x54>
 8007a72:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007a74:	4659      	mov	r1, fp
 8007a76:	9a05      	ldr	r2, [sp, #20]
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	9b02      	ldr	r3, [sp, #8]
 8007a7c:	f000 fba0 	bl	80081c0 <GUI_USAGE_AddRect>
 8007a80:	9905      	ldr	r1, [sp, #20]
 8007a82:	4658      	mov	r0, fp
 8007a84:	f7ff fe98 	bl	80077b8 <_XY2PTR>
 8007a88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a8a:	4605      	mov	r5, r0
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d134      	bne.n	8007afa <_DrawBitmap+0xce>
 8007a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a92:	b133      	cbz	r3, 8007aa2 <_DrawBitmap+0x76>
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	2600      	movs	r6, #0
 8007a98:	f8df 9204 	ldr.w	r9, [pc, #516]	; 8007ca0 <_DrawBitmap+0x274>
 8007a9c:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007aa0:	e012      	b.n	8007ac8 <_DrawBitmap+0x9c>
 8007aa2:	4b7e      	ldr	r3, [pc, #504]	; (8007c9c <_DrawBitmap+0x270>)
 8007aa4:	681e      	ldr	r6, [r3, #0]
 8007aa6:	2e00      	cmp	r6, #0
 8007aa8:	d0f4      	beq.n	8007a94 <_DrawBitmap+0x68>
 8007aaa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007aac:	4621      	mov	r1, r4
 8007aae:	9a02      	ldr	r2, [sp, #8]
 8007ab0:	9301      	str	r3, [sp, #4]
 8007ab2:	9b06      	ldr	r3, [sp, #24]
 8007ab4:	9300      	str	r3, [sp, #0]
 8007ab6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ab8:	47b0      	blx	r6
 8007aba:	e35b      	b.n	8008174 <_DrawBitmap+0x748>
 8007abc:	b944      	cbnz	r4, 8007ad0 <_DrawBitmap+0xa4>
 8007abe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007ac0:	3601      	adds	r6, #1
 8007ac2:	441c      	add	r4, r3
 8007ac4:	9b06      	ldr	r3, [sp, #24]
 8007ac6:	441d      	add	r5, r3
 8007ac8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007aca:	429e      	cmp	r6, r3
 8007acc:	dbf6      	blt.n	8007abc <_DrawBitmap+0x90>
 8007ace:	e34c      	b.n	800816a <_DrawBitmap+0x73e>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	d0f4      	beq.n	8007abe <_DrawBitmap+0x92>
 8007ad4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007ad6:	4642      	mov	r2, r8
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f8d9 3000 	ldr.w	r3, [r9]
 8007ae0:	4798      	blx	r3
 8007ae2:	2f00      	cmp	r7, #0
 8007ae4:	d0eb      	beq.n	8007abe <_DrawBitmap+0x92>
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4659      	mov	r1, fp
 8007aea:	9a05      	ldr	r2, [sp, #20]
 8007aec:	4638      	mov	r0, r7
 8007aee:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8007af2:	4432      	add	r2, r6
 8007af4:	9b02      	ldr	r3, [sp, #8]
 8007af6:	47d0      	blx	sl
 8007af8:	e7e1      	b.n	8007abe <_DrawBitmap+0x92>
 8007afa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007afc:	2b17      	cmp	r3, #23
 8007afe:	dd44      	ble.n	8007b8a <_DrawBitmap+0x15e>
 8007b00:	f06f 0303 	mvn.w	r3, #3
 8007b04:	f04f 0800 	mov.w	r8, #0
 8007b08:	fb03 f30b 	mul.w	r3, r3, fp
 8007b0c:	9307      	str	r3, [sp, #28]
 8007b0e:	f06f 0301 	mvn.w	r3, #1
 8007b12:	fb03 f30b 	mul.w	r3, r3, fp
 8007b16:	9304      	str	r3, [sp, #16]
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	445b      	add	r3, fp
 8007b1c:	9308      	str	r3, [sp, #32]
 8007b1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007b20:	4598      	cmp	r8, r3
 8007b22:	f280 8322 	bge.w	800816a <_DrawBitmap+0x73e>
 8007b26:	9b05      	ldr	r3, [sp, #20]
 8007b28:	eb03 0908 	add.w	r9, r3, r8
 8007b2c:	b934      	cbnz	r4, 8007b3c <_DrawBitmap+0x110>
 8007b2e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007b30:	f108 0801 	add.w	r8, r8, #1
 8007b34:	441c      	add	r4, r3
 8007b36:	9b06      	ldr	r3, [sp, #24]
 8007b38:	441d      	add	r5, r3
 8007b3a:	e7f0      	b.n	8007b1e <_DrawBitmap+0xf2>
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	d0f6      	beq.n	8007b2e <_DrawBitmap+0x102>
 8007b40:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8007b42:	b137      	cbz	r7, 8007b52 <_DrawBitmap+0x126>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	464a      	mov	r2, r9
 8007b48:	4659      	mov	r1, fp
 8007b4a:	4638      	mov	r0, r7
 8007b4c:	685e      	ldr	r6, [r3, #4]
 8007b4e:	9b02      	ldr	r3, [sp, #8]
 8007b50:	47b0      	blx	r6
 8007b52:	9b07      	ldr	r3, [sp, #28]
 8007b54:	465e      	mov	r6, fp
 8007b56:	eb04 0a03 	add.w	sl, r4, r3
 8007b5a:	9b04      	ldr	r3, [sp, #16]
 8007b5c:	18eb      	adds	r3, r5, r3
 8007b5e:	9303      	str	r3, [sp, #12]
 8007b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b62:	f85a 0026 	ldr.w	r0, [sl, r6, lsl #2]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4798      	blx	r3
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
 8007b72:	b12f      	cbz	r7, 8007b80 <_DrawBitmap+0x154>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	464a      	mov	r2, r9
 8007b78:	4631      	mov	r1, r6
 8007b7a:	4638      	mov	r0, r7
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4798      	blx	r3
 8007b80:	3601      	adds	r6, #1
 8007b82:	9b08      	ldr	r3, [sp, #32]
 8007b84:	429e      	cmp	r6, r3
 8007b86:	d1eb      	bne.n	8007b60 <_DrawBitmap+0x134>
 8007b88:	e7d1      	b.n	8007b2e <_DrawBitmap+0x102>
 8007b8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	f040 8089 	bne.w	8007ca4 <_DrawBitmap+0x278>
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	3c01      	subs	r4, #1
 8007b96:	9e05      	ldr	r6, [sp, #20]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007c98 <_DrawBitmap+0x26c>
 8007b9e:	9307      	str	r3, [sp, #28]
 8007ba0:	f06f 0301 	mvn.w	r3, #1
 8007ba4:	fb03 f30b 	mul.w	r3, r3, fp
 8007ba8:	9303      	str	r3, [sp, #12]
 8007baa:	9b02      	ldr	r3, [sp, #8]
 8007bac:	445b      	add	r3, fp
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	9b05      	ldr	r3, [sp, #20]
 8007bb2:	1c61      	adds	r1, r4, #1
 8007bb4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007bb6:	1af3      	subs	r3, r6, r3
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	f340 82d6 	ble.w	800816a <_DrawBitmap+0x73e>
 8007bbe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d036      	beq.n	8007c32 <_DrawBitmap+0x206>
 8007bc4:	f8d9 3000 	ldr.w	r3, [r9]
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	f013 0303 	ands.w	r3, r3, #3
 8007bce:	d009      	beq.n	8007be4 <_DrawBitmap+0x1b8>
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d15a      	bne.n	8007c8a <_DrawBitmap+0x25e>
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	46a2      	mov	sl, r4
 8007bd8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007bdc:	465f      	mov	r7, fp
 8007bde:	18eb      	adds	r3, r5, r3
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	e021      	b.n	8007c28 <_DrawBitmap+0x1fc>
 8007be4:	9b07      	ldr	r3, [sp, #28]
 8007be6:	4622      	mov	r2, r4
 8007be8:	18e9      	adds	r1, r5, r3
 8007bea:	462b      	mov	r3, r5
 8007bec:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8007bf0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007bf2:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8007bf6:	f823 0b02 	strh.w	r0, [r3], #2
 8007bfa:	428b      	cmp	r3, r1
 8007bfc:	d1f6      	bne.n	8007bec <_DrawBitmap+0x1c0>
 8007bfe:	e044      	b.n	8007c8a <_DrawBitmap+0x25e>
 8007c00:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c06:	9a08      	ldr	r2, [sp, #32]
 8007c08:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8007c0c:	f1b8 0f00 	cmp.w	r8, #0
 8007c10:	d006      	beq.n	8007c20 <_DrawBitmap+0x1f4>
 8007c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c16:	4632      	mov	r2, r6
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4798      	blx	r3
 8007c20:	3701      	adds	r7, #1
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	42bb      	cmp	r3, r7
 8007c26:	d030      	beq.n	8007c8a <_DrawBitmap+0x25e>
 8007c28:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0f7      	beq.n	8007c20 <_DrawBitmap+0x1f4>
 8007c30:	e7e6      	b.n	8007c00 <_DrawBitmap+0x1d4>
 8007c32:	f8d9 3000 	ldr.w	r3, [r9]
 8007c36:	7c1b      	ldrb	r3, [r3, #16]
 8007c38:	f013 0303 	ands.w	r3, r3, #3
 8007c3c:	d009      	beq.n	8007c52 <_DrawBitmap+0x226>
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d123      	bne.n	8007c8a <_DrawBitmap+0x25e>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	46a2      	mov	sl, r4
 8007c46:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8007c4a:	465f      	mov	r7, fp
 8007c4c:	18eb      	adds	r3, r5, r3
 8007c4e:	9308      	str	r3, [sp, #32]
 8007c50:	e016      	b.n	8007c80 <_DrawBitmap+0x254>
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <_DrawBitmap+0x274>)
 8007c54:	4628      	mov	r0, r5
 8007c56:	9a02      	ldr	r2, [sp, #8]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4798      	blx	r3
 8007c5c:	e015      	b.n	8007c8a <_DrawBitmap+0x25e>
 8007c5e:	9a08      	ldr	r2, [sp, #32]
 8007c60:	f822 3017 	strh.w	r3, [r2, r7, lsl #1]
 8007c64:	f1b8 0f00 	cmp.w	r8, #0
 8007c68:	d006      	beq.n	8007c78 <_DrawBitmap+0x24c>
 8007c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	4640      	mov	r0, r8
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4798      	blx	r3
 8007c78:	3701      	adds	r7, #1
 8007c7a:	9b04      	ldr	r3, [sp, #16]
 8007c7c:	429f      	cmp	r7, r3
 8007c7e:	d004      	beq.n	8007c8a <_DrawBitmap+0x25e>
 8007c80:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f7      	beq.n	8007c78 <_DrawBitmap+0x24c>
 8007c88:	e7e9      	b.n	8007c5e <_DrawBitmap+0x232>
 8007c8a:	9b06      	ldr	r3, [sp, #24]
 8007c8c:	3601      	adds	r6, #1
 8007c8e:	441d      	add	r5, r3
 8007c90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007c92:	441c      	add	r4, r3
 8007c94:	e78c      	b.n	8007bb0 <_DrawBitmap+0x184>
 8007c96:	bf00      	nop
 8007c98:	20000014 	.word	0x20000014
 8007c9c:	200001d4 	.word	0x200001d4
 8007ca0:	20000020 	.word	0x20000020
 8007ca4:	4baf      	ldr	r3, [pc, #700]	; (8007f64 <_DrawBitmap+0x538>)
 8007ca6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	bf08      	it	eq
 8007cac:	461a      	moveq	r2, r3
 8007cae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cb0:	005b      	lsls	r3, r3, #1
 8007cb2:	921f      	str	r2, [sp, #124]	; 0x7c
 8007cb4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	930c      	str	r3, [sp, #48]	; 0x30
 8007cbc:	1c63      	adds	r3, r4, #1
 8007cbe:	9303      	str	r3, [sp, #12]
 8007cc0:	1c83      	adds	r3, r0, #2
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	9b05      	ldr	r3, [sp, #20]
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	9a05      	ldr	r2, [sp, #20]
 8007ccc:	1e9c      	subs	r4, r3, #2
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007cd4:	9b04      	ldr	r3, [sp, #16]
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	f340 8245 	ble.w	800816a <_DrawBitmap+0x73e>
 8007ce0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	f000 80c7 	beq.w	8007e76 <_DrawBitmap+0x44a>
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	f000 8167 	beq.w	8007fbc <_DrawBitmap+0x590>
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	f040 822f 	bne.w	8008152 <_DrawBitmap+0x726>
 8007cf4:	4b9c      	ldr	r3, [pc, #624]	; (8007f68 <_DrawBitmap+0x53c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007cfa:	f7fc fff7 	bl	8004cec <GUI_ALLOC_LockH>
 8007cfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d00:	4a9a      	ldr	r2, [pc, #616]	; (8007f6c <_DrawBitmap+0x540>)
 8007d02:	f1c3 0508 	rsb	r5, r3, #8
 8007d06:	9b03      	ldr	r3, [sp, #12]
 8007d08:	900e      	str	r0, [sp, #56]	; 0x38
 8007d0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007d0e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8007d12:	5cd6      	ldrb	r6, [r2, r3]
 8007d14:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d16:	9f02      	ldr	r7, [sp, #8]
 8007d18:	411e      	asrs	r6, r3
 8007d1a:	4b93      	ldr	r3, [pc, #588]	; (8007f68 <_DrawBitmap+0x53c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	7c1b      	ldrb	r3, [r3, #16]
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d01f      	beq.n	8007d68 <_DrawBitmap+0x33c>
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d058      	beq.n	8007dde <_DrawBitmap+0x3b2>
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d056      	beq.n	8007dde <_DrawBitmap+0x3b2>
 8007d30:	42bd      	cmp	r5, r7
 8007d32:	4622      	mov	r2, r4
 8007d34:	bf28      	it	cs
 8007d36:	463d      	movcs	r5, r7
 8007d38:	1b7f      	subs	r7, r7, r5
 8007d3a:	462b      	mov	r3, r5
 8007d3c:	f006 0101 	and.w	r1, r6, #1
 8007d40:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8007d42:	3b01      	subs	r3, #1
 8007d44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007d48:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8007d4c:	f822 1b02 	strh.w	r1, [r2], #2
 8007d50:	d1f4      	bne.n	8007d3c <_DrawBitmap+0x310>
 8007d52:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007d56:	2f00      	cmp	r7, #0
 8007d58:	f000 8089 	beq.w	8007e6e <_DrawBitmap+0x442>
 8007d5c:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007d60:	2508      	movs	r5, #8
 8007d62:	4a82      	ldr	r2, [pc, #520]	; (8007f6c <_DrawBitmap+0x540>)
 8007d64:	5cd6      	ldrb	r6, [r2, r3]
 8007d66:	e7e3      	b.n	8007d30 <_DrawBitmap+0x304>
 8007d68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d6a:	46d8      	mov	r8, fp
 8007d6c:	889b      	ldrh	r3, [r3, #4]
 8007d6e:	9308      	str	r3, [sp, #32]
 8007d70:	42bd      	cmp	r5, r7
 8007d72:	bf28      	it	cs
 8007d74:	463d      	movcs	r5, r7
 8007d76:	1b7f      	subs	r7, r7, r5
 8007d78:	f1b9 0f00 	cmp.w	r9, #0
 8007d7c:	d023      	beq.n	8007dc6 <_DrawBitmap+0x39a>
 8007d7e:	b91e      	cbnz	r6, 8007d88 <_DrawBitmap+0x35c>
 8007d80:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007d84:	44a8      	add	r8, r5
 8007d86:	e022      	b.n	8007dce <_DrawBitmap+0x3a2>
 8007d88:	07f2      	lsls	r2, r6, #31
 8007d8a:	d509      	bpl.n	8007da0 <_DrawBitmap+0x374>
 8007d8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007d90:	4641      	mov	r1, r8
 8007d92:	9a04      	ldr	r2, [sp, #16]
 8007d94:	4648      	mov	r0, r9
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4798      	blx	r3
 8007d9a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8007d9e:	8023      	strh	r3, [r4, #0]
 8007da0:	3d01      	subs	r5, #1
 8007da2:	f108 0801 	add.w	r8, r8, #1
 8007da6:	f104 0402 	add.w	r4, r4, #2
 8007daa:	d010      	beq.n	8007dce <_DrawBitmap+0x3a2>
 8007dac:	0876      	lsrs	r6, r6, #1
 8007dae:	e7e6      	b.n	8007d7e <_DrawBitmap+0x352>
 8007db0:	07f3      	lsls	r3, r6, #31
 8007db2:	f104 0402 	add.w	r4, r4, #2
 8007db6:	bf44      	itt	mi
 8007db8:	f8bd 3020 	ldrhmi.w	r3, [sp, #32]
 8007dbc:	f824 3c02 	strhmi.w	r3, [r4, #-2]
 8007dc0:	3d01      	subs	r5, #1
 8007dc2:	d004      	beq.n	8007dce <_DrawBitmap+0x3a2>
 8007dc4:	0876      	lsrs	r6, r6, #1
 8007dc6:	2e00      	cmp	r6, #0
 8007dc8:	d1f2      	bne.n	8007db0 <_DrawBitmap+0x384>
 8007dca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007dce:	2f00      	cmp	r7, #0
 8007dd0:	d04d      	beq.n	8007e6e <_DrawBitmap+0x442>
 8007dd2:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8007dd6:	2508      	movs	r5, #8
 8007dd8:	4a64      	ldr	r2, [pc, #400]	; (8007f6c <_DrawBitmap+0x540>)
 8007dda:	5cd6      	ldrb	r6, [r2, r3]
 8007ddc:	e7c8      	b.n	8007d70 <_DrawBitmap+0x344>
 8007dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de0:	46d8      	mov	r8, fp
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	4798      	blx	r3
 8007de8:	b283      	uxth	r3, r0
 8007dea:	9309      	str	r3, [sp, #36]	; 0x24
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	9308      	str	r3, [sp, #32]
 8007df0:	42bd      	cmp	r5, r7
 8007df2:	bf28      	it	cs
 8007df4:	463d      	movcs	r5, r7
 8007df6:	1b7f      	subs	r7, r7, r5
 8007df8:	f1b9 0f00 	cmp.w	r9, #0
 8007dfc:	d01b      	beq.n	8007e36 <_DrawBitmap+0x40a>
 8007dfe:	eb08 0305 	add.w	r3, r8, r5
 8007e02:	46a2      	mov	sl, r4
 8007e04:	930d      	str	r3, [sp, #52]	; 0x34
 8007e06:	07f0      	lsls	r0, r6, #31
 8007e08:	d50c      	bpl.n	8007e24 <_DrawBitmap+0x3f8>
 8007e0a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007e0e:	4641      	mov	r1, r8
 8007e10:	9a04      	ldr	r2, [sp, #16]
 8007e12:	4648      	mov	r0, r9
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4798      	blx	r3
 8007e18:	f8ba 3000 	ldrh.w	r3, [sl]
 8007e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e1e:	4053      	eors	r3, r2
 8007e20:	f8aa 3000 	strh.w	r3, [sl]
 8007e24:	f108 0801 	add.w	r8, r8, #1
 8007e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e2a:	f10a 0a02 	add.w	sl, sl, #2
 8007e2e:	0876      	lsrs	r6, r6, #1
 8007e30:	4598      	cmp	r8, r3
 8007e32:	d1e8      	bne.n	8007e06 <_DrawBitmap+0x3da>
 8007e34:	e00f      	b.n	8007e56 <_DrawBitmap+0x42a>
 8007e36:	462a      	mov	r2, r5
 8007e38:	4623      	mov	r3, r4
 8007e3a:	07f1      	lsls	r1, r6, #31
 8007e3c:	f103 0302 	add.w	r3, r3, #2
 8007e40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007e44:	bf41      	itttt	mi
 8007e46:	f833 1c02 	ldrhmi.w	r1, [r3, #-2]
 8007e4a:	9809      	ldrmi	r0, [sp, #36]	; 0x24
 8007e4c:	4041      	eormi	r1, r0
 8007e4e:	f823 1c02 	strhmi.w	r1, [r3, #-2]
 8007e52:	3a01      	subs	r2, #1
 8007e54:	d1f1      	bne.n	8007e3a <_DrawBitmap+0x40e>
 8007e56:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007e5a:	b147      	cbz	r7, 8007e6e <_DrawBitmap+0x442>
 8007e5c:	9b08      	ldr	r3, [sp, #32]
 8007e5e:	2508      	movs	r5, #8
 8007e60:	4a42      	ldr	r2, [pc, #264]	; (8007f6c <_DrawBitmap+0x540>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	5cd6      	ldrb	r6, [r2, r3]
 8007e66:	9b08      	ldr	r3, [sp, #32]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	9308      	str	r3, [sp, #32]
 8007e6c:	e7c0      	b.n	8007df0 <_DrawBitmap+0x3c4>
 8007e6e:	a80e      	add	r0, sp, #56	; 0x38
 8007e70:	f7fc ff4a 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8007e74:	e16d      	b.n	8008152 <_DrawBitmap+0x726>
 8007e76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e78:	f1c3 0504 	rsb	r5, r3, #4
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 8007e82:	b2ed      	uxtb	r5, r5
 8007e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e86:	409e      	lsls	r6, r3
 8007e88:	4b37      	ldr	r3, [pc, #220]	; (8007f68 <_DrawBitmap+0x53c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	b2f6      	uxtb	r6, r6
 8007e8e:	7c1b      	ldrb	r3, [r3, #16]
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d009      	beq.n	8007eac <_DrawBitmap+0x480>
 8007e98:	d30a      	bcc.n	8007eb0 <_DrawBitmap+0x484>
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	f040 8159 	bne.w	8008152 <_DrawBitmap+0x726>
 8007ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ea2:	465f      	mov	r7, fp
 8007ea4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007ea8:	9308      	str	r3, [sp, #32]
 8007eaa:	e036      	b.n	8007f1a <_DrawBitmap+0x4ee>
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	e07e      	b.n	8007fae <_DrawBitmap+0x582>
 8007eb0:	9b02      	ldr	r3, [sp, #8]
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	bfc8      	it	gt
 8007eb8:	b2dd      	uxtbgt	r5, r3
 8007eba:	1b5b      	subs	r3, r3, r5
 8007ebc:	462a      	mov	r2, r5
 8007ebe:	09b0      	lsrs	r0, r6, #6
 8007ec0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8007ec2:	3a01      	subs	r2, #1
 8007ec4:	00b6      	lsls	r6, r6, #2
 8007ec6:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8007eca:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007ece:	b2f6      	uxtb	r6, r6
 8007ed0:	f821 0b02 	strh.w	r0, [r1], #2
 8007ed4:	d1f3      	bne.n	8007ebe <_DrawBitmap+0x492>
 8007ed6:	3d01      	subs	r5, #1
 8007ed8:	b2ed      	uxtb	r5, r5
 8007eda:	3501      	adds	r5, #1
 8007edc:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 8136 	beq.w	8008152 <_DrawBitmap+0x726>
 8007ee6:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8007eea:	2504      	movs	r5, #4
 8007eec:	e7e1      	b.n	8007eb2 <_DrawBitmap+0x486>
 8007eee:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8007ef2:	d125      	bne.n	8007f40 <_DrawBitmap+0x514>
 8007ef4:	f109 0901 	add.w	r9, r9, #1
 8007ef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007efa:	00b6      	lsls	r6, r6, #2
 8007efc:	4599      	cmp	r9, r3
 8007efe:	b2f6      	uxtb	r6, r6
 8007f00:	d1f5      	bne.n	8007eee <_DrawBitmap+0x4c2>
 8007f02:	1c6b      	adds	r3, r5, #1
 8007f04:	3701      	adds	r7, #1
 8007f06:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007f0a:	442f      	add	r7, r5
 8007f0c:	f1b8 0f00 	cmp.w	r8, #0
 8007f10:	f000 811f 	beq.w	8008152 <_DrawBitmap+0x726>
 8007f14:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8007f18:	2504      	movs	r5, #4
 8007f1a:	4545      	cmp	r5, r8
 8007f1c:	f107 0301 	add.w	r3, r7, #1
 8007f20:	46b9      	mov	r9, r7
 8007f22:	bfc8      	it	gt
 8007f24:	fa5f f588 	uxtbgt.w	r5, r8
 8007f28:	ebc5 0808 	rsb	r8, r5, r8
 8007f2c:	3d01      	subs	r5, #1
 8007f2e:	b2ed      	uxtb	r5, r5
 8007f30:	442b      	add	r3, r5
 8007f32:	930d      	str	r3, [sp, #52]	; 0x34
 8007f34:	f06f 0301 	mvn.w	r3, #1
 8007f38:	fb03 4307 	mla	r3, r3, r7, r4
 8007f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3e:	e7d6      	b.n	8007eee <_DrawBitmap+0x4c2>
 8007f40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007f42:	09b3      	lsrs	r3, r6, #6
 8007f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f4a:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
 8007f4e:	9b08      	ldr	r3, [sp, #32]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0cf      	beq.n	8007ef4 <_DrawBitmap+0x4c8>
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	4649      	mov	r1, r9
 8007f58:	9a04      	ldr	r2, [sp, #16]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	9808      	ldr	r0, [sp, #32]
 8007f5e:	4798      	blx	r3
 8007f60:	e7c8      	b.n	8007ef4 <_DrawBitmap+0x4c8>
 8007f62:	bf00      	nop
 8007f64:	0800e834 	.word	0x0800e834
 8007f68:	20000014 	.word	0x20000014
 8007f6c:	0800e88c 	.word	0x0800e88c
 8007f70:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8007f74:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007f78:	ea4f 0686 	mov.w	r6, r6, lsl #2
 8007f7c:	f101 0102 	add.w	r1, r1, #2
 8007f80:	bf18      	it	ne
 8007f82:	f831 0c02 	ldrhne.w	r0, [r1, #-2]
 8007f86:	b2f6      	uxtb	r6, r6
 8007f88:	bf1c      	itt	ne
 8007f8a:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 8007f8e:	f821 0c02 	strhne.w	r0, [r1, #-2]
 8007f92:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8007f96:	d1eb      	bne.n	8007f70 <_DrawBitmap+0x544>
 8007f98:	3d01      	subs	r5, #1
 8007f9a:	b2ed      	uxtb	r5, r5
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80d5 	beq.w	8008152 <_DrawBitmap+0x726>
 8007fa8:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 8007fac:	2504      	movs	r5, #4
 8007fae:	429d      	cmp	r5, r3
 8007fb0:	4621      	mov	r1, r4
 8007fb2:	bfc8      	it	gt
 8007fb4:	b2dd      	uxtbgt	r5, r3
 8007fb6:	1b5b      	subs	r3, r3, r5
 8007fb8:	462a      	mov	r2, r5
 8007fba:	e7d9      	b.n	8007f70 <_DrawBitmap+0x544>
 8007fbc:	9b03      	ldr	r3, [sp, #12]
 8007fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fc0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007fc4:	4093      	lsls	r3, r2
 8007fc6:	4a6d      	ldr	r2, [pc, #436]	; (800817c <_DrawBitmap+0x750>)
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	b2dd      	uxtb	r5, r3
 8007fcc:	7c12      	ldrb	r2, [r2, #16]
 8007fce:	f002 0203 	and.w	r2, r2, #3
 8007fd2:	2a01      	cmp	r2, #1
 8007fd4:	d003      	beq.n	8007fde <_DrawBitmap+0x5b2>
 8007fd6:	d308      	bcc.n	8007fea <_DrawBitmap+0x5be>
 8007fd8:	2a02      	cmp	r2, #2
 8007fda:	d03a      	beq.n	8008052 <_DrawBitmap+0x626>
 8007fdc:	e0b9      	b.n	8008152 <_DrawBitmap+0x726>
 8007fde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fe0:	9a02      	ldr	r2, [sp, #8]
 8007fe2:	f1c3 0302 	rsb	r3, r3, #2
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	e0ac      	b.n	8008144 <_DrawBitmap+0x718>
 8007fea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fec:	b15b      	cbz	r3, 8008006 <_DrawBitmap+0x5da>
 8007fee:	092d      	lsrs	r5, r5, #4
 8007ff0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ff2:	9a03      	ldr	r2, [sp, #12]
 8007ff4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007ff8:	4692      	mov	sl, r2
 8007ffa:	8023      	strh	r3, [r4, #0]
 8007ffc:	9b02      	ldr	r3, [sp, #8]
 8007ffe:	9c07      	ldr	r4, [sp, #28]
 8008000:	3b01      	subs	r3, #1
 8008002:	7815      	ldrb	r5, [r2, #0]
 8008004:	e000      	b.n	8008008 <_DrawBitmap+0x5dc>
 8008006:	9b02      	ldr	r3, [sp, #8]
 8008008:	2b01      	cmp	r3, #1
 800800a:	dd19      	ble.n	8008040 <_DrawBitmap+0x614>
 800800c:	1059      	asrs	r1, r3, #1
 800800e:	1d22      	adds	r2, r4, #4
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	eb0a 0001 	add.w	r0, sl, r1
 8008018:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800801a:	092e      	lsrs	r6, r5, #4
 800801c:	f005 050f 	and.w	r5, r5, #15
 8008020:	3204      	adds	r2, #4
 8008022:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8008026:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800802a:	f822 6c08 	strh.w	r6, [r2, #-8]
 800802e:	463e      	mov	r6, r7
 8008030:	f822 5c06 	strh.w	r5, [r2, #-6]
 8008034:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8008038:	4582      	cmp	sl, r0
 800803a:	d1ed      	bne.n	8008018 <_DrawBitmap+0x5ec>
 800803c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 8086 	beq.w	8008152 <_DrawBitmap+0x726>
 8008046:	092d      	lsrs	r5, r5, #4
 8008048:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800804a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800804e:	8023      	strh	r3, [r4, #0]
 8008050:	e07f      	b.n	8008152 <_DrawBitmap+0x726>
 8008052:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008054:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8008056:	b1c2      	cbz	r2, 800808a <_DrawBitmap+0x65e>
 8008058:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800805c:	d00b      	beq.n	8008076 <_DrawBitmap+0x64a>
 800805e:	092d      	lsrs	r5, r5, #4
 8008060:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008062:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008066:	8023      	strh	r3, [r4, #0]
 8008068:	b12e      	cbz	r6, 8008076 <_DrawBitmap+0x64a>
 800806a:	68b3      	ldr	r3, [r6, #8]
 800806c:	4659      	mov	r1, fp
 800806e:	9a04      	ldr	r2, [sp, #16]
 8008070:	4630      	mov	r0, r6
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4798      	blx	r3
 8008076:	9b02      	ldr	r3, [sp, #8]
 8008078:	f10b 0701 	add.w	r7, fp, #1
 800807c:	9c07      	ldr	r4, [sp, #28]
 800807e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008082:	9b03      	ldr	r3, [sp, #12]
 8008084:	781d      	ldrb	r5, [r3, #0]
 8008086:	469a      	mov	sl, r3
 8008088:	e00f      	b.n	80080aa <_DrawBitmap+0x67e>
 800808a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800808e:	465f      	mov	r7, fp
 8008090:	e00b      	b.n	80080aa <_DrawBitmap+0x67e>
 8008092:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 8008096:	d10c      	bne.n	80080b2 <_DrawBitmap+0x686>
 8008098:	f015 050f 	ands.w	r5, r5, #15
 800809c:	d117      	bne.n	80080ce <_DrawBitmap+0x6a2>
 800809e:	3404      	adds	r4, #4
 80080a0:	3702      	adds	r7, #2
 80080a2:	f1a8 0802 	sub.w	r8, r8, #2
 80080a6:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 80080aa:	f1b8 0f01 	cmp.w	r8, #1
 80080ae:	dcf0      	bgt.n	8008092 <_DrawBitmap+0x666>
 80080b0:	e01a      	b.n	80080e8 <_DrawBitmap+0x6bc>
 80080b2:	092b      	lsrs	r3, r5, #4
 80080b4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80080b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ba:	8023      	strh	r3, [r4, #0]
 80080bc:	2e00      	cmp	r6, #0
 80080be:	d0eb      	beq.n	8008098 <_DrawBitmap+0x66c>
 80080c0:	68b3      	ldr	r3, [r6, #8]
 80080c2:	4639      	mov	r1, r7
 80080c4:	9a04      	ldr	r2, [sp, #16]
 80080c6:	4630      	mov	r0, r6
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4798      	blx	r3
 80080cc:	e7e4      	b.n	8008098 <_DrawBitmap+0x66c>
 80080ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80080d4:	8063      	strh	r3, [r4, #2]
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	d0e1      	beq.n	800809e <_DrawBitmap+0x672>
 80080da:	68b3      	ldr	r3, [r6, #8]
 80080dc:	1c79      	adds	r1, r7, #1
 80080de:	9a04      	ldr	r2, [sp, #16]
 80080e0:	4630      	mov	r0, r6
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4798      	blx	r3
 80080e6:	e7da      	b.n	800809e <_DrawBitmap+0x672>
 80080e8:	f1b8 0f00 	cmp.w	r8, #0
 80080ec:	d031      	beq.n	8008152 <_DrawBitmap+0x726>
 80080ee:	092d      	lsrs	r5, r5, #4
 80080f0:	d02f      	beq.n	8008152 <_DrawBitmap+0x726>
 80080f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80080f4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80080f8:	8023      	strh	r3, [r4, #0]
 80080fa:	b356      	cbz	r6, 8008152 <_DrawBitmap+0x726>
 80080fc:	68b3      	ldr	r3, [r6, #8]
 80080fe:	4639      	mov	r1, r7
 8008100:	9a04      	ldr	r2, [sp, #16]
 8008102:	4630      	mov	r0, r6
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4798      	blx	r3
 8008108:	e023      	b.n	8008152 <_DrawBitmap+0x726>
 800810a:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800810e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8008112:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008116:	f100 0002 	add.w	r0, r0, #2
 800811a:	bf18      	it	ne
 800811c:	f830 6c02 	ldrhne.w	r6, [r0, #-2]
 8008120:	b2ed      	uxtb	r5, r5
 8008122:	bf1c      	itt	ne
 8008124:	f086 06ff 	eorne.w	r6, r6, #255	; 0xff
 8008128:	f820 6c02 	strhne.w	r6, [r0, #-2]
 800812c:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008130:	d1eb      	bne.n	800810a <_DrawBitmap+0x6de>
 8008132:	3b01      	subs	r3, #1
 8008134:	b2db      	uxtb	r3, r3
 8008136:	3301      	adds	r3, #1
 8008138:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800813c:	b14a      	cbz	r2, 8008152 <_DrawBitmap+0x726>
 800813e:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 8008142:	2302      	movs	r3, #2
 8008144:	4293      	cmp	r3, r2
 8008146:	4620      	mov	r0, r4
 8008148:	bfc8      	it	gt
 800814a:	b2d3      	uxtbgt	r3, r2
 800814c:	1ad2      	subs	r2, r2, r3
 800814e:	4619      	mov	r1, r3
 8008150:	e7db      	b.n	800810a <_DrawBitmap+0x6de>
 8008152:	9b04      	ldr	r3, [sp, #16]
 8008154:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008156:	3301      	adds	r3, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	9b03      	ldr	r3, [sp, #12]
 800815c:	4413      	add	r3, r2
 800815e:	9a06      	ldr	r2, [sp, #24]
 8008160:	9303      	str	r3, [sp, #12]
 8008162:	9b07      	ldr	r3, [sp, #28]
 8008164:	4413      	add	r3, r2
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	e5ae      	b.n	8007cc8 <_DrawBitmap+0x29c>
 800816a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800816c:	b113      	cbz	r3, 8008174 <_DrawBitmap+0x748>
 800816e:	a80f      	add	r0, sp, #60	; 0x3c
 8008170:	f7fc fdca 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008174:	b011      	add	sp, #68	; 0x44
 8008176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817a:	bf00      	nop
 800817c:	20000014 	.word	0x20000014

08008180 <_GetDevProp>:
 8008180:	2908      	cmp	r1, #8
 8008182:	d004      	beq.n	800818e <_GetDevProp+0xe>
 8008184:	6800      	ldr	r0, [r0, #0]
 8008186:	b120      	cbz	r0, 8008192 <_GetDevProp+0x12>
 8008188:	68c3      	ldr	r3, [r0, #12]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	4718      	bx	r3
 800818e:	2010      	movs	r0, #16
 8008190:	4770      	bx	lr
 8008192:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008196:	4770      	bx	lr

08008198 <GUI_USAGE_DecUseCnt>:
 8008198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800819a:	4605      	mov	r5, r0
 800819c:	f7fc fda6 	bl	8004cec <GUI_ALLOC_LockH>
 80081a0:	8984      	ldrh	r4, [r0, #12]
 80081a2:	ab02      	add	r3, sp, #8
 80081a4:	3c01      	subs	r4, #1
 80081a6:	f843 0d04 	str.w	r0, [r3, #-4]!
 80081aa:	b224      	sxth	r4, r4
 80081ac:	8184      	strh	r4, [r0, #12]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fc fdaa 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80081b4:	b914      	cbnz	r4, 80081bc <GUI_USAGE_DecUseCnt+0x24>
 80081b6:	4628      	mov	r0, r5
 80081b8:	f7fc fdc6 	bl	8004d48 <GUI_ALLOC_Free>
 80081bc:	b003      	add	sp, #12
 80081be:	bd30      	pop	{r4, r5, pc}

080081c0 <GUI_USAGE_AddRect>:
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	9c08      	ldr	r4, [sp, #32]
 80081c6:	4605      	mov	r5, r0
 80081c8:	4688      	mov	r8, r1
 80081ca:	4699      	mov	r9, r3
 80081cc:	4414      	add	r4, r2
 80081ce:	68ab      	ldr	r3, [r5, #8]
 80081d0:	1c56      	adds	r6, r2, #1
 80081d2:	4641      	mov	r1, r8
 80081d4:	4628      	mov	r0, r5
 80081d6:	685f      	ldr	r7, [r3, #4]
 80081d8:	464b      	mov	r3, r9
 80081da:	47b8      	blx	r7
 80081dc:	42b4      	cmp	r4, r6
 80081de:	4632      	mov	r2, r6
 80081e0:	d1f5      	bne.n	80081ce <GUI_USAGE_AddRect+0xe>
 80081e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080081e6 <_Convert16>:
 80081e6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80081ee:	4681      	mov	r9, r0
 80081f0:	460d      	mov	r5, r1
 80081f2:	4616      	mov	r6, r2
 80081f4:	461f      	mov	r7, r3
 80081f6:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80081fa:	4614      	mov	r4, r2
 80081fc:	4688      	mov	r8, r1
 80081fe:	f839 0b02 	ldrh.w	r0, [r9], #2
 8008202:	47d8      	blx	fp
 8008204:	47d0      	blx	sl
 8008206:	3c01      	subs	r4, #1
 8008208:	f848 0b04 	str.w	r0, [r8], #4
 800820c:	d1f7      	bne.n	80081fe <_Convert16+0x18>
 800820e:	2f1f      	cmp	r7, #31
 8008210:	d806      	bhi.n	8008220 <_Convert16+0x3a>
 8008212:	463a      	mov	r2, r7
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	f002 be17 	b.w	800ae4e <GUI__CompactPixelIndices>
 8008220:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008224 <_Convert8>:
 8008224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800822c:	4680      	mov	r8, r0
 800822e:	460d      	mov	r5, r1
 8008230:	4616      	mov	r6, r2
 8008232:	461f      	mov	r7, r3
 8008234:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008238:	4689      	mov	r9, r1
 800823a:	4604      	mov	r4, r0
 800823c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008240:	47d8      	blx	fp
 8008242:	47d0      	blx	sl
 8008244:	1b33      	subs	r3, r6, r4
 8008246:	f849 0b04 	str.w	r0, [r9], #4
 800824a:	eb18 0f03 	cmn.w	r8, r3
 800824e:	d1f5      	bne.n	800823c <_Convert8+0x18>
 8008250:	2f1f      	cmp	r7, #31
 8008252:	d806      	bhi.n	8008262 <_Convert8+0x3e>
 8008254:	463a      	mov	r2, r7
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800825e:	f002 bdf6 	b.w	800ae4e <GUI__CompactPixelIndices>
 8008262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008268 <GUI_MEMDEV__WriteToActiveOpaque>:
 8008268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826c:	b09b      	sub	sp, #108	; 0x6c
 800826e:	4605      	mov	r5, r0
 8008270:	9108      	str	r1, [sp, #32]
 8008272:	9209      	str	r2, [sp, #36]	; 0x24
 8008274:	2800      	cmp	r0, #0
 8008276:	f000 8399 	beq.w	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800827a:	f7fc fd37 	bl	8004cec <GUI_ALLOC_LockH>
 800827e:	ab1a      	add	r3, sp, #104	; 0x68
 8008280:	6944      	ldr	r4, [r0, #20]
 8008282:	f843 0d1c 	str.w	r0, [r3, #-28]!
 8008286:	4618      	mov	r0, r3
 8008288:	f7fc fd3e 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800828c:	4628      	mov	r0, r5
 800828e:	f003 fa8f 	bl	800b7b0 <GUI_MEMDEV_GetBitsPerPixel>
 8008292:	2808      	cmp	r0, #8
 8008294:	4607      	mov	r7, r0
 8008296:	4ea5      	ldr	r6, [pc, #660]	; (800852c <GUI_MEMDEV__WriteToActiveOpaque+0x2c4>)
 8008298:	dd02      	ble.n	80082a0 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800829a:	2c00      	cmp	r4, #0
 800829c:	f000 81c9 	beq.w	8008632 <GUI_MEMDEV__WriteToActiveOpaque+0x3ca>
 80082a0:	2301      	movs	r3, #1
 80082a2:	2700      	movs	r7, #0
 80082a4:	4628      	mov	r0, r5
 80082a6:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80082aa:	9319      	str	r3, [sp, #100]	; 0x64
 80082ac:	930d      	str	r3, [sp, #52]	; 0x34
 80082ae:	9718      	str	r7, [sp, #96]	; 0x60
 80082b0:	f7fc fd1c 	bl	8004cec <GUI_ALLOC_LockH>
 80082b4:	6802      	ldr	r2, [r0, #0]
 80082b6:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80082ba:	6912      	ldr	r2, [r2, #16]
 80082bc:	930e      	str	r3, [sp, #56]	; 0x38
 80082be:	6853      	ldr	r3, [r2, #4]
 80082c0:	6832      	ldr	r2, [r6, #0]
 80082c2:	f849 0d14 	str.w	r0, [r9, #-20]!
 80082c6:	6904      	ldr	r4, [r0, #16]
 80082c8:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80082cc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80082d0:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 80082d4:	7c50      	ldrb	r0, [r2, #17]
 80082d6:	930c      	str	r3, [sp, #48]	; 0x30
 80082d8:	f7fe f8b4 	bl	8006444 <GUI_GetBitsPerPixelEx>
 80082dc:	6832      	ldr	r2, [r6, #0]
 80082de:	900b      	str	r0, [sp, #44]	; 0x2c
 80082e0:	7c50      	ldrb	r0, [r2, #17]
 80082e2:	f7fe f8cd 	bl	8006480 <GUI_GetpfIndex2ColorEx>
 80082e6:	900a      	str	r0, [sp, #40]	; 0x28
 80082e8:	4648      	mov	r0, r9
 80082ea:	f7fc fd0d 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80082ee:	2c08      	cmp	r4, #8
 80082f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f4:	d904      	bls.n	8008300 <GUI_MEMDEV__WriteToActiveOpaque+0x98>
 80082f6:	2c10      	cmp	r4, #16
 80082f8:	bf8c      	ite	hi
 80082fa:	2304      	movhi	r3, #4
 80082fc:	2302      	movls	r3, #2
 80082fe:	e005      	b.n	800830c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8008300:	2c01      	cmp	r4, #1
 8008302:	d103      	bne.n	800830c <GUI_MEMDEV__WriteToActiveOpaque+0xa4>
 8008304:	ab18      	add	r3, sp, #96	; 0x60
 8008306:	940d      	str	r4, [sp, #52]	; 0x34
 8008308:	930a      	str	r3, [sp, #40]	; 0x28
 800830a:	e001      	b.n	8008310 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 800830c:	930d      	str	r3, [sp, #52]	; 0x34
 800830e:	970a      	str	r7, [sp, #40]	; 0x28
 8008310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008312:	4293      	cmp	r3, r2
 8008314:	f000 80df 	beq.w	80084d6 <GUI_MEMDEV__WriteToActiveOpaque+0x26e>
 8008318:	6833      	ldr	r3, [r6, #0]
 800831a:	7c58      	ldrb	r0, [r3, #17]
 800831c:	f7fe f8b8 	bl	8006490 <GUI_GetpfColor2IndexEx>
 8008320:	900f      	str	r0, [sp, #60]	; 0x3c
 8008322:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8008326:	f7fc fea1 	bl	800506c <GUI_ALLOC_AllocNoInit>
 800832a:	9010      	str	r0, [sp, #64]	; 0x40
 800832c:	2800      	cmp	r0, #0
 800832e:	f000 833d 	beq.w	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8008332:	4628      	mov	r0, r5
 8008334:	f003 fbfe 	bl	800bb34 <GUI_MEMDEV_GetDataPtr>
 8008338:	4605      	mov	r5, r0
 800833a:	f1b8 0f00 	cmp.w	r8, #0
 800833e:	f000 80b9 	beq.w	80084b4 <GUI_MEMDEV__WriteToActiveOpaque+0x24c>
 8008342:	4640      	mov	r0, r8
 8008344:	f7fc fcd2 	bl	8004cec <GUI_ALLOC_LockH>
 8008348:	eb05 030a 	add.w	r3, r5, sl
 800834c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008350:	9311      	str	r3, [sp, #68]	; 0x44
 8008352:	2300      	movs	r3, #0
 8008354:	9016      	str	r0, [sp, #88]	; 0x58
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800835a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800835c:	ebca 0703 	rsb	r7, sl, r3
 8008360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008362:	4293      	cmp	r3, r2
 8008364:	f340 80a2 	ble.w	80084ac <GUI_MEMDEV__WriteToActiveOpaque+0x244>
 8008368:	2300      	movs	r3, #0
 800836a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800836c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8008370:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008372:	9317      	str	r3, [sp, #92]	; 0x5c
 8008374:	6883      	ldr	r3, [r0, #8]
 8008376:	4641      	mov	r1, r8
 8008378:	695b      	ldr	r3, [r3, #20]
 800837a:	4798      	blx	r3
 800837c:	4583      	cmp	fp, r0
 800837e:	4605      	mov	r5, r0
 8008380:	d128      	bne.n	80083d4 <GUI_MEMDEV__WriteToActiveOpaque+0x16c>
 8008382:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008384:	f7fc fcb2 	bl	8004cec <GUI_ALLOC_LockH>
 8008388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800838a:	2c08      	cmp	r4, #8
 800838c:	4601      	mov	r1, r0
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	465a      	mov	r2, fp
 8008392:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008394:	9014      	str	r0, [sp, #80]	; 0x50
 8008396:	4638      	mov	r0, r7
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800839c:	d902      	bls.n	80083a4 <GUI_MEMDEV__WriteToActiveOpaque+0x13c>
 800839e:	f7ff ff22 	bl	80081e6 <_Convert16>
 80083a2:	e001      	b.n	80083a8 <GUI_MEMDEV__WriteToActiveOpaque+0x140>
 80083a4:	f7ff ff3e 	bl	8008224 <_Convert8>
 80083a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083aa:	ad1a      	add	r5, sp, #104	; 0x68
 80083ac:	9808      	ldr	r0, [sp, #32]
 80083ae:	465a      	mov	r2, fp
 80083b0:	9305      	str	r3, [sp, #20]
 80083b2:	4649      	mov	r1, r9
 80083b4:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 80083b8:	9304      	str	r3, [sp, #16]
 80083ba:	2300      	movs	r3, #0
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c0:	9302      	str	r3, [sp, #8]
 80083c2:	2301      	movs	r3, #1
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	f7fd fd5c 	bl	8005e84 <LCD_DrawBitmap>
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7fc fc9b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80083d2:	e062      	b.n	800849a <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80083d4:	2c01      	cmp	r4, #1
 80083d6:	d002      	beq.n	80083de <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 80083d8:	f04f 0801 	mov.w	r8, #1
 80083dc:	e057      	b.n	800848e <GUI_MEMDEV__WriteToActiveOpaque+0x226>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	d05b      	beq.n	800849a <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 80083e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80083e4:	462a      	mov	r2, r5
 80083e6:	9e08      	ldr	r6, [sp, #32]
 80083e8:	4649      	mov	r1, r9
 80083ea:	f000 0307 	and.w	r3, r0, #7
 80083ee:	f8cd a00c 	str.w	sl, [sp, #12]
 80083f2:	9306      	str	r3, [sp, #24]
 80083f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f6:	9305      	str	r3, [sp, #20]
 80083f8:	2308      	movs	r3, #8
 80083fa:	fb90 f3f3 	sdiv	r3, r0, r3
 80083fe:	443b      	add	r3, r7
 8008400:	4430      	add	r0, r6
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	2301      	movs	r3, #1
 8008406:	9302      	str	r3, [sp, #8]
 8008408:	9301      	str	r3, [sp, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	f7fd fc4e 	bl	8005cac <LCD__DrawBitmap_1bpp>
 8008410:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008412:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008414:	4641      	mov	r1, r8
 8008416:	441d      	add	r5, r3
 8008418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800841a:	6883      	ldr	r3, [r0, #8]
 800841c:	9517      	str	r5, [sp, #92]	; 0x5c
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	4798      	blx	r3
 8008422:	4605      	mov	r5, r0
 8008424:	e7db      	b.n	80083de <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 8008426:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008428:	f7fc fc60 	bl	8004cec <GUI_ALLOC_LockH>
 800842c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800842e:	4601      	mov	r1, r0
 8008430:	9014      	str	r0, [sp, #80]	; 0x50
 8008432:	9301      	str	r3, [sp, #4]
 8008434:	2c08      	cmp	r4, #8
 8008436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008438:	462a      	mov	r2, r5
 800843a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800843c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	fb00 7006 	mla	r0, r0, r6, r7
 8008444:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008446:	d925      	bls.n	8008494 <GUI_MEMDEV__WriteToActiveOpaque+0x22c>
 8008448:	f7ff fecd 	bl	80081e6 <_Convert16>
 800844c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844e:	462a      	mov	r2, r5
 8008450:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008452:	4649      	mov	r1, r9
 8008454:	9305      	str	r3, [sp, #20]
 8008456:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008458:	9e08      	ldr	r6, [sp, #32]
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	2300      	movs	r3, #0
 800845e:	4430      	add	r0, r6
 8008460:	f8cd 8004 	str.w	r8, [sp, #4]
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008468:	f8cd 8000 	str.w	r8, [sp]
 800846c:	9302      	str	r3, [sp, #8]
 800846e:	2301      	movs	r3, #1
 8008470:	f7fd fd08 	bl	8005e84 <LCD_DrawBitmap>
 8008474:	a814      	add	r0, sp, #80	; 0x50
 8008476:	f7fc fc47 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800847a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800847c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800847e:	a917      	add	r1, sp, #92	; 0x5c
 8008480:	441d      	add	r5, r3
 8008482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008484:	6883      	ldr	r3, [r0, #8]
 8008486:	9517      	str	r5, [sp, #92]	; 0x5c
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	4798      	blx	r3
 800848c:	4605      	mov	r5, r0
 800848e:	2d00      	cmp	r5, #0
 8008490:	d1c9      	bne.n	8008426 <GUI_MEMDEV__WriteToActiveOpaque+0x1be>
 8008492:	e002      	b.n	800849a <GUI_MEMDEV__WriteToActiveOpaque+0x232>
 8008494:	f7ff fec6 	bl	8008224 <_Convert8>
 8008498:	e7d8      	b.n	800844c <GUI_MEMDEV__WriteToActiveOpaque+0x1e4>
 800849a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849c:	f109 0901 	add.w	r9, r9, #1
 80084a0:	3301      	adds	r3, #1
 80084a2:	9309      	str	r3, [sp, #36]	; 0x24
 80084a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a6:	4453      	add	r3, sl
 80084a8:	9311      	str	r3, [sp, #68]	; 0x44
 80084aa:	e755      	b.n	8008358 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 80084ac:	a816      	add	r0, sp, #88	; 0x58
 80084ae:	f7fc fc2b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80084b2:	e00e      	b.n	80084d2 <GUI_MEMDEV__WriteToActiveOpaque+0x26a>
 80084b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b6:	465a      	mov	r2, fp
 80084b8:	9004      	str	r0, [sp, #16]
 80084ba:	9305      	str	r3, [sp, #20]
 80084bc:	2301      	movs	r3, #1
 80084be:	f8cd a00c 	str.w	sl, [sp, #12]
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	9402      	str	r4, [sp, #8]
 80084c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084cc:	9808      	ldr	r0, [sp, #32]
 80084ce:	f7fd fcd9 	bl	8005e84 <LCD_DrawBitmap>
 80084d2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084d4:	e268      	b.n	80089a8 <GUI_MEMDEV__WriteToActiveOpaque+0x740>
 80084d6:	4628      	mov	r0, r5
 80084d8:	f003 fb2c 	bl	800bb34 <GUI_MEMDEV_GetDataPtr>
 80084dc:	4607      	mov	r7, r0
 80084de:	f1b8 0f00 	cmp.w	r8, #0
 80084e2:	f000 809a 	beq.w	800861a <GUI_MEMDEV__WriteToActiveOpaque+0x3b2>
 80084e6:	2500      	movs	r5, #0
 80084e8:	4640      	mov	r0, r8
 80084ea:	f7fc fbff 	bl	8004cec <GUI_ALLOC_LockH>
 80084ee:	9016      	str	r0, [sp, #88]	; 0x58
 80084f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f2:	42ab      	cmp	r3, r5
 80084f4:	f340 808d 	ble.w	8008612 <GUI_MEMDEV__WriteToActiveOpaque+0x3aa>
 80084f8:	2300      	movs	r3, #0
 80084fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80084fc:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 8008500:	462a      	mov	r2, r5
 8008502:	9317      	str	r3, [sp, #92]	; 0x5c
 8008504:	6883      	ldr	r3, [r0, #8]
 8008506:	4641      	mov	r1, r8
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	4798      	blx	r3
 800850c:	4583      	cmp	fp, r0
 800850e:	4606      	mov	r6, r0
 8008510:	d126      	bne.n	8008560 <GUI_MEMDEV__WriteToActiveOpaque+0x2f8>
 8008512:	462e      	mov	r6, r5
 8008514:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008516:	f106 0901 	add.w	r9, r6, #1
 800851a:	4641      	mov	r1, r8
 800851c:	6883      	ldr	r3, [r0, #8]
 800851e:	464a      	mov	r2, r9
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	4798      	blx	r3
 8008524:	4583      	cmp	fp, r0
 8008526:	d103      	bne.n	8008530 <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 8008528:	464e      	mov	r6, r9
 800852a:	e7f3      	b.n	8008514 <GUI_MEMDEV__WriteToActiveOpaque+0x2ac>
 800852c:	20000014 	.word	0x20000014
 8008530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008532:	ebc5 0806 	rsb	r8, r5, r6
 8008536:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008538:	465a      	mov	r2, fp
 800853a:	f108 0801 	add.w	r8, r8, #1
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	2301      	movs	r3, #1
 8008542:	9704      	str	r7, [sp, #16]
 8008544:	4429      	add	r1, r5
 8008546:	f8cd a00c 	str.w	sl, [sp, #12]
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	4635      	mov	r5, r6
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	4643      	mov	r3, r8
 8008552:	9402      	str	r4, [sp, #8]
 8008554:	9808      	ldr	r0, [sp, #32]
 8008556:	fb0a 7708 	mla	r7, sl, r8, r7
 800855a:	f7fd fc93 	bl	8005e84 <LCD_DrawBitmap>
 800855e:	e056      	b.n	800860e <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 8008560:	2c01      	cmp	r4, #1
 8008562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008564:	d004      	beq.n	8008570 <GUI_MEMDEV__WriteToActiveOpaque+0x308>
 8008566:	442b      	add	r3, r5
 8008568:	f04f 0901 	mov.w	r9, #1
 800856c:	930b      	str	r3, [sp, #44]	; 0x2c
 800856e:	e02b      	b.n	80085c8 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 8008570:	eb03 0905 	add.w	r9, r3, r5
 8008574:	46a0      	mov	r8, r4
 8008576:	b32e      	cbz	r6, 80085c4 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 8008578:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800857c:	4632      	mov	r2, r6
 800857e:	9808      	ldr	r0, [sp, #32]
 8008580:	4649      	mov	r1, r9
 8008582:	f00e 0307 	and.w	r3, lr, #7
 8008586:	f8cd a00c 	str.w	sl, [sp, #12]
 800858a:	4470      	add	r0, lr
 800858c:	f8cd 8008 	str.w	r8, [sp, #8]
 8008590:	9306      	str	r3, [sp, #24]
 8008592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008594:	f8cd 8004 	str.w	r8, [sp, #4]
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	2308      	movs	r3, #8
 800859c:	f8cd 8000 	str.w	r8, [sp]
 80085a0:	fb9e f3f3 	sdiv	r3, lr, r3
 80085a4:	443b      	add	r3, r7
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	2301      	movs	r3, #1
 80085aa:	f7fd fb7f 	bl	8005cac <LCD__DrawBitmap_1bpp>
 80085ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085b0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80085b2:	462a      	mov	r2, r5
 80085b4:	441e      	add	r6, r3
 80085b6:	a917      	add	r1, sp, #92	; 0x5c
 80085b8:	6883      	ldr	r3, [r0, #8]
 80085ba:	9617      	str	r6, [sp, #92]	; 0x5c
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	4798      	blx	r3
 80085c0:	4606      	mov	r6, r0
 80085c2:	e7d8      	b.n	8008576 <GUI_MEMDEV__WriteToActiveOpaque+0x30e>
 80085c4:	4457      	add	r7, sl
 80085c6:	e022      	b.n	800860e <GUI_MEMDEV__WriteToActiveOpaque+0x3a6>
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	d0fb      	beq.n	80085c4 <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 80085cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ce:	4632      	mov	r2, r6
 80085d0:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d8:	9808      	ldr	r0, [sp, #32]
 80085da:	fb03 730e 	mla	r3, r3, lr, r7
 80085de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085e0:	4470      	add	r0, lr
 80085e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	2301      	movs	r3, #1
 80085ea:	9402      	str	r4, [sp, #8]
 80085ec:	f8cd 9004 	str.w	r9, [sp, #4]
 80085f0:	f8cd 9000 	str.w	r9, [sp]
 80085f4:	f7fd fc46 	bl	8005e84 <LCD_DrawBitmap>
 80085f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085fa:	9816      	ldr	r0, [sp, #88]	; 0x58
 80085fc:	462a      	mov	r2, r5
 80085fe:	441e      	add	r6, r3
 8008600:	4641      	mov	r1, r8
 8008602:	6883      	ldr	r3, [r0, #8]
 8008604:	9617      	str	r6, [sp, #92]	; 0x5c
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	4798      	blx	r3
 800860a:	4606      	mov	r6, r0
 800860c:	e7dc      	b.n	80085c8 <GUI_MEMDEV__WriteToActiveOpaque+0x360>
 800860e:	3501      	adds	r5, #1
 8008610:	e76e      	b.n	80084f0 <GUI_MEMDEV__WriteToActiveOpaque+0x288>
 8008612:	a816      	add	r0, sp, #88	; 0x58
 8008614:	f7fc fb78 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008618:	e1c8      	b.n	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 800861a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800861c:	465a      	mov	r2, fp
 800861e:	9004      	str	r0, [sp, #16]
 8008620:	9305      	str	r3, [sp, #20]
 8008622:	2301      	movs	r3, #1
 8008624:	f8cd a00c 	str.w	sl, [sp, #12]
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	9402      	str	r4, [sp, #8]
 800862e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008630:	e03a      	b.n	80086a8 <GUI_MEMDEV__WriteToActiveOpaque+0x440>
 8008632:	4628      	mov	r0, r5
 8008634:	f7fc fb5a 	bl	8004cec <GUI_ALLOC_LockH>
 8008638:	4683      	mov	fp, r0
 800863a:	a81a      	add	r0, sp, #104	; 0x68
 800863c:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 8008640:	f840 bd10 	str.w	fp, [r0, #-16]!
 8008644:	930b      	str	r3, [sp, #44]	; 0x2c
 8008646:	f8db 2000 	ldr.w	r2, [fp]
 800864a:	f8db 300c 	ldr.w	r3, [fp, #12]
 800864e:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8008652:	930c      	str	r3, [sp, #48]	; 0x30
 8008654:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 8008658:	f7fc fb56 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800865c:	6832      	ldr	r2, [r6, #0]
 800865e:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8008662:	7c50      	ldrb	r0, [r2, #17]
 8008664:	4aa1      	ldr	r2, [pc, #644]	; (80088ec <GUI_MEMDEV__WriteToActiveOpaque+0x684>)
 8008666:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800866a:	6916      	ldr	r6, [r2, #16]
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	930a      	str	r3, [sp, #40]	; 0x28
 8008670:	f7fd fee8 	bl	8006444 <GUI_GetBitsPerPixelEx>
 8008674:	2808      	cmp	r0, #8
 8008676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008678:	d906      	bls.n	8008688 <GUI_MEMDEV__WriteToActiveOpaque+0x420>
 800867a:	2810      	cmp	r0, #16
 800867c:	bf8c      	ite	hi
 800867e:	f04f 0a04 	movhi.w	sl, #4
 8008682:	f04f 0a02 	movls.w	sl, #2
 8008686:	e001      	b.n	800868c <GUI_MEMDEV__WriteToActiveOpaque+0x424>
 8008688:	f04f 0a01 	mov.w	sl, #1
 800868c:	45b0      	cmp	r8, r6
 800868e:	d110      	bne.n	80086b2 <GUI_MEMDEV__WriteToActiveOpaque+0x44a>
 8008690:	2200      	movs	r2, #0
 8008692:	9303      	str	r3, [sp, #12]
 8008694:	2301      	movs	r3, #1
 8008696:	f10b 0018 	add.w	r0, fp, #24
 800869a:	9205      	str	r2, [sp, #20]
 800869c:	4622      	mov	r2, r4
 800869e:	9301      	str	r3, [sp, #4]
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086a4:	9004      	str	r0, [sp, #16]
 80086a6:	9702      	str	r7, [sp, #8]
 80086a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086aa:	9808      	ldr	r0, [sp, #32]
 80086ac:	f7fd fbea 	bl	8005e84 <LCD_DrawBitmap>
 80086b0:	e17c      	b.n	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80086b2:	2f20      	cmp	r7, #32
 80086b4:	f040 80a2 	bne.w	80087fc <GUI_MEMDEV__WriteToActiveOpaque+0x594>
 80086b8:	fb0a f004 	mul.w	r0, sl, r4
 80086bc:	f7fc fcd6 	bl	800506c <GUI_ALLOC_AllocNoInit>
 80086c0:	900d      	str	r0, [sp, #52]	; 0x34
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f000 8172 	beq.w	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 80086c8:	f7fc fb10 	bl	8004cec <GUI_ALLOC_LockH>
 80086cc:	9018      	str	r0, [sp, #96]	; 0x60
 80086ce:	4628      	mov	r0, r5
 80086d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80086d4:	f7fc fb0a 	bl	8004cec <GUI_ALLOC_LockH>
 80086d8:	9016      	str	r0, [sp, #88]	; 0x58
 80086da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086de:	6933      	ldr	r3, [r6, #16]
 80086e0:	f100 0518 	add.w	r5, r0, #24
 80086e4:	920c      	str	r2, [sp, #48]	; 0x30
 80086e6:	b373      	cbz	r3, 8008746 <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 80086e8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80086ec:	f04f 0901 	mov.w	r9, #1
 80086f0:	f1ba 0f02 	cmp.w	sl, #2
 80086f4:	d005      	beq.n	8008702 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80086f6:	f1ba 0f04 	cmp.w	sl, #4
 80086fa:	d002      	beq.n	8008702 <GUI_MEMDEV__WriteToActiveOpaque+0x49a>
 80086fc:	f1ba 0f01 	cmp.w	sl, #1
 8008700:	d106      	bne.n	8008710 <GUI_MEMDEV__WriteToActiveOpaque+0x4a8>
 8008702:	4628      	mov	r0, r5
 8008704:	445d      	add	r5, fp
 8008706:	6937      	ldr	r7, [r6, #16]
 8008708:	4653      	mov	r3, sl
 800870a:	4622      	mov	r2, r4
 800870c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800870e:	47b8      	blx	r7
 8008710:	2300      	movs	r3, #0
 8008712:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008714:	f8cd 9004 	str.w	r9, [sp, #4]
 8008718:	4641      	mov	r1, r8
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	f108 0701 	add.w	r7, r8, #1
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008724:	9204      	str	r2, [sp, #16]
 8008726:	4622      	mov	r2, r4
 8008728:	9302      	str	r3, [sp, #8]
 800872a:	2301      	movs	r3, #1
 800872c:	f8cd 9000 	str.w	r9, [sp]
 8008730:	9808      	ldr	r0, [sp, #32]
 8008732:	f7fd fba7 	bl	8005e84 <LCD_DrawBitmap>
 8008736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800873a:	4413      	add	r3, r2
 800873c:	429f      	cmp	r7, r3
 800873e:	f000 812c 	beq.w	800899a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8008742:	46b8      	mov	r8, r7
 8008744:	e7d4      	b.n	80086f0 <GUI_MEMDEV__WriteToActiveOpaque+0x488>
 8008746:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008748:	461e      	mov	r6, r3
 800874a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800874c:	f04f 0901 	mov.w	r9, #1
 8008750:	443b      	add	r3, r7
 8008752:	9309      	str	r3, [sp, #36]	; 0x24
 8008754:	f1ba 0f02 	cmp.w	sl, #2
 8008758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800875c:	d016      	beq.n	800878c <GUI_MEMDEV__WriteToActiveOpaque+0x524>
 800875e:	f1ba 0f04 	cmp.w	sl, #4
 8008762:	d024      	beq.n	80087ae <GUI_MEMDEV__WriteToActiveOpaque+0x546>
 8008764:	f1ba 0f01 	cmp.w	sl, #1
 8008768:	d130      	bne.n	80087cc <GUI_MEMDEV__WriteToActiveOpaque+0x564>
 800876a:	4643      	mov	r3, r8
 800876c:	462a      	mov	r2, r5
 800876e:	f852 0b04 	ldr.w	r0, [r2], #4
 8008772:	930e      	str	r3, [sp, #56]	; 0x38
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	920b      	str	r2, [sp, #44]	; 0x2c
 8008778:	4798      	blx	r3
 800877a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800877c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800877e:	f803 0b01 	strb.w	r0, [r3], #1
 8008782:	1ae1      	subs	r1, r4, r3
 8008784:	eb18 0f01 	cmn.w	r8, r1
 8008788:	d1f1      	bne.n	800876e <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 800878a:	e01e      	b.n	80087ca <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 800878c:	4643      	mov	r3, r8
 800878e:	462a      	mov	r2, r5
 8008790:	46a0      	mov	r8, r4
 8008792:	f852 0b04 	ldr.w	r0, [r2], #4
 8008796:	930e      	str	r3, [sp, #56]	; 0x38
 8008798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879a:	920b      	str	r2, [sp, #44]	; 0x2c
 800879c:	4798      	blx	r3
 800879e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087a0:	f1b8 0801 	subs.w	r8, r8, #1
 80087a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087a6:	f823 0b02 	strh.w	r0, [r3], #2
 80087aa:	d1f2      	bne.n	8008792 <GUI_MEMDEV__WriteToActiveOpaque+0x52a>
 80087ac:	e00d      	b.n	80087ca <GUI_MEMDEV__WriteToActiveOpaque+0x562>
 80087ae:	462a      	mov	r2, r5
 80087b0:	4623      	mov	r3, r4
 80087b2:	f852 0b04 	ldr.w	r0, [r2], #4
 80087b6:	930e      	str	r3, [sp, #56]	; 0x38
 80087b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80087bc:	4798      	blx	r3
 80087be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087c0:	f848 0b04 	str.w	r0, [r8], #4
 80087c4:	3b01      	subs	r3, #1
 80087c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087c8:	d1f3      	bne.n	80087b2 <GUI_MEMDEV__WriteToActiveOpaque+0x54a>
 80087ca:	445d      	add	r5, fp
 80087cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80087ce:	4622      	mov	r2, r4
 80087d0:	9605      	str	r6, [sp, #20]
 80087d2:	4639      	mov	r1, r7
 80087d4:	9304      	str	r3, [sp, #16]
 80087d6:	f107 0801 	add.w	r8, r7, #1
 80087da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087dc:	9603      	str	r6, [sp, #12]
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	2301      	movs	r3, #1
 80087e2:	f8cd 9004 	str.w	r9, [sp, #4]
 80087e6:	f8cd 9000 	str.w	r9, [sp]
 80087ea:	9808      	ldr	r0, [sp, #32]
 80087ec:	f7fd fb4a 	bl	8005e84 <LCD_DrawBitmap>
 80087f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f2:	4543      	cmp	r3, r8
 80087f4:	f000 80d1 	beq.w	800899a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 80087f8:	4647      	mov	r7, r8
 80087fa:	e7ab      	b.n	8008754 <GUI_MEMDEV__WriteToActiveOpaque+0x4ec>
 80087fc:	2f10      	cmp	r7, #16
 80087fe:	f040 80d5 	bne.w	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8008802:	fb04 f00a 	mul.w	r0, r4, sl
 8008806:	f7fc fc31 	bl	800506c <GUI_ALLOC_AllocNoInit>
 800880a:	900d      	str	r0, [sp, #52]	; 0x34
 800880c:	2800      	cmp	r0, #0
 800880e:	f000 80cd 	beq.w	80089ac <GUI_MEMDEV__WriteToActiveOpaque+0x744>
 8008812:	f7fc fa6b 	bl	8004cec <GUI_ALLOC_LockH>
 8008816:	9018      	str	r0, [sp, #96]	; 0x60
 8008818:	4628      	mov	r0, r5
 800881a:	f7fc fa67 	bl	8004cec <GUI_ALLOC_LockH>
 800881e:	9016      	str	r0, [sp, #88]	; 0x58
 8008820:	6933      	ldr	r3, [r6, #16]
 8008822:	f100 0718 	add.w	r7, r0, #24
 8008826:	b113      	cbz	r3, 800882e <GUI_MEMDEV__WriteToActiveOpaque+0x5c6>
 8008828:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800882c:	b953      	cbnz	r3, 8008844 <GUI_MEMDEV__WriteToActiveOpaque+0x5dc>
 800882e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008832:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008834:	0066      	lsls	r6, r4, #1
 8008836:	f04f 0b00 	mov.w	fp, #0
 800883a:	930c      	str	r3, [sp, #48]	; 0x30
 800883c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800883e:	442b      	add	r3, r5
 8008840:	9309      	str	r3, [sp, #36]	; 0x24
 8008842:	e083      	b.n	800894c <GUI_MEMDEV__WriteToActiveOpaque+0x6e4>
 8008844:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8008848:	0080      	lsls	r0, r0, #2
 800884a:	f7fc fc0f 	bl	800506c <GUI_ALLOC_AllocNoInit>
 800884e:	900c      	str	r0, [sp, #48]	; 0x30
 8008850:	b118      	cbz	r0, 800885a <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 8008852:	f7fc fa4b 	bl	8004cec <GUI_ALLOC_LockH>
 8008856:	9017      	str	r0, [sp, #92]	; 0x5c
 8008858:	e001      	b.n	800885e <GUI_MEMDEV__WriteToActiveOpaque+0x5f6>
 800885a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800885c:	9317      	str	r3, [sp, #92]	; 0x5c
 800885e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 809a 	beq.w	800899a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 8008866:	0063      	lsls	r3, r4, #1
 8008868:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800886c:	930a      	str	r3, [sp, #40]	; 0x28
 800886e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008872:	930e      	str	r3, [sp, #56]	; 0x38
 8008874:	f1ba 0f02 	cmp.w	sl, #2
 8008878:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800887c:	d006      	beq.n	800888c <GUI_MEMDEV__WriteToActiveOpaque+0x624>
 800887e:	f1ba 0f04 	cmp.w	sl, #4
 8008882:	d005      	beq.n	8008890 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 8008884:	f1ba 0f01 	cmp.w	sl, #1
 8008888:	d111      	bne.n	80088ae <GUI_MEMDEV__WriteToActiveOpaque+0x646>
 800888a:	e001      	b.n	8008890 <GUI_MEMDEV__WriteToActiveOpaque+0x628>
 800888c:	4653      	mov	r3, sl
 800888e:	e000      	b.n	8008892 <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 8008890:	2302      	movs	r3, #2
 8008892:	4638      	mov	r0, r7
 8008894:	4622      	mov	r2, r4
 8008896:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008898:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800889c:	47a8      	blx	r5
 800889e:	4653      	mov	r3, sl
 80088a0:	4622      	mov	r2, r4
 80088a2:	4649      	mov	r1, r9
 80088a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80088a6:	6935      	ldr	r5, [r6, #16]
 80088a8:	47a8      	blx	r5
 80088aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ac:	441f      	add	r7, r3
 80088ae:	2300      	movs	r3, #0
 80088b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088b2:	4659      	mov	r1, fp
 80088b4:	9808      	ldr	r0, [sp, #32]
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	f10b 0901 	add.w	r9, fp, #1
 80088bc:	9303      	str	r3, [sp, #12]
 80088be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088c0:	9204      	str	r2, [sp, #16]
 80088c2:	4622      	mov	r2, r4
 80088c4:	9302      	str	r3, [sp, #8]
 80088c6:	2301      	movs	r3, #1
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	f7fd fada 	bl	8005e84 <LCD_DrawBitmap>
 80088d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d4:	4413      	add	r3, r2
 80088d6:	4599      	cmp	r9, r3
 80088d8:	d001      	beq.n	80088de <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 80088da:	46cb      	mov	fp, r9
 80088dc:	e7ca      	b.n	8008874 <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 80088de:	a817      	add	r0, sp, #92	; 0x5c
 80088e0:	f7fc fa12 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80088e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80088e6:	f7fc fa2f 	bl	8004d48 <GUI_ALLOC_Free>
 80088ea:	e056      	b.n	800899a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 80088ec:	2001d9e8 	.word	0x2001d9e8
 80088f0:	f1ba 0f04 	cmp.w	sl, #4
 80088f4:	d041      	beq.n	800897a <GUI_MEMDEV__WriteToActiveOpaque+0x712>
 80088f6:	f1ba 0f01 	cmp.w	sl, #1
 80088fa:	d111      	bne.n	8008920 <GUI_MEMDEV__WriteToActiveOpaque+0x6b8>
 80088fc:	4643      	mov	r3, r8
 80088fe:	463a      	mov	r2, r7
 8008900:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008904:	930e      	str	r3, [sp, #56]	; 0x38
 8008906:	920b      	str	r2, [sp, #44]	; 0x2c
 8008908:	47c8      	blx	r9
 800890a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890c:	4798      	blx	r3
 800890e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008912:	f803 0b01 	strb.w	r0, [r3], #1
 8008916:	1ae1      	subs	r1, r4, r3
 8008918:	eb18 0f01 	cmn.w	r8, r1
 800891c:	d1f0      	bne.n	8008900 <GUI_MEMDEV__WriteToActiveOpaque+0x698>
 800891e:	4437      	add	r7, r6
 8008920:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008922:	4622      	mov	r2, r4
 8008924:	f8cd b014 	str.w	fp, [sp, #20]
 8008928:	4629      	mov	r1, r5
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	f105 0801 	add.w	r8, r5, #1
 8008930:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008932:	f8cd b00c 	str.w	fp, [sp, #12]
 8008936:	9302      	str	r3, [sp, #8]
 8008938:	2301      	movs	r3, #1
 800893a:	9808      	ldr	r0, [sp, #32]
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	f7fd faa0 	bl	8005e84 <LCD_DrawBitmap>
 8008944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008946:	4543      	cmp	r3, r8
 8008948:	d027      	beq.n	800899a <GUI_MEMDEV__WriteToActiveOpaque+0x732>
 800894a:	4645      	mov	r5, r8
 800894c:	f1ba 0f02 	cmp.w	sl, #2
 8008950:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008954:	d1cc      	bne.n	80088f0 <GUI_MEMDEV__WriteToActiveOpaque+0x688>
 8008956:	4643      	mov	r3, r8
 8008958:	463a      	mov	r2, r7
 800895a:	46a0      	mov	r8, r4
 800895c:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008960:	930e      	str	r3, [sp, #56]	; 0x38
 8008962:	920b      	str	r2, [sp, #44]	; 0x2c
 8008964:	47c8      	blx	r9
 8008966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008968:	4798      	blx	r3
 800896a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800896c:	f1b8 0801 	subs.w	r8, r8, #1
 8008970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008972:	f823 0b02 	strh.w	r0, [r3], #2
 8008976:	d1f1      	bne.n	800895c <GUI_MEMDEV__WriteToActiveOpaque+0x6f4>
 8008978:	e7d1      	b.n	800891e <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800897a:	463a      	mov	r2, r7
 800897c:	4623      	mov	r3, r4
 800897e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8008982:	930e      	str	r3, [sp, #56]	; 0x38
 8008984:	920b      	str	r2, [sp, #44]	; 0x2c
 8008986:	47c8      	blx	r9
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	4798      	blx	r3
 800898c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898e:	f848 0b04 	str.w	r0, [r8], #4
 8008992:	3b01      	subs	r3, #1
 8008994:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008996:	d1f2      	bne.n	800897e <GUI_MEMDEV__WriteToActiveOpaque+0x716>
 8008998:	e7c1      	b.n	800891e <GUI_MEMDEV__WriteToActiveOpaque+0x6b6>
 800899a:	a816      	add	r0, sp, #88	; 0x58
 800899c:	f7fc f9b4 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80089a0:	a818      	add	r0, sp, #96	; 0x60
 80089a2:	f7fc f9b1 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80089a6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80089a8:	f7fc f9ce 	bl	8004d48 <GUI_ALLOC_Free>
 80089ac:	b01b      	add	sp, #108	; 0x6c
 80089ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b2:	bf00      	nop

080089b4 <_OnExit>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4b1a      	ldr	r3, [pc, #104]	; (8008a20 <_OnExit+0x6c>)
 80089b8:	2400      	movs	r4, #0
 80089ba:	4d1a      	ldr	r5, [pc, #104]	; (8008a24 <_OnExit+0x70>)
 80089bc:	601c      	str	r4, [r3, #0]
 80089be:	4621      	mov	r1, r4
 80089c0:	4b19      	ldr	r3, [pc, #100]	; (8008a28 <_OnExit+0x74>)
 80089c2:	481a      	ldr	r0, [pc, #104]	; (8008a2c <_OnExit+0x78>)
 80089c4:	601c      	str	r4, [r3, #0]
 80089c6:	605c      	str	r4, [r3, #4]
 80089c8:	300c      	adds	r0, #12
 80089ca:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <_OnExit+0x7c>)
 80089cc:	4a19      	ldr	r2, [pc, #100]	; (8008a34 <_OnExit+0x80>)
 80089ce:	601c      	str	r4, [r3, #0]
 80089d0:	4b19      	ldr	r3, [pc, #100]	; (8008a38 <_OnExit+0x84>)
 80089d2:	f800 4c0c 	strb.w	r4, [r0, #-12]
 80089d6:	601c      	str	r4, [r3, #0]
 80089d8:	4b18      	ldr	r3, [pc, #96]	; (8008a3c <_OnExit+0x88>)
 80089da:	f840 4c08 	str.w	r4, [r0, #-8]
 80089de:	601c      	str	r4, [r3, #0]
 80089e0:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <_OnExit+0x8c>)
 80089e2:	6014      	str	r4, [r2, #0]
 80089e4:	6054      	str	r4, [r2, #4]
 80089e6:	2218      	movs	r2, #24
 80089e8:	601c      	str	r4, [r3, #0]
 80089ea:	f840 4c04 	str.w	r4, [r0, #-4]
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	4798      	blx	r3
 80089f2:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <_OnExit+0x90>)
 80089f4:	4621      	mov	r1, r4
 80089f6:	2210      	movs	r2, #16
 80089f8:	601c      	str	r4, [r3, #0]
 80089fa:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <_OnExit+0x94>)
 80089fc:	4813      	ldr	r0, [pc, #76]	; (8008a4c <_OnExit+0x98>)
 80089fe:	601c      	str	r4, [r3, #0]
 8008a00:	605c      	str	r4, [r3, #4]
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	4798      	blx	r3
 8008a06:	682b      	ldr	r3, [r5, #0]
 8008a08:	4621      	mov	r1, r4
 8008a0a:	2210      	movs	r2, #16
 8008a0c:	4810      	ldr	r0, [pc, #64]	; (8008a50 <_OnExit+0x9c>)
 8008a0e:	4798      	blx	r3
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	4621      	mov	r1, r4
 8008a14:	2210      	movs	r2, #16
 8008a16:	480f      	ldr	r0, [pc, #60]	; (8008a54 <_OnExit+0xa0>)
 8008a18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a1c:	4718      	bx	r3
 8008a1e:	bf00      	nop
 8008a20:	2001da40 	.word	0x2001da40
 8008a24:	20000024 	.word	0x20000024
 8008a28:	2001da48 	.word	0x2001da48
 8008a2c:	200001d8 	.word	0x200001d8
 8008a30:	2001da54 	.word	0x2001da54
 8008a34:	2001da14 	.word	0x2001da14
 8008a38:	2001da00 	.word	0x2001da00
 8008a3c:	2001da34 	.word	0x2001da34
 8008a40:	2001da44 	.word	0x2001da44
 8008a44:	2001da10 	.word	0x2001da10
 8008a48:	2001da04 	.word	0x2001da04
 8008a4c:	2001da78 	.word	0x2001da78
 8008a50:	2001da68 	.word	0x2001da68
 8008a54:	2001da58 	.word	0x2001da58

08008a58 <_Paint1>:
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	f7fc f93c 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008a60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008a62:	4a05      	ldr	r2, [pc, #20]	; (8008a78 <_Paint1+0x20>)
 8008a64:	4620      	mov	r0, r4
 8008a66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008a6a:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <_Paint1+0x24>)
 8008a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a70:	bf08      	it	eq
 8008a72:	4613      	moveq	r3, r2
 8008a74:	4718      	bx	r3
 8008a76:	bf00      	nop
 8008a78:	08009959 	.word	0x08009959
 8008a7c:	0800bd6d 	.word	0x0800bd6d

08008a80 <_Findy1>:
 8008a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	4607      	mov	r7, r0
 8008a86:	460c      	mov	r4, r1
 8008a88:	4616      	mov	r6, r2
 8008a8a:	ad02      	add	r5, sp, #8
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	d048      	beq.n	8008b22 <_Findy1+0xa2>
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7fc f92b 	bl	8004cec <GUI_ALLOC_LockH>
 8008a96:	6a87      	ldr	r7, [r0, #40]	; 0x28
 8008a98:	4601      	mov	r1, r0
 8008a9a:	9001      	str	r0, [sp, #4]
 8008a9c:	07bb      	lsls	r3, r7, #30
 8008a9e:	d53a      	bpl.n	8008b16 <_Findy1+0x96>
 8008aa0:	b126      	cbz	r6, 8008aac <_Findy1+0x2c>
 8008aa2:	4632      	mov	r2, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f7fd f806 	bl	8005ab6 <GUI__IntersectRects>
 8008aaa:	e002      	b.n	8008ab2 <_Findy1+0x32>
 8008aac:	c803      	ldmia	r0, {r0, r1}
 8008aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f7fc fbbb 	bl	8005230 <GUI_RectsIntersect>
 8008aba:	b360      	cbz	r0, 8008b16 <_Findy1+0x96>
 8008abc:	f017 0f01 	tst.w	r7, #1
 8008ac0:	9b01      	ldr	r3, [sp, #4]
 8008ac2:	d11c      	bne.n	8008afe <_Findy1+0x7e>
 8008ac4:	b13e      	cbz	r6, 8008ad6 <_Findy1+0x56>
 8008ac6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008aca:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	bfb8      	it	lt
 8008ad2:	4613      	movlt	r3, r2
 8008ad4:	e001      	b.n	8008ada <_Findy1+0x5a>
 8008ad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008ada:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008ae4:	dd05      	ble.n	8008af2 <_Findy1+0x72>
 8008ae6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	db13      	blt.n	8008b16 <_Findy1+0x96>
 8008aee:	3b01      	subs	r3, #1
 8008af0:	e003      	b.n	8008afa <_Findy1+0x7a>
 8008af2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	dd0d      	ble.n	8008b16 <_Findy1+0x96>
 8008afa:	80e3      	strh	r3, [r4, #6]
 8008afc:	e00b      	b.n	8008b16 <_Findy1+0x96>
 8008afe:	69df      	ldr	r7, [r3, #28]
 8008b00:	b14f      	cbz	r7, 8008b16 <_Findy1+0x96>
 8008b02:	4638      	mov	r0, r7
 8008b04:	462a      	mov	r2, r5
 8008b06:	4621      	mov	r1, r4
 8008b08:	f7ff ffba 	bl	8008a80 <_Findy1>
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7fc f8e3 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008b12:	6a07      	ldr	r7, [r0, #32]
 8008b14:	e7f4      	b.n	8008b00 <_Findy1+0x80>
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	a801      	add	r0, sp, #4
 8008b1a:	6a1f      	ldr	r7, [r3, #32]
 8008b1c:	f7fc f8f4 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008b20:	e7b4      	b.n	8008a8c <_Findy1+0xc>
 8008b22:	b005      	add	sp, #20
 8008b24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b26 <_Findx0>:
 8008b26:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	4690      	mov	r8, r2
 8008b30:	2500      	movs	r5, #0
 8008b32:	ac02      	add	r4, sp, #8
 8008b34:	2e00      	cmp	r6, #0
 8008b36:	d035      	beq.n	8008ba4 <_Findx0+0x7e>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7fc f8d7 	bl	8004cec <GUI_ALLOC_LockH>
 8008b3e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8008b40:	4601      	mov	r1, r0
 8008b42:	9001      	str	r0, [sp, #4]
 8008b44:	07b2      	lsls	r2, r6, #30
 8008b46:	d527      	bpl.n	8008b98 <_Findx0+0x72>
 8008b48:	f1b8 0f00 	cmp.w	r8, #0
 8008b4c:	d004      	beq.n	8008b58 <_Findx0+0x32>
 8008b4e:	4642      	mov	r2, r8
 8008b50:	4620      	mov	r0, r4
 8008b52:	f7fc ffb0 	bl	8005ab6 <GUI__IntersectRects>
 8008b56:	e002      	b.n	8008b5e <_Findx0+0x38>
 8008b58:	c803      	ldmia	r0, {r0, r1}
 8008b5a:	e884 0003 	stmia.w	r4, {r0, r1}
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7fc fb65 	bl	8005230 <GUI_RectsIntersect>
 8008b66:	b1b8      	cbz	r0, 8008b98 <_Findx0+0x72>
 8008b68:	07f3      	lsls	r3, r6, #31
 8008b6a:	d405      	bmi.n	8008b78 <_Findx0+0x52>
 8008b6c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008b70:	2501      	movs	r5, #1
 8008b72:	3301      	adds	r3, #1
 8008b74:	803b      	strh	r3, [r7, #0]
 8008b76:	e00f      	b.n	8008b98 <_Findx0+0x72>
 8008b78:	9b01      	ldr	r3, [sp, #4]
 8008b7a:	69de      	ldr	r6, [r3, #28]
 8008b7c:	b166      	cbz	r6, 8008b98 <_Findx0+0x72>
 8008b7e:	4622      	mov	r2, r4
 8008b80:	4639      	mov	r1, r7
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7ff ffcf 	bl	8008b26 <_Findx0>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	bf18      	it	ne
 8008b8e:	2501      	movne	r5, #1
 8008b90:	f7fc f8a2 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008b94:	6a06      	ldr	r6, [r0, #32]
 8008b96:	e7f1      	b.n	8008b7c <_Findx0+0x56>
 8008b98:	9b01      	ldr	r3, [sp, #4]
 8008b9a:	a801      	add	r0, sp, #4
 8008b9c:	6a1e      	ldr	r6, [r3, #32]
 8008b9e:	f7fc f8b3 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008ba2:	e7c7      	b.n	8008b34 <_Findx0+0xe>
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	b004      	add	sp, #16
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008bac <_Findx1>:
 8008bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	460e      	mov	r6, r1
 8008bb4:	4617      	mov	r7, r2
 8008bb6:	ac02      	add	r4, sp, #8
 8008bb8:	b37d      	cbz	r5, 8008c1a <_Findx1+0x6e>
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f7fc f896 	bl	8004cec <GUI_ALLOC_LockH>
 8008bc0:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	9001      	str	r0, [sp, #4]
 8008bc6:	07aa      	lsls	r2, r5, #30
 8008bc8:	d521      	bpl.n	8008c0e <_Findx1+0x62>
 8008bca:	b127      	cbz	r7, 8008bd6 <_Findx1+0x2a>
 8008bcc:	463a      	mov	r2, r7
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f7fc ff71 	bl	8005ab6 <GUI__IntersectRects>
 8008bd4:	e002      	b.n	8008bdc <_Findx1+0x30>
 8008bd6:	c803      	ldmia	r0, {r0, r1}
 8008bd8:	e884 0003 	stmia.w	r4, {r0, r1}
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4630      	mov	r0, r6
 8008be0:	f7fc fb26 	bl	8005230 <GUI_RectsIntersect>
 8008be4:	b198      	cbz	r0, 8008c0e <_Findx1+0x62>
 8008be6:	07eb      	lsls	r3, r5, #31
 8008be8:	d404      	bmi.n	8008bf4 <_Findx1+0x48>
 8008bea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	80b3      	strh	r3, [r6, #4]
 8008bf2:	e00c      	b.n	8008c0e <_Findx1+0x62>
 8008bf4:	9b01      	ldr	r3, [sp, #4]
 8008bf6:	69dd      	ldr	r5, [r3, #28]
 8008bf8:	b14d      	cbz	r5, 8008c0e <_Findx1+0x62>
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	4622      	mov	r2, r4
 8008bfe:	4631      	mov	r1, r6
 8008c00:	f7ff ffd4 	bl	8008bac <_Findx1>
 8008c04:	4628      	mov	r0, r5
 8008c06:	f7fc f867 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008c0a:	6a05      	ldr	r5, [r0, #32]
 8008c0c:	e7f4      	b.n	8008bf8 <_Findx1+0x4c>
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	a801      	add	r0, sp, #4
 8008c12:	6a1d      	ldr	r5, [r3, #32]
 8008c14:	f7fc f878 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008c18:	e7ce      	b.n	8008bb8 <_Findx1+0xc>
 8008c1a:	b005      	add	sp, #20
 8008c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008c20 <_Paint1Trans>:
 8008c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008c24:	4d21      	ldr	r5, [pc, #132]	; (8008cac <_Paint1Trans+0x8c>)
 8008c26:	4607      	mov	r7, r0
 8008c28:	ac02      	add	r4, sp, #8
 8008c2a:	682b      	ldr	r3, [r5, #0]
 8008c2c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008c2e:	f7fc f85d 	bl	8004cec <GUI_ALLOC_LockH>
 8008c32:	9000      	str	r0, [sp, #0]
 8008c34:	4638      	mov	r0, r7
 8008c36:	f7fc f859 	bl	8004cec <GUI_ALLOC_LockH>
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	9001      	str	r0, [sp, #4]
 8008c3e:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 8008c42:	3008      	adds	r0, #8
 8008c44:	f7fc faf4 	bl	8005230 <GUI_RectsIntersect>
 8008c48:	4606      	mov	r6, r0
 8008c4a:	b328      	cbz	r0, 8008c98 <_Paint1Trans+0x78>
 8008c4c:	9901      	ldr	r1, [sp, #4]
 8008c4e:	9a00      	ldr	r2, [sp, #0]
 8008c50:	682b      	ldr	r3, [r5, #0]
 8008c52:	f101 0008 	add.w	r0, r1, #8
 8008c56:	3208      	adds	r2, #8
 8008c58:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8008c5a:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 8008c5e:	f7fc ff2a 	bl	8005ab6 <GUI__IntersectRects>
 8008c62:	4620      	mov	r0, r4
 8008c64:	4c12      	ldr	r4, [pc, #72]	; (8008cb0 <_Paint1Trans+0x90>)
 8008c66:	f7fc f84f 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008c6a:	9a01      	ldr	r2, [sp, #4]
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	a801      	add	r0, sp, #4
 8008c70:	f9b2 1000 	ldrsh.w	r1, [r2]
 8008c74:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8008c78:	64d9      	str	r1, [r3, #76]	; 0x4c
 8008c7a:	651a      	str	r2, [r3, #80]	; 0x50
 8008c7c:	6027      	str	r7, [r4, #0]
 8008c7e:	f7fc f843 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008c82:	4638      	mov	r0, r7
 8008c84:	f7ff fee8 	bl	8008a58 <_Paint1>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	6023      	str	r3, [r4, #0]
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	64de      	str	r6, [r3, #76]	; 0x4c
 8008c90:	2601      	movs	r6, #1
 8008c92:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8008c96:	e005      	b.n	8008ca4 <_Paint1Trans+0x84>
 8008c98:	4620      	mov	r0, r4
 8008c9a:	f7fc f835 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008c9e:	a801      	add	r0, sp, #4
 8008ca0:	f7fc f832 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	b002      	add	sp, #8
 8008ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cac:	20000014 	.word	0x20000014
 8008cb0:	2001da00 	.word	0x2001da00

08008cb4 <_PaintTransChildren>:
 8008cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	4605      	mov	r5, r0
 8008cba:	f7fc f817 	bl	8004cec <GUI_ALLOC_LockH>
 8008cbe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008cc0:	9001      	str	r0, [sp, #4]
 8008cc2:	079b      	lsls	r3, r3, #30
 8008cc4:	d405      	bmi.n	8008cd2 <_PaintTransChildren+0x1e>
 8008cc6:	a801      	add	r0, sp, #4
 8008cc8:	f7fc f81e 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008ccc:	b003      	add	sp, #12
 8008cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd2:	69c4      	ldr	r4, [r0, #28]
 8008cd4:	2c00      	cmp	r4, #0
 8008cd6:	d0f6      	beq.n	8008cc6 <_PaintTransChildren+0x12>
 8008cd8:	4620      	mov	r0, r4
 8008cda:	f7fc f807 	bl	8004cec <GUI_ALLOC_LockH>
 8008cde:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008ce0:	9000      	str	r0, [sp, #0]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d135      	bne.n	8008d56 <_PaintTransChildren+0xa2>
 8008cea:	9901      	ldr	r1, [sp, #4]
 8008cec:	3108      	adds	r1, #8
 8008cee:	f7fc fa9f 	bl	8005230 <GUI_RectsIntersect>
 8008cf2:	b380      	cbz	r0, 8008d56 <_PaintTransChildren+0xa2>
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	a801      	add	r0, sp, #4
 8008cf8:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 8008cfc:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8008d00:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8008d04:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 8008d08:	f7fb fffe 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008d0c:	4668      	mov	r0, sp
 8008d0e:	f7fb fffb 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008d12:	4620      	mov	r0, r4
 8008d14:	f7ff ff84 	bl	8008c20 <_Paint1Trans>
 8008d18:	b170      	cbz	r0, 8008d38 <_PaintTransChildren+0x84>
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7fb ffdc 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008d20:	9000      	str	r0, [sp, #0]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f7ff ffc6 	bl	8008cb4 <_PaintTransChildren>
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f7fb ffd5 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008d2e:	9000      	str	r0, [sp, #0]
 8008d30:	4628      	mov	r0, r5
 8008d32:	f7fb ffd1 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008d36:	9001      	str	r0, [sp, #4]
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7fb ffd7 	bl	8004cec <GUI_ALLOC_LockH>
 8008d3e:	9001      	str	r0, [sp, #4]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f7fb ffd3 	bl	8004cec <GUI_ALLOC_LockH>
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	9000      	str	r0, [sp, #0]
 8008d4a:	f8a3 9008 	strh.w	r9, [r3, #8]
 8008d4e:	f8a3 800a 	strh.w	r8, [r3, #10]
 8008d52:	819f      	strh	r7, [r3, #12]
 8008d54:	81de      	strh	r6, [r3, #14]
 8008d56:	9b00      	ldr	r3, [sp, #0]
 8008d58:	4668      	mov	r0, sp
 8008d5a:	6a1c      	ldr	r4, [r3, #32]
 8008d5c:	f7fb ffd4 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008d60:	e7b8      	b.n	8008cd4 <_PaintTransChildren+0x20>
	...

08008d64 <WM__PaintWinAndOverlays>:
 8008d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d66:	4604      	mov	r4, r0
 8008d68:	f7fb ffc0 	bl	8004cec <GUI_ALLOC_LockH>
 8008d6c:	f640 0301 	movw	r3, #2049	; 0x801
 8008d70:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008d72:	9001      	str	r0, [sp, #4]
 8008d74:	4013      	ands	r3, r2
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d005      	beq.n	8008d86 <WM__PaintWinAndOverlays+0x22>
 8008d7a:	a801      	add	r0, sp, #4
 8008d7c:	f7fb ffc4 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008d80:	4620      	mov	r0, r4
 8008d82:	f7ff fe69 	bl	8008a58 <_Paint1>
 8008d86:	4b14      	ldr	r3, [pc, #80]	; (8008dd8 <WM__PaintWinAndOverlays+0x74>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	b313      	cbz	r3, 8008dd2 <WM__PaintWinAndOverlays+0x6e>
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7ff ff91 	bl	8008cb4 <_PaintTransChildren>
 8008d92:	4620      	mov	r0, r4
 8008d94:	f7fb ffa0 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008d98:	6985      	ldr	r5, [r0, #24]
 8008d9a:	6a04      	ldr	r4, [r0, #32]
 8008d9c:	b1cd      	cbz	r5, 8008dd2 <WM__PaintWinAndOverlays+0x6e>
 8008d9e:	b194      	cbz	r4, 8008dc6 <WM__PaintWinAndOverlays+0x62>
 8008da0:	4620      	mov	r0, r4
 8008da2:	f7fb ff99 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008da6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008da8:	f003 0303 	and.w	r3, r3, #3
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	d102      	bne.n	8008db6 <WM__PaintWinAndOverlays+0x52>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f7ff ff35 	bl	8008c20 <_Paint1Trans>
 8008db6:	4620      	mov	r0, r4
 8008db8:	f7ff ff7c 	bl	8008cb4 <_PaintTransChildren>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f7fb ff8b 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008dc2:	6a04      	ldr	r4, [r0, #32]
 8008dc4:	e7eb      	b.n	8008d9e <WM__PaintWinAndOverlays+0x3a>
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f7fb ff86 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008dcc:	6a04      	ldr	r4, [r0, #32]
 8008dce:	6985      	ldr	r5, [r0, #24]
 8008dd0:	e7e4      	b.n	8008d9c <WM__PaintWinAndOverlays+0x38>
 8008dd2:	b003      	add	sp, #12
 8008dd4:	bd30      	pop	{r4, r5, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2001da54 	.word	0x2001da54

08008ddc <_cbPaintMemDev>:
 8008ddc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008de0:	4d18      	ldr	r5, [pc, #96]	; (8008e44 <_cbPaintMemDev+0x68>)
 8008de2:	4682      	mov	sl, r0
 8008de4:	ac02      	add	r4, sp, #8
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008dea:	f7fb ff7f 	bl	8004cec <GUI_ALLOC_LockH>
 8008dee:	682a      	ldr	r2, [r5, #0]
 8008df0:	f844 0d04 	str.w	r0, [r4, #-4]!
 8008df4:	f100 0308 	add.w	r3, r0, #8
 8008df8:	3208      	adds	r2, #8
 8008dfa:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8008dfe:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 8008e02:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 8008e06:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 8008e0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008e12:	4620      	mov	r0, r4
 8008e14:	f7fb ff78 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008e18:	f8da 0000 	ldr.w	r0, [sl]
 8008e1c:	f7ff ffa2 	bl	8008d64 <WM__PaintWinAndOverlays>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008e24:	f7fb ff62 	bl	8004cec <GUI_ALLOC_LockH>
 8008e28:	9001      	str	r0, [sp, #4]
 8008e2a:	f8a0 9008 	strh.w	r9, [r0, #8]
 8008e2e:	f8a0 800a 	strh.w	r8, [r0, #10]
 8008e32:	8187      	strh	r7, [r0, #12]
 8008e34:	81c6      	strh	r6, [r0, #14]
 8008e36:	4620      	mov	r0, r4
 8008e38:	f7fb ff66 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008e3c:	b002      	add	sp, #8
 8008e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e42:	bf00      	nop
 8008e44:	20000014 	.word	0x20000014

08008e48 <WM__ClipAtParentBorders>:
 8008e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460d      	mov	r5, r1
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7fb ff4c 	bl	8004cec <GUI_ALLOC_LockH>
 8008e54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e56:	4601      	mov	r1, r0
 8008e58:	9001      	str	r0, [sp, #4]
 8008e5a:	f013 0402 	ands.w	r4, r3, #2
 8008e5e:	d104      	bne.n	8008e6a <WM__ClipAtParentBorders+0x22>
 8008e60:	a801      	add	r0, sp, #4
 8008e62:	f7fb ff51 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008e66:	4620      	mov	r0, r4
 8008e68:	e016      	b.n	8008e98 <WM__ClipAtParentBorders+0x50>
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7fc fe06 	bl	8005a7c <GUI__IntersectRect>
 8008e70:	9b01      	ldr	r3, [sp, #4]
 8008e72:	a801      	add	r0, sp, #4
 8008e74:	699c      	ldr	r4, [r3, #24]
 8008e76:	b954      	cbnz	r4, 8008e8e <WM__ClipAtParentBorders+0x46>
 8008e78:	f7fb ff46 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008e7c:	4b07      	ldr	r3, [pc, #28]	; (8008e9c <WM__ClipAtParentBorders+0x54>)
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	4295      	cmp	r5, r2
 8008e82:	d008      	beq.n	8008e96 <WM__ClipAtParentBorders+0x4e>
 8008e84:	6858      	ldr	r0, [r3, #4]
 8008e86:	1b43      	subs	r3, r0, r5
 8008e88:	4258      	negs	r0, r3
 8008e8a:	4158      	adcs	r0, r3
 8008e8c:	e004      	b.n	8008e98 <WM__ClipAtParentBorders+0x50>
 8008e8e:	f7fb ff3b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008e92:	4625      	mov	r5, r4
 8008e94:	e7db      	b.n	8008e4e <WM__ClipAtParentBorders+0x6>
 8008e96:	2001      	movs	r0, #1
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	2001da04 	.word	0x2001da04

08008ea0 <WM__InsertWindowIntoList>:
 8008ea0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	2900      	cmp	r1, #0
 8008eaa:	d04c      	beq.n	8008f46 <WM__InsertWindowIntoList+0xa6>
 8008eac:	f7fb ff1e 	bl	8004cec <GUI_ALLOC_LockH>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6184      	str	r4, [r0, #24]
 8008eb4:	9001      	str	r0, [sp, #4]
 8008eb6:	6203      	str	r3, [r0, #32]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f7fb ff17 	bl	8004cec <GUI_ALLOC_LockH>
 8008ebe:	ac04      	add	r4, sp, #16
 8008ec0:	69c7      	ldr	r7, [r0, #28]
 8008ec2:	f844 0d08 	str.w	r0, [r4, #-8]!
 8008ec6:	b92f      	cbnz	r7, 8008ed4 <WM__InsertWindowIntoList+0x34>
 8008ec8:	61c6      	str	r6, [r0, #28]
 8008eca:	a801      	add	r0, sp, #4
 8008ecc:	f7fb ff1c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	e036      	b.n	8008f42 <WM__InsertWindowIntoList+0xa2>
 8008ed4:	9b01      	ldr	r3, [sp, #4]
 8008ed6:	f10d 0810 	add.w	r8, sp, #16
 8008eda:	4638      	mov	r0, r7
 8008edc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008ede:	f7fb ff05 	bl	8004cec <GUI_ALLOC_LockH>
 8008ee2:	f848 0d04 	str.w	r0, [r8, #-4]!
 8008ee6:	f005 0508 	and.w	r5, r5, #8
 8008eea:	b975      	cbnz	r5, 8008f0a <WM__InsertWindowIntoList+0x6a>
 8008eec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008eee:	071a      	lsls	r2, r3, #28
 8008ef0:	d50b      	bpl.n	8008f0a <WM__InsertWindowIntoList+0x6a>
 8008ef2:	9b01      	ldr	r3, [sp, #4]
 8008ef4:	a801      	add	r0, sp, #4
 8008ef6:	621f      	str	r7, [r3, #32]
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	61de      	str	r6, [r3, #28]
 8008efc:	f7fb ff04 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008f00:	4620      	mov	r0, r4
 8008f02:	f7fb ff01 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008f06:	4640      	mov	r0, r8
 8008f08:	e01b      	b.n	8008f42 <WM__InsertWindowIntoList+0xa2>
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7fb fefc 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008f10:	4640      	mov	r0, r8
 8008f12:	f7fb fef9 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008f16:	4638      	mov	r0, r7
 8008f18:	f7fb fede 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008f1c:	9003      	str	r0, [sp, #12]
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	6a1c      	ldr	r4, [r3, #32]
 8008f22:	b90c      	cbnz	r4, 8008f28 <WM__InsertWindowIntoList+0x88>
 8008f24:	621e      	str	r6, [r3, #32]
 8008f26:	e00b      	b.n	8008f40 <WM__InsertWindowIntoList+0xa0>
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f7fb fed5 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	d1f4      	bne.n	8008f1c <WM__InsertWindowIntoList+0x7c>
 8008f32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008f34:	071b      	lsls	r3, r3, #28
 8008f36:	d5f1      	bpl.n	8008f1c <WM__InsertWindowIntoList+0x7c>
 8008f38:	9b03      	ldr	r3, [sp, #12]
 8008f3a:	621e      	str	r6, [r3, #32]
 8008f3c:	9b01      	ldr	r3, [sp, #4]
 8008f3e:	621c      	str	r4, [r3, #32]
 8008f40:	a801      	add	r0, sp, #4
 8008f42:	f7fb fee1 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008f46:	b004      	add	sp, #16
 8008f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f4c <WM__RemoveWindowFromList>:
 8008f4c:	b570      	push	{r4, r5, r6, lr}
 8008f4e:	4604      	mov	r4, r0
 8008f50:	f7fb fec2 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008f54:	4605      	mov	r5, r0
 8008f56:	6980      	ldr	r0, [r0, #24]
 8008f58:	b1a8      	cbz	r0, 8008f86 <WM__RemoveWindowFromList+0x3a>
 8008f5a:	f7fb febd 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008f5e:	69c3      	ldr	r3, [r0, #28]
 8008f60:	4606      	mov	r6, r0
 8008f62:	429c      	cmp	r4, r3
 8008f64:	d105      	bne.n	8008f72 <WM__RemoveWindowFromList+0x26>
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7fb feb6 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008f6c:	6a03      	ldr	r3, [r0, #32]
 8008f6e:	61f3      	str	r3, [r6, #28]
 8008f70:	bd70      	pop	{r4, r5, r6, pc}
 8008f72:	b143      	cbz	r3, 8008f86 <WM__RemoveWindowFromList+0x3a>
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fb feaf 	bl	8004cd8 <GUI_ALLOC_h2p>
 8008f7a:	6a03      	ldr	r3, [r0, #32]
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d1f8      	bne.n	8008f72 <WM__RemoveWindowFromList+0x26>
 8008f80:	6a2b      	ldr	r3, [r5, #32]
 8008f82:	6203      	str	r3, [r0, #32]
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	bd70      	pop	{r4, r5, r6, pc}

08008f88 <WM__Client2Screen>:
 8008f88:	4603      	mov	r3, r0
 8008f8a:	4608      	mov	r0, r1
 8008f8c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008f90:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008f94:	f7fc b901 	b.w	800519a <GUI_MoveRect>

08008f98 <_SetClipRectUserIntersect>:
 8008f98:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <_SetClipRectUserIntersect+0x48>)
 8008f9a:	b530      	push	{r4, r5, lr}
 8008f9c:	681c      	ldr	r4, [r3, #0]
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008fa4:	b1ba      	cbz	r2, 8008fd6 <_SetClipRectUserIntersect+0x3e>
 8008fa6:	6810      	ldr	r0, [r2, #0]
 8008fa8:	ab02      	add	r3, sp, #8
 8008faa:	6851      	ldr	r1, [r2, #4]
 8008fac:	c303      	stmia	r3!, {r0, r1}
 8008fae:	4b0d      	ldr	r3, [pc, #52]	; (8008fe4 <_SetClipRectUserIntersect+0x4c>)
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	b900      	cbnz	r0, 8008fb6 <_SetClipRectUserIntersect+0x1e>
 8008fb4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008fb6:	ac04      	add	r4, sp, #16
 8008fb8:	f7fb fe98 	bl	8004cec <GUI_ALLOC_LockH>
 8008fbc:	a902      	add	r1, sp, #8
 8008fbe:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8008fc2:	f7ff ffe1 	bl	8008f88 <WM__Client2Screen>
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7fb fe9e 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8008fcc:	a802      	add	r0, sp, #8
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7fc fd54 	bl	8005a7c <GUI__IntersectRect>
 8008fd4:	a802      	add	r0, sp, #8
 8008fd6:	f002 fb25 	bl	800b624 <LCD_SetClipRectEx>
 8008fda:	b005      	add	sp, #20
 8008fdc:	bd30      	pop	{r4, r5, pc}
 8008fde:	bf00      	nop
 8008fe0:	20000014 	.word	0x20000014
 8008fe4:	2001da00 	.word	0x2001da00

08008fe8 <WM__ActivateClipRect>:
 8008fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fea:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <WM__ActivateClipRect+0x3c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008ff2:	b10a      	cbz	r2, 8008ff8 <WM__ActivateClipRect+0x10>
 8008ff4:	480c      	ldr	r0, [pc, #48]	; (8009028 <WM__ActivateClipRect+0x40>)
 8008ff6:	e011      	b.n	800901c <WM__ActivateClipRect+0x34>
 8008ff8:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8008ffa:	ac02      	add	r4, sp, #8
 8008ffc:	f7fb fe76 	bl	8004cec <GUI_ALLOC_LockH>
 8009000:	9001      	str	r0, [sp, #4]
 8009002:	c803      	ldmia	r0, {r0, r1}
 8009004:	e884 0003 	stmia.w	r4, {r0, r1}
 8009008:	a801      	add	r0, sp, #4
 800900a:	f7fb fe7d 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <WM__ActivateClipRect+0x44>)
 8009010:	6819      	ldr	r1, [r3, #0]
 8009012:	b111      	cbz	r1, 800901a <WM__ActivateClipRect+0x32>
 8009014:	4620      	mov	r0, r4
 8009016:	f7ff ff17 	bl	8008e48 <WM__ClipAtParentBorders>
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff ffbc 	bl	8008f98 <_SetClipRectUserIntersect>
 8009020:	b004      	add	sp, #16
 8009022:	bd10      	pop	{r4, pc}
 8009024:	20000014 	.word	0x20000014
 8009028:	200001ec 	.word	0x200001ec
 800902c:	2001da00 	.word	0x2001da00

08009030 <WM__IsWindow>:
 8009030:	4b06      	ldr	r3, [pc, #24]	; (800904c <WM__IsWindow+0x1c>)
 8009032:	b510      	push	{r4, lr}
 8009034:	4604      	mov	r4, r0
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	b128      	cbz	r0, 8009046 <WM__IsWindow+0x16>
 800903a:	42a0      	cmp	r0, r4
 800903c:	d004      	beq.n	8009048 <WM__IsWindow+0x18>
 800903e:	f7fb fe4b 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009042:	6940      	ldr	r0, [r0, #20]
 8009044:	e7f8      	b.n	8009038 <WM__IsWindow+0x8>
 8009046:	bd10      	pop	{r4, pc}
 8009048:	2001      	movs	r0, #1
 800904a:	bd10      	pop	{r4, pc}
 800904c:	2001da20 	.word	0x2001da20

08009050 <WM__InvalidateDrawAndDescs>:
 8009050:	b513      	push	{r0, r1, r4, lr}
 8009052:	4604      	mov	r4, r0
 8009054:	b300      	cbz	r0, 8009098 <WM__InvalidateDrawAndDescs+0x48>
 8009056:	f7fb fe49 	bl	8004cec <GUI_ALLOC_LockH>
 800905a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800905c:	9001      	str	r0, [sp, #4]
 800905e:	079b      	lsls	r3, r3, #30
 8009060:	d517      	bpl.n	8009092 <WM__InvalidateDrawAndDescs+0x42>
 8009062:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009064:	b140      	cbz	r0, 8009078 <WM__InvalidateDrawAndDescs+0x28>
 8009066:	4b0d      	ldr	r3, [pc, #52]	; (800909c <WM__InvalidateDrawAndDescs+0x4c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	429c      	cmp	r4, r3
 800906c:	d004      	beq.n	8009078 <WM__InvalidateDrawAndDescs+0x28>
 800906e:	f002 fbb5 	bl	800b7dc <GUI_MEMDEV_Delete>
 8009072:	2200      	movs	r2, #0
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	625a      	str	r2, [r3, #36]	; 0x24
 8009078:	4620      	mov	r0, r4
 800907a:	f000 fe81 	bl	8009d80 <WM_GetFirstChild>
 800907e:	4604      	mov	r4, r0
 8009080:	b13c      	cbz	r4, 8009092 <WM__InvalidateDrawAndDescs+0x42>
 8009082:	4620      	mov	r0, r4
 8009084:	f7ff ffe4 	bl	8009050 <WM__InvalidateDrawAndDescs>
 8009088:	4620      	mov	r0, r4
 800908a:	f7fb fe25 	bl	8004cd8 <GUI_ALLOC_h2p>
 800908e:	6a04      	ldr	r4, [r0, #32]
 8009090:	e7f6      	b.n	8009080 <WM__InvalidateDrawAndDescs+0x30>
 8009092:	a801      	add	r0, sp, #4
 8009094:	f7fb fe38 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009098:	b002      	add	sp, #8
 800909a:	bd10      	pop	{r4, pc}
 800909c:	2001da50 	.word	0x2001da50

080090a0 <WM__RectIsNZ>:
 80090a0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80090a4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	dc08      	bgt.n	80090be <WM__RectIsNZ+0x1e>
 80090ac:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80090b0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80090b4:	4283      	cmp	r3, r0
 80090b6:	bfcc      	ite	gt
 80090b8:	2000      	movgt	r0, #0
 80090ba:	2001      	movle	r0, #1
 80090bc:	4770      	bx	lr
 80090be:	2000      	movs	r0, #0
 80090c0:	4770      	bx	lr

080090c2 <WM__SendMsgNoData>:
 80090c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c4:	ab04      	add	r3, sp, #16
 80090c6:	9001      	str	r0, [sp, #4]
 80090c8:	f843 1d10 	str.w	r1, [r3, #-16]!
 80090cc:	4619      	mov	r1, r3
 80090ce:	f001 f86b 	bl	800a1a8 <WM__SendMessage>
 80090d2:	b005      	add	sp, #20
 80090d4:	f85d fb04 	ldr.w	pc, [sp], #4

080090d8 <WM__GetClientRectWin>:
 80090d8:	2300      	movs	r3, #0
 80090da:	804b      	strh	r3, [r1, #2]
 80090dc:	800b      	strh	r3, [r1, #0]
 80090de:	8883      	ldrh	r3, [r0, #4]
 80090e0:	8802      	ldrh	r2, [r0, #0]
 80090e2:	1a9b      	subs	r3, r3, r2
 80090e4:	8842      	ldrh	r2, [r0, #2]
 80090e6:	808b      	strh	r3, [r1, #4]
 80090e8:	88c3      	ldrh	r3, [r0, #6]
 80090ea:	1a9b      	subs	r3, r3, r2
 80090ec:	80cb      	strh	r3, [r1, #6]
 80090ee:	4770      	bx	lr

080090f0 <WM__GetTopLevelLayer>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	4604      	mov	r4, r0
 80090f4:	f7fb fdf0 	bl	8004cd8 <GUI_ALLOC_h2p>
 80090f8:	6980      	ldr	r0, [r0, #24]
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d1f9      	bne.n	80090f2 <WM__GetTopLevelLayer+0x2>
 80090fe:	4b05      	ldr	r3, [pc, #20]	; (8009114 <WM__GetTopLevelLayer+0x24>)
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4294      	cmp	r4, r2
 8009104:	d005      	beq.n	8009112 <WM__GetTopLevelLayer+0x22>
 8009106:	6858      	ldr	r0, [r3, #4]
 8009108:	4284      	cmp	r4, r0
 800910a:	bf0c      	ite	eq
 800910c:	2001      	moveq	r0, #1
 800910e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009112:	bd10      	pop	{r4, pc}
 8009114:	2001da04 	.word	0x2001da04

08009118 <_Invalidate1Abs>:
 8009118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800911a:	b085      	sub	sp, #20
 800911c:	460d      	mov	r5, r1
 800911e:	4606      	mov	r6, r0
 8009120:	4617      	mov	r7, r2
 8009122:	f7fb fdd9 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009126:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009128:	9001      	str	r0, [sp, #4]
 800912a:	078b      	lsls	r3, r1, #30
 800912c:	d53e      	bpl.n	80091ac <_Invalidate1Abs+0x94>
 800912e:	4628      	mov	r0, r5
 8009130:	f7ff ffb6 	bl	80090a0 <WM__RectIsNZ>
 8009134:	2800      	cmp	r0, #0
 8009136:	d039      	beq.n	80091ac <_Invalidate1Abs+0x94>
 8009138:	f640 0301 	movw	r3, #2049	; 0x801
 800913c:	400b      	ands	r3, r1
 800913e:	2b01      	cmp	r3, #1
 8009140:	d034      	beq.n	80091ac <_Invalidate1Abs+0x94>
 8009142:	ac02      	add	r4, sp, #8
 8009144:	4630      	mov	r0, r6
 8009146:	f7fb fdd1 	bl	8004cec <GUI_ALLOC_LockH>
 800914a:	4629      	mov	r1, r5
 800914c:	4602      	mov	r2, r0
 800914e:	9001      	str	r0, [sp, #4]
 8009150:	4620      	mov	r0, r4
 8009152:	f7fc fcb0 	bl	8005ab6 <GUI__IntersectRects>
 8009156:	4620      	mov	r0, r4
 8009158:	f7ff ffa2 	bl	80090a0 <WM__RectIsNZ>
 800915c:	b318      	cbz	r0, 80091a6 <_Invalidate1Abs+0x8e>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	f244 0120 	movw	r1, #16416	; 0x4020
 8009164:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009166:	f103 0508 	add.w	r5, r3, #8
 800916a:	4011      	ands	r1, r2
 800916c:	b129      	cbz	r1, 800917a <_Invalidate1Abs+0x62>
 800916e:	4622      	mov	r2, r4
 8009170:	4629      	mov	r1, r5
 8009172:	4628      	mov	r0, r5
 8009174:	f7fb ffe6 	bl	8005144 <GUI_MergeRect>
 8009178:	e015      	b.n	80091a6 <_Invalidate1Abs+0x8e>
 800917a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800917e:	433a      	orrs	r2, r7
 8009180:	e885 0003 	stmia.w	r5, {r0, r1}
 8009184:	629a      	str	r2, [r3, #40]	; 0x28
 8009186:	4630      	mov	r0, r6
 8009188:	4a09      	ldr	r2, [pc, #36]	; (80091b0 <_Invalidate1Abs+0x98>)
 800918a:	8813      	ldrh	r3, [r2, #0]
 800918c:	3301      	adds	r3, #1
 800918e:	8013      	strh	r3, [r2, #0]
 8009190:	f7ff ffae 	bl	80090f0 <WM__GetTopLevelLayer>
 8009194:	4a07      	ldr	r2, [pc, #28]	; (80091b4 <_Invalidate1Abs+0x9c>)
 8009196:	2301      	movs	r3, #1
 8009198:	fa03 f000 	lsl.w	r0, r3, r0
 800919c:	6813      	ldr	r3, [r2, #0]
 800919e:	4303      	orrs	r3, r0
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	f7fc fc63 	bl	8005a6c <GUI_SignalEvent>
 80091a6:	a801      	add	r0, sp, #4
 80091a8:	f7fb fdae 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80091ac:	b005      	add	sp, #20
 80091ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b0:	2001da1c 	.word	0x2001da1c
 80091b4:	2001da2c 	.word	0x2001da2c

080091b8 <WM__Invalidate1Abs>:
 80091b8:	2220      	movs	r2, #32
 80091ba:	f7ff bfad 	b.w	8009118 <_Invalidate1Abs>

080091be <WM_InvalidateWindowAndDescsEx>:
 80091be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091c0:	460f      	mov	r7, r1
 80091c2:	b085      	sub	sp, #20
 80091c4:	4615      	mov	r5, r2
 80091c6:	4606      	mov	r6, r0
 80091c8:	b348      	cbz	r0, 800921e <WM_InvalidateWindowAndDescsEx+0x60>
 80091ca:	f7fb fd8f 	bl	8004cec <GUI_ALLOC_LockH>
 80091ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80091d0:	ac04      	add	r4, sp, #16
 80091d2:	4602      	mov	r2, r0
 80091d4:	079b      	lsls	r3, r3, #30
 80091d6:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80091da:	d403      	bmi.n	80091e4 <WM_InvalidateWindowAndDescsEx+0x26>
 80091dc:	4620      	mov	r0, r4
 80091de:	f7fb fd93 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80091e2:	e01c      	b.n	800921e <WM_InvalidateWindowAndDescsEx+0x60>
 80091e4:	4639      	mov	r1, r7
 80091e6:	a802      	add	r0, sp, #8
 80091e8:	f7fc fc65 	bl	8005ab6 <GUI__IntersectRects>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0f5      	beq.n	80091dc <WM_InvalidateWindowAndDescsEx+0x1e>
 80091f0:	4620      	mov	r0, r4
 80091f2:	f7fb fd89 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80091f6:	462a      	mov	r2, r5
 80091f8:	a902      	add	r1, sp, #8
 80091fa:	4630      	mov	r0, r6
 80091fc:	f7ff ff8c 	bl	8009118 <_Invalidate1Abs>
 8009200:	4630      	mov	r0, r6
 8009202:	f000 fdbd 	bl	8009d80 <WM_GetFirstChild>
 8009206:	4604      	mov	r4, r0
 8009208:	b14c      	cbz	r4, 800921e <WM_InvalidateWindowAndDescsEx+0x60>
 800920a:	4620      	mov	r0, r4
 800920c:	462a      	mov	r2, r5
 800920e:	a902      	add	r1, sp, #8
 8009210:	f7ff ffd5 	bl	80091be <WM_InvalidateWindowAndDescsEx>
 8009214:	4620      	mov	r0, r4
 8009216:	f7fb fd5f 	bl	8004cd8 <GUI_ALLOC_h2p>
 800921a:	6a04      	ldr	r4, [r0, #32]
 800921c:	e7f4      	b.n	8009208 <WM_InvalidateWindowAndDescsEx+0x4a>
 800921e:	b005      	add	sp, #20
 8009220:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009222 <WM__InvalidateRect>:
 8009222:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009226:	4680      	mov	r8, r0
 8009228:	4617      	mov	r7, r2
 800922a:	461d      	mov	r5, r3
 800922c:	460c      	mov	r4, r1
 800922e:	b381      	cbz	r1, 8009292 <WM__InvalidateRect+0x70>
 8009230:	4608      	mov	r0, r1
 8009232:	f7fb fd5b 	bl	8004cec <GUI_ALLOC_LockH>
 8009236:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009238:	4602      	mov	r2, r0
 800923a:	9001      	str	r0, [sp, #4]
 800923c:	07b3      	lsls	r3, r6, #30
 800923e:	d525      	bpl.n	800928c <WM__InvalidateRect+0x6a>
 8009240:	4641      	mov	r1, r8
 8009242:	a802      	add	r0, sp, #8
 8009244:	f7fc fc37 	bl	8005ab6 <GUI__IntersectRects>
 8009248:	b300      	cbz	r0, 800928c <WM__InvalidateRect+0x6a>
 800924a:	f640 0301 	movw	r3, #2049	; 0x801
 800924e:	4033      	ands	r3, r6
 8009250:	2b01      	cmp	r3, #1
 8009252:	d107      	bne.n	8009264 <WM__InvalidateRect+0x42>
 8009254:	9901      	ldr	r1, [sp, #4]
 8009256:	462b      	mov	r3, r5
 8009258:	a802      	add	r0, sp, #8
 800925a:	6a0a      	ldr	r2, [r1, #32]
 800925c:	6989      	ldr	r1, [r1, #24]
 800925e:	f7ff ffe0 	bl	8009222 <WM__InvalidateRect>
 8009262:	e004      	b.n	800926e <WM__InvalidateRect+0x4c>
 8009264:	462a      	mov	r2, r5
 8009266:	a902      	add	r1, sp, #8
 8009268:	4620      	mov	r0, r4
 800926a:	f7ff ff55 	bl	8009118 <_Invalidate1Abs>
 800926e:	9b01      	ldr	r3, [sp, #4]
 8009270:	69dc      	ldr	r4, [r3, #28]
 8009272:	b15c      	cbz	r4, 800928c <WM__InvalidateRect+0x6a>
 8009274:	42bc      	cmp	r4, r7
 8009276:	d009      	beq.n	800928c <WM__InvalidateRect+0x6a>
 8009278:	4620      	mov	r0, r4
 800927a:	462a      	mov	r2, r5
 800927c:	a902      	add	r1, sp, #8
 800927e:	f7ff ff9e 	bl	80091be <WM_InvalidateWindowAndDescsEx>
 8009282:	4620      	mov	r0, r4
 8009284:	f7fb fd28 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009288:	6a04      	ldr	r4, [r0, #32]
 800928a:	e7f2      	b.n	8009272 <WM__InvalidateRect+0x50>
 800928c:	a801      	add	r0, sp, #4
 800928e:	f7fb fd3b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009292:	b004      	add	sp, #16
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009298 <WM__InvalidateParent>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	4605      	mov	r5, r0
 800929c:	4608      	mov	r0, r1
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	f7fb fd19 	bl	8004cd8 <GUI_ALLOC_h2p>
 80092a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80092a8:	4632      	mov	r2, r6
 80092aa:	4621      	mov	r1, r4
 80092ac:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80092b0:	4628      	mov	r0, r5
 80092b2:	bf14      	ite	ne
 80092b4:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 80092b8:	2320      	moveq	r3, #32
 80092ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092be:	f7ff bfb0 	b.w	8009222 <WM__InvalidateRect>

080092c2 <WM__InvalidateRectEx>:
 80092c2:	2320      	movs	r3, #32
 80092c4:	f7ff bfad 	b.w	8009222 <WM__InvalidateRect>

080092c8 <WM__DetachWindow>:
 80092c8:	b513      	push	{r0, r1, r4, lr}
 80092ca:	4604      	mov	r4, r0
 80092cc:	f7fb fd0e 	bl	8004cec <GUI_ALLOC_LockH>
 80092d0:	6981      	ldr	r1, [r0, #24]
 80092d2:	9001      	str	r0, [sp, #4]
 80092d4:	b141      	cbz	r1, 80092e8 <WM__DetachWindow+0x20>
 80092d6:	6a02      	ldr	r2, [r0, #32]
 80092d8:	f7ff fff3 	bl	80092c2 <WM__InvalidateRectEx>
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff fe35 	bl	8008f4c <WM__RemoveWindowFromList>
 80092e2:	2200      	movs	r2, #0
 80092e4:	9b01      	ldr	r3, [sp, #4]
 80092e6:	619a      	str	r2, [r3, #24]
 80092e8:	a801      	add	r0, sp, #4
 80092ea:	f7fb fd0d 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80092ee:	b002      	add	sp, #8
 80092f0:	bd10      	pop	{r4, pc}

080092f2 <WM_InvalidateRect>:
 80092f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092f4:	460f      	mov	r7, r1
 80092f6:	b087      	sub	sp, #28
 80092f8:	4605      	mov	r5, r0
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d033      	beq.n	8009366 <WM_InvalidateRect+0x74>
 80092fe:	f7fb fcf5 	bl	8004cec <GUI_ALLOC_LockH>
 8009302:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009304:	9001      	str	r0, [sp, #4]
 8009306:	07b2      	lsls	r2, r6, #30
 8009308:	d52a      	bpl.n	8009360 <WM_InvalidateRect+0x6e>
 800930a:	ac04      	add	r4, sp, #16
 800930c:	03f3      	lsls	r3, r6, #15
 800930e:	c803      	ldmia	r0, {r0, r1}
 8009310:	e884 0003 	stmia.w	r4, {r0, r1}
 8009314:	d502      	bpl.n	800931c <WM_InvalidateRect+0x2a>
 8009316:	4628      	mov	r0, r5
 8009318:	f7ff fe9a 	bl	8009050 <WM__InvalidateDrawAndDescs>
 800931c:	b15f      	cbz	r7, 8009336 <WM_InvalidateRect+0x44>
 800931e:	6838      	ldr	r0, [r7, #0]
 8009320:	ab02      	add	r3, sp, #8
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	c303      	stmia	r3!, {r0, r1}
 8009326:	a902      	add	r1, sp, #8
 8009328:	9801      	ldr	r0, [sp, #4]
 800932a:	f7ff fe2d 	bl	8008f88 <WM__Client2Screen>
 800932e:	a902      	add	r1, sp, #8
 8009330:	4620      	mov	r0, r4
 8009332:	f7fc fba3 	bl	8005a7c <GUI__IntersectRect>
 8009336:	4629      	mov	r1, r5
 8009338:	4620      	mov	r0, r4
 800933a:	f7ff fd85 	bl	8008e48 <WM__ClipAtParentBorders>
 800933e:	b178      	cbz	r0, 8009360 <WM_InvalidateRect+0x6e>
 8009340:	f640 0301 	movw	r3, #2049	; 0x801
 8009344:	4033      	ands	r3, r6
 8009346:	2b01      	cmp	r3, #1
 8009348:	d106      	bne.n	8009358 <WM_InvalidateRect+0x66>
 800934a:	9b01      	ldr	r3, [sp, #4]
 800934c:	4620      	mov	r0, r4
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	6999      	ldr	r1, [r3, #24]
 8009352:	f7ff ffb6 	bl	80092c2 <WM__InvalidateRectEx>
 8009356:	e003      	b.n	8009360 <WM_InvalidateRect+0x6e>
 8009358:	4621      	mov	r1, r4
 800935a:	4628      	mov	r0, r5
 800935c:	f7ff ff2c 	bl	80091b8 <WM__Invalidate1Abs>
 8009360:	a801      	add	r0, sp, #4
 8009362:	f7fb fcd1 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009366:	b007      	add	sp, #28
 8009368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800936a <WM_InvalidateWindow>:
 800936a:	2100      	movs	r1, #0
 800936c:	f7ff bfc1 	b.w	80092f2 <WM_InvalidateRect>

08009370 <WM__SelectTopLevelLayer>:
 8009370:	b508      	push	{r3, lr}
 8009372:	f7ff febd 	bl	80090f0 <WM__GetTopLevelLayer>
 8009376:	2800      	cmp	r0, #0
 8009378:	db03      	blt.n	8009382 <WM__SelectTopLevelLayer+0x12>
 800937a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800937e:	f001 bad5 	b.w	800a92c <GUI_SelectLayer>
 8009382:	bd08      	pop	{r3, pc}

08009384 <WM_SelectWindow>:
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <WM_SelectWindow+0x38>)
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	b570      	push	{r4, r5, r6, lr}
 800938a:	6c96      	ldr	r6, [r2, #72]	; 0x48
 800938c:	4604      	mov	r4, r0
 800938e:	461d      	mov	r5, r3
 8009390:	b908      	cbnz	r0, 8009396 <WM_SelectWindow+0x12>
 8009392:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <WM_SelectWindow+0x3c>)
 8009394:	681c      	ldr	r4, [r3, #0]
 8009396:	6494      	str	r4, [r2, #72]	; 0x48
 8009398:	4620      	mov	r0, r4
 800939a:	f7ff ffe9 	bl	8009370 <WM__SelectTopLevelLayer>
 800939e:	f7fc fe83 	bl	80060a8 <LCD_SetClipRectMax>
 80093a2:	4620      	mov	r0, r4
 80093a4:	f7fb fc98 	bl	8004cd8 <GUI_ALLOC_h2p>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	f9b0 2000 	ldrsh.w	r2, [r0]
 80093ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80093b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80093b4:	4630      	mov	r0, r6
 80093b6:	651a      	str	r2, [r3, #80]	; 0x50
 80093b8:	bd70      	pop	{r4, r5, r6, pc}
 80093ba:	bf00      	nop
 80093bc:	20000014 	.word	0x20000014
 80093c0:	2001da20 	.word	0x2001da20

080093c4 <WM_CreateWindowAsChild>:
 80093c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093cc:	4698      	mov	r8, r3
 80093ce:	4b4e      	ldr	r3, [pc, #312]	; (8009508 <WM_CreateWindowAsChild+0x144>)
 80093d0:	4605      	mov	r5, r0
 80093d2:	460e      	mov	r6, r1
 80093d4:	4617      	mov	r7, r2
 80093d6:	f8d3 9000 	ldr.w	r9, [r3]
 80093da:	f1ba 0f00 	cmp.w	sl, #0
 80093de:	d128      	bne.n	8009432 <WM_CreateWindowAsChild+0x6e>
 80093e0:	4b4a      	ldr	r3, [pc, #296]	; (800950c <WM_CreateWindowAsChild+0x148>)
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	b353      	cbz	r3, 800943c <WM_CreateWindowAsChild+0x78>
 80093e6:	4b4a      	ldr	r3, [pc, #296]	; (8009510 <WM_CreateWindowAsChild+0x14c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	7c5a      	ldrb	r2, [r3, #17]
 80093ec:	4b49      	ldr	r3, [pc, #292]	; (8009514 <WM_CreateWindowAsChild+0x150>)
 80093ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	2a01      	cmp	r2, #1
 80093f6:	d921      	bls.n	800943c <WM_CreateWindowAsChild+0x78>
 80093f8:	469a      	mov	sl, r3
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7fb fc76 	bl	8004cec <GUI_ALLOC_LockH>
 8009400:	f9b0 1000 	ldrsh.w	r1, [r0]
 8009404:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009408:	9001      	str	r0, [sp, #4]
 800940a:	440d      	add	r5, r1
 800940c:	4416      	add	r6, r2
 800940e:	b91f      	cbnz	r7, 8009418 <WM_CreateWindowAsChild+0x54>
 8009410:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009414:	1a5f      	subs	r7, r3, r1
 8009416:	3701      	adds	r7, #1
 8009418:	f1b8 0f00 	cmp.w	r8, #0
 800941c:	d105      	bne.n	800942a <WM_CreateWindowAsChild+0x66>
 800941e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8009422:	ebc2 0803 	rsb	r8, r2, r3
 8009426:	f108 0801 	add.w	r8, r8, #1
 800942a:	a801      	add	r0, sp, #4
 800942c:	f7fb fc6c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009430:	e004      	b.n	800943c <WM_CreateWindowAsChild+0x78>
 8009432:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009436:	d1e0      	bne.n	80093fa <WM_CreateWindowAsChild+0x36>
 8009438:	f04f 0a00 	mov.w	sl, #0
 800943c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800943e:	302c      	adds	r0, #44	; 0x2c
 8009440:	f7fb fe18 	bl	8005074 <GUI_ALLOC_AllocZero>
 8009444:	4604      	mov	r4, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d059      	beq.n	80094fe <WM_CreateWindowAsChild+0x13a>
 800944a:	4a30      	ldr	r2, [pc, #192]	; (800950c <WM_CreateWindowAsChild+0x148>)
 800944c:	f10d 0b08 	add.w	fp, sp, #8
 8009450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009452:	ea49 0903 	orr.w	r9, r9, r3
 8009456:	8813      	ldrh	r3, [r2, #0]
 8009458:	3301      	adds	r3, #1
 800945a:	8013      	strh	r3, [r2, #0]
 800945c:	f7fb fc46 	bl	8004cec <GUI_ALLOC_LockH>
 8009460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009462:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8009466:	6103      	str	r3, [r0, #16]
 8009468:	4b2b      	ldr	r3, [pc, #172]	; (8009518 <WM_CreateWindowAsChild+0x154>)
 800946a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800946c:	8005      	strh	r5, [r0, #0]
 800946e:	ea09 0303 	and.w	r3, r9, r3
 8009472:	8046      	strh	r6, [r0, #2]
 8009474:	443d      	add	r5, r7
 8009476:	4446      	add	r6, r8
 8009478:	4313      	orrs	r3, r2
 800947a:	3d01      	subs	r5, #1
 800947c:	3e01      	subs	r6, #1
 800947e:	6283      	str	r3, [r0, #40]	; 0x28
 8009480:	8085      	strh	r5, [r0, #4]
 8009482:	80c6      	strh	r6, [r0, #6]
 8009484:	4658      	mov	r0, fp
 8009486:	f7fb fc3f 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800948a:	4b24      	ldr	r3, [pc, #144]	; (800951c <WM_CreateWindowAsChild+0x158>)
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	b148      	cbz	r0, 80094a4 <WM_CreateWindowAsChild+0xe0>
 8009490:	f7fb fc22 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009494:	4605      	mov	r5, r0
 8009496:	4620      	mov	r0, r4
 8009498:	f7fb fc1e 	bl	8004cd8 <GUI_ALLOC_h2p>
 800949c:	696b      	ldr	r3, [r5, #20]
 800949e:	6143      	str	r3, [r0, #20]
 80094a0:	616c      	str	r4, [r5, #20]
 80094a2:	e000      	b.n	80094a6 <WM_CreateWindowAsChild+0xe2>
 80094a4:	601c      	str	r4, [r3, #0]
 80094a6:	4651      	mov	r1, sl
 80094a8:	4620      	mov	r0, r4
 80094aa:	f7ff fcf9 	bl	8008ea0 <WM__InsertWindowIntoList>
 80094ae:	f019 0f20 	tst.w	r9, #32
 80094b2:	d002      	beq.n	80094ba <WM_CreateWindowAsChild+0xf6>
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7ff ff65 	bl	8009384 <WM_SelectWindow>
 80094ba:	f019 0f01 	tst.w	r9, #1
 80094be:	bf1f      	itttt	ne
 80094c0:	4a17      	ldrne	r2, [pc, #92]	; (8009520 <WM_CreateWindowAsChild+0x15c>)
 80094c2:	6813      	ldrne	r3, [r2, #0]
 80094c4:	3301      	addne	r3, #1
 80094c6:	6013      	strne	r3, [r2, #0]
 80094c8:	f019 0f40 	tst.w	r9, #64	; 0x40
 80094cc:	d002      	beq.n	80094d4 <WM_CreateWindowAsChild+0x110>
 80094ce:	4620      	mov	r0, r4
 80094d0:	f000 fc6e 	bl	8009db0 <WM_BringToBottom>
 80094d4:	f019 0f02 	tst.w	r9, #2
 80094d8:	d00d      	beq.n	80094f6 <WM_CreateWindowAsChild+0x132>
 80094da:	4620      	mov	r0, r4
 80094dc:	f7fb fc06 	bl	8004cec <GUI_ALLOC_LockH>
 80094e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80094e2:	9000      	str	r0, [sp, #0]
 80094e4:	f043 0302 	orr.w	r3, r3, #2
 80094e8:	6283      	str	r3, [r0, #40]	; 0x28
 80094ea:	4658      	mov	r0, fp
 80094ec:	f7fb fc0c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7ff ff3a 	bl	800936a <WM_InvalidateWindow>
 80094f6:	2101      	movs	r1, #1
 80094f8:	4620      	mov	r0, r4
 80094fa:	f7ff fde2 	bl	80090c2 <WM__SendMsgNoData>
 80094fe:	4620      	mov	r0, r4
 8009500:	b003      	add	sp, #12
 8009502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009506:	bf00      	nop
 8009508:	2001da34 	.word	0x2001da34
 800950c:	2001d9fc 	.word	0x2001d9fc
 8009510:	20000014 	.word	0x20000014
 8009514:	2001da04 	.word	0x2001da04
 8009518:	003f3f9f 	.word	0x003f3f9f
 800951c:	2001da20 	.word	0x2001da20
 8009520:	2001da54 	.word	0x2001da54

08009524 <WM_DeleteWindow>:
 8009524:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009526:	4604      	mov	r4, r0
 8009528:	2800      	cmp	r0, #0
 800952a:	d071      	beq.n	8009610 <WM_DeleteWindow+0xec>
 800952c:	f7ff fd80 	bl	8009030 <WM__IsWindow>
 8009530:	2800      	cmp	r0, #0
 8009532:	d06d      	beq.n	8009610 <WM_DeleteWindow+0xec>
 8009534:	4620      	mov	r0, r4
 8009536:	f7ff fddb 	bl	80090f0 <WM__GetTopLevelLayer>
 800953a:	210b      	movs	r1, #11
 800953c:	4605      	mov	r5, r0
 800953e:	4620      	mov	r0, r4
 8009540:	f7ff fdbf 	bl	80090c2 <WM__SendMsgNoData>
 8009544:	4620      	mov	r0, r4
 8009546:	f000 fdee 	bl	800a126 <WM__DeleteAssocTimer>
 800954a:	4620      	mov	r0, r4
 800954c:	f7fb fbce 	bl	8004cec <GUI_ALLOC_LockH>
 8009550:	9001      	str	r0, [sp, #4]
 8009552:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009554:	b108      	cbz	r0, 800955a <WM_DeleteWindow+0x36>
 8009556:	f002 f941 	bl	800b7dc <GUI_MEMDEV_Delete>
 800955a:	2100      	movs	r1, #0
 800955c:	4b2d      	ldr	r3, [pc, #180]	; (8009614 <WM_DeleteWindow+0xf0>)
 800955e:	4a2e      	ldr	r2, [pc, #184]	; (8009618 <WM_DeleteWindow+0xf4>)
 8009560:	6099      	str	r1, [r3, #8]
 8009562:	4b2e      	ldr	r3, [pc, #184]	; (800961c <WM_DeleteWindow+0xf8>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800956a:	4284      	cmp	r4, r0
 800956c:	bf08      	it	eq
 800956e:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8009572:	4a2b      	ldr	r2, [pc, #172]	; (8009620 <WM_DeleteWindow+0xfc>)
 8009574:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009578:	428c      	cmp	r4, r1
 800957a:	bf04      	itt	eq
 800957c:	2100      	moveq	r1, #0
 800957e:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8009582:	2200      	movs	r2, #0
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <WM_DeleteWindow+0x100>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	b12b      	cbz	r3, 8009596 <WM_DeleteWindow+0x72>
 800958a:	6859      	ldr	r1, [r3, #4]
 800958c:	428c      	cmp	r4, r1
 800958e:	d100      	bne.n	8009592 <WM_DeleteWindow+0x6e>
 8009590:	605a      	str	r2, [r3, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	e7f8      	b.n	8009588 <WM_DeleteWindow+0x64>
 8009596:	2107      	movs	r1, #7
 8009598:	4620      	mov	r0, r4
 800959a:	f000 fcf2 	bl	8009f82 <WM_NotifyParent>
 800959e:	9e01      	ldr	r6, [sp, #4]
 80095a0:	69f0      	ldr	r0, [r6, #28]
 80095a2:	f7ff ffbf 	bl	8009524 <WM_DeleteWindow>
 80095a6:	69f3      	ldr	r3, [r6, #28]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1f9      	bne.n	80095a0 <WM_DeleteWindow+0x7c>
 80095ac:	4620      	mov	r0, r4
 80095ae:	f7ff fe8b 	bl	80092c8 <WM__DetachWindow>
 80095b2:	4b1d      	ldr	r3, [pc, #116]	; (8009628 <WM_DeleteWindow+0x104>)
 80095b4:	6818      	ldr	r0, [r3, #0]
 80095b6:	b150      	cbz	r0, 80095ce <WM_DeleteWindow+0xaa>
 80095b8:	f7fb fb8e 	bl	8004cd8 <GUI_ALLOC_h2p>
 80095bc:	4606      	mov	r6, r0
 80095be:	6940      	ldr	r0, [r0, #20]
 80095c0:	4284      	cmp	r4, r0
 80095c2:	d1f8      	bne.n	80095b6 <WM_DeleteWindow+0x92>
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7fb fb87 	bl	8004cd8 <GUI_ALLOC_h2p>
 80095ca:	6943      	ldr	r3, [r0, #20]
 80095cc:	6173      	str	r3, [r6, #20]
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	a801      	add	r0, sp, #4
 80095d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095d4:	07d1      	lsls	r1, r2, #31
 80095d6:	bf41      	itttt	mi
 80095d8:	4914      	ldrmi	r1, [pc, #80]	; (800962c <WM_DeleteWindow+0x108>)
 80095da:	680b      	ldrmi	r3, [r1, #0]
 80095dc:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 80095e0:	600b      	strmi	r3, [r1, #0]
 80095e2:	0693      	lsls	r3, r2, #26
 80095e4:	bf41      	itttt	mi
 80095e6:	4a12      	ldrmi	r2, [pc, #72]	; (8009630 <WM_DeleteWindow+0x10c>)
 80095e8:	8813      	ldrhmi	r3, [r2, #0]
 80095ea:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 80095ee:	8013      	strhmi	r3, [r2, #0]
 80095f0:	f7fb fb8a 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80095f4:	4a0f      	ldr	r2, [pc, #60]	; (8009634 <WM_DeleteWindow+0x110>)
 80095f6:	4620      	mov	r0, r4
 80095f8:	8813      	ldrh	r3, [r2, #0]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	8013      	strh	r3, [r2, #0]
 80095fe:	f7fb fba3 	bl	8004d48 <GUI_ALLOC_Free>
 8009602:	2d00      	cmp	r5, #0
 8009604:	db04      	blt.n	8009610 <WM_DeleteWindow+0xec>
 8009606:	4b0c      	ldr	r3, [pc, #48]	; (8009638 <WM_DeleteWindow+0x114>)
 8009608:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800960c:	f7ff feba 	bl	8009384 <WM_SelectWindow>
 8009610:	b002      	add	sp, #8
 8009612:	bd70      	pop	{r4, r5, r6, pc}
 8009614:	200001d8 	.word	0x200001d8
 8009618:	2001da14 	.word	0x2001da14
 800961c:	2001da24 	.word	0x2001da24
 8009620:	2001da48 	.word	0x2001da48
 8009624:	2001da40 	.word	0x2001da40
 8009628:	2001da20 	.word	0x2001da20
 800962c:	2001da54 	.word	0x2001da54
 8009630:	2001da1c 	.word	0x2001da1c
 8009634:	2001d9fc 	.word	0x2001d9fc
 8009638:	2001da04 	.word	0x2001da04

0800963c <_Exec1Input>:
 800963c:	4b1b      	ldr	r3, [pc, #108]	; (80096ac <_Exec1Input+0x70>)
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009642:	461d      	mov	r5, r3
 8009644:	b1ca      	cbz	r2, 800967a <_Exec1Input+0x3e>
 8009646:	4b1a      	ldr	r3, [pc, #104]	; (80096b0 <_Exec1Input+0x74>)
 8009648:	681c      	ldr	r4, [r3, #0]
 800964a:	b1ac      	cbz	r4, 8009678 <_Exec1Input+0x3c>
 800964c:	4620      	mov	r0, r4
 800964e:	f7fb fb4d 	bl	8004cec <GUI_ALLOC_LockH>
 8009652:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009654:	9001      	str	r0, [sp, #4]
 8009656:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800965a:	6946      	ldr	r6, [r0, #20]
 800965c:	d007      	beq.n	800966e <_Exec1Input+0x32>
 800965e:	a801      	add	r0, sp, #4
 8009660:	f7fb fb52 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009664:	4620      	mov	r0, r4
 8009666:	f7ff ff5d 	bl	8009524 <WM_DeleteWindow>
 800966a:	4634      	mov	r4, r6
 800966c:	e7ed      	b.n	800964a <_Exec1Input+0xe>
 800966e:	a801      	add	r0, sp, #4
 8009670:	4634      	mov	r4, r6
 8009672:	f7fb fb49 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009676:	e7e8      	b.n	800964a <_Exec1Input+0xe>
 8009678:	606c      	str	r4, [r5, #4]
 800967a:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <_Exec1Input+0x78>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	b103      	cbz	r3, 8009682 <_Exec1Input+0x46>
 8009680:	4798      	blx	r3
 8009682:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <_Exec1Input+0x7c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	b953      	cbnz	r3, 800969e <_Exec1Input+0x62>
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <_Exec1Input+0x80>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8009690:	b148      	cbz	r0, 80096a6 <_Exec1Input+0x6a>
 8009692:	f7fc f9a3 	bl	80059dc <GUI_PollKeyMsg>
 8009696:	3000      	adds	r0, #0
 8009698:	bf18      	it	ne
 800969a:	2001      	movne	r0, #1
 800969c:	e003      	b.n	80096a6 <_Exec1Input+0x6a>
 800969e:	4798      	blx	r3
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d0f1      	beq.n	8009688 <_Exec1Input+0x4c>
 80096a4:	2001      	movs	r0, #1
 80096a6:	b002      	add	sp, #8
 80096a8:	bd70      	pop	{r4, r5, r6, pc}
 80096aa:	bf00      	nop
 80096ac:	200001d8 	.word	0x200001d8
 80096b0:	2001da20 	.word	0x2001da20
 80096b4:	2001da0c 	.word	0x2001da0c
 80096b8:	2001d9f4 	.word	0x2001d9f4
 80096bc:	20000014 	.word	0x20000014

080096c0 <WM__GetNextIVR>:
 80096c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80096c4:	4f5d      	ldr	r7, [pc, #372]	; (800983c <WM__GetNextIVR+0x17c>)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80096cc:	2800      	cmp	r0, #0
 80096ce:	f000 80b1 	beq.w	8009834 <WM__GetNextIVR+0x174>
 80096d2:	4a5b      	ldr	r2, [pc, #364]	; (8009840 <WM__GetNextIVR+0x180>)
 80096d4:	6a13      	ldr	r3, [r2, #32]
 80096d6:	4614      	mov	r4, r2
 80096d8:	2b01      	cmp	r3, #1
 80096da:	dd03      	ble.n	80096e4 <WM__GetNextIVR+0x24>
 80096dc:	3b01      	subs	r3, #1
 80096de:	2000      	movs	r0, #0
 80096e0:	6213      	str	r3, [r2, #32]
 80096e2:	e0a7      	b.n	8009834 <WM__GetNextIVR+0x174>
 80096e4:	69d3      	ldr	r3, [r2, #28]
 80096e6:	f102 0614 	add.w	r6, r2, #20
 80096ea:	ad02      	add	r5, sp, #8
 80096ec:	3301      	adds	r3, #1
 80096ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80096f2:	61d3      	str	r3, [r2, #28]
 80096f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80096f8:	b923      	cbnz	r3, 8009704 <WM__GetNextIVR+0x44>
 80096fa:	8993      	ldrh	r3, [r2, #12]
 80096fc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009700:	89d3      	ldrh	r3, [r2, #14]
 8009702:	e010      	b.n	8009726 <WM__GetNextIVR+0x66>
 8009704:	8b13      	ldrh	r3, [r2, #24]
 8009706:	8ad2      	ldrh	r2, [r2, #22]
 8009708:	3301      	adds	r3, #1
 800970a:	f8ad 200a 	strh.w	r2, [sp, #10]
 800970e:	b21b      	sxth	r3, r3
 8009710:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8009714:	429a      	cmp	r2, r3
 8009716:	f8ad 3008 	strh.w	r3, [sp, #8]
 800971a:	da06      	bge.n	800972a <WM__GetNextIVR+0x6a>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009722:	8b63      	ldrh	r3, [r4, #26]
 8009724:	3301      	adds	r3, #1
 8009726:	f8ad 300a 	strh.w	r3, [sp, #10]
 800972a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 800972e:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009732:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009840 <WM__GetNextIVR+0x180>
 8009736:	429a      	cmp	r2, r3
 8009738:	dd04      	ble.n	8009744 <WM__GetNextIVR+0x84>
 800973a:	6a23      	ldr	r3, [r4, #32]
 800973c:	2000      	movs	r0, #0
 800973e:	3b01      	subs	r3, #1
 8009740:	6223      	str	r3, [r4, #32]
 8009742:	e077      	b.n	8009834 <WM__GetNextIVR+0x174>
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009748:	f7fb fad0 	bl	8004cec <GUI_ALLOC_LockH>
 800974c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009750:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 8009754:	9001      	str	r0, [sp, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d11c      	bne.n	8009794 <WM__GetNextIVR+0xd4>
 800975a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 800975e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009762:	f8b8 3010 	ldrh.w	r3, [r8, #16]
 8009766:	f8ad 300c 	strh.w	r3, [sp, #12]
 800976a:	4b34      	ldr	r3, [pc, #208]	; (800983c <WM__GetNextIVR+0x17c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009770:	b15a      	cbz	r2, 800978a <WM__GetNextIVR+0xca>
 8009772:	4610      	mov	r0, r2
 8009774:	f7fb fab0 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009778:	4680      	mov	r8, r0
 800977a:	2200      	movs	r2, #0
 800977c:	4629      	mov	r1, r5
 800977e:	6a00      	ldr	r0, [r0, #32]
 8009780:	f7ff f97e 	bl	8008a80 <_Findy1>
 8009784:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009788:	e7f2      	b.n	8009770 <WM__GetNextIVR+0xb0>
 800978a:	9b01      	ldr	r3, [sp, #4]
 800978c:	4629      	mov	r1, r5
 800978e:	69d8      	ldr	r0, [r3, #28]
 8009790:	f7ff f976 	bl	8008a80 <_Findy1>
 8009794:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009798:	f8ad 300c 	strh.w	r3, [sp, #12]
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097a0:	b16a      	cbz	r2, 80097be <WM__GetNextIVR+0xfe>
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7fb fa98 	bl	8004cd8 <GUI_ALLOC_h2p>
 80097a8:	2200      	movs	r2, #0
 80097aa:	4680      	mov	r8, r0
 80097ac:	4629      	mov	r1, r5
 80097ae:	6a00      	ldr	r0, [r0, #32]
 80097b0:	f7ff f9b9 	bl	8008b26 <_Findx0>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d1ed      	bne.n	8009794 <WM__GetNextIVR+0xd4>
 80097b8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80097bc:	e7f0      	b.n	80097a0 <WM__GetNextIVR+0xe0>
 80097be:	9b01      	ldr	r3, [sp, #4]
 80097c0:	4629      	mov	r1, r5
 80097c2:	69d8      	ldr	r0, [r3, #28]
 80097c4:	f7ff f9af 	bl	8008b26 <_Findx0>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d1e3      	bne.n	8009794 <WM__GetNextIVR+0xd4>
 80097cc:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80097d0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80097d4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80097d8:	429a      	cmp	r2, r3
 80097da:	dd07      	ble.n	80097ec <WM__GetNextIVR+0x12c>
 80097dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80097e0:	e886 0003 	stmia.w	r6, {r0, r1}
 80097e4:	a801      	add	r0, sp, #4
 80097e6:	f7fb fa8f 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80097ea:	e797      	b.n	800971c <WM__GetNextIVR+0x5c>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097f0:	b152      	cbz	r2, 8009808 <WM__GetNextIVR+0x148>
 80097f2:	4610      	mov	r0, r2
 80097f4:	f7fb fa70 	bl	8004cd8 <GUI_ALLOC_h2p>
 80097f8:	4607      	mov	r7, r0
 80097fa:	2200      	movs	r2, #0
 80097fc:	4629      	mov	r1, r5
 80097fe:	6a00      	ldr	r0, [r0, #32]
 8009800:	f7ff f9d4 	bl	8008bac <_Findx1>
 8009804:	69ba      	ldr	r2, [r7, #24]
 8009806:	e7f3      	b.n	80097f0 <WM__GetNextIVR+0x130>
 8009808:	af04      	add	r7, sp, #16
 800980a:	4629      	mov	r1, r5
 800980c:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8009810:	69d8      	ldr	r0, [r3, #28]
 8009812:	f7ff f9cb 	bl	8008bac <_Findx1>
 8009816:	4638      	mov	r0, r7
 8009818:	f7fb fa76 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800981c:	69e2      	ldr	r2, [r4, #28]
 800981e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009822:	429a      	cmp	r2, r3
 8009824:	dc89      	bgt.n	800973a <WM__GetNextIVR+0x7a>
 8009826:	e895 0003 	ldmia.w	r5, {r0, r1}
 800982a:	e886 0003 	stmia.w	r6, {r0, r1}
 800982e:	f7ff fbdb 	bl	8008fe8 <WM__ActivateClipRect>
 8009832:	2001      	movs	r0, #1
 8009834:	b004      	add	sp, #16
 8009836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800983a:	bf00      	nop
 800983c:	20000014 	.word	0x20000014
 8009840:	200001d8 	.word	0x200001d8

08009844 <WM__InitIVRSearch>:
 8009844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009848:	4e39      	ldr	r6, [pc, #228]	; (8009930 <WM__InitIVRSearch+0xec>)
 800984a:	b086      	sub	sp, #24
 800984c:	4680      	mov	r8, r0
 800984e:	6832      	ldr	r2, [r6, #0]
 8009850:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8009854:	b913      	cbnz	r3, 800985c <WM__InitIVRSearch+0x18>
 8009856:	f7ff fbc7 	bl	8008fe8 <WM__ActivateClipRect>
 800985a:	e064      	b.n	8009926 <WM__InitIVRSearch+0xe2>
 800985c:	4f35      	ldr	r7, [pc, #212]	; (8009934 <WM__InitIVRSearch+0xf0>)
 800985e:	6a3b      	ldr	r3, [r7, #32]
 8009860:	463d      	mov	r5, r7
 8009862:	3301      	adds	r3, #1
 8009864:	2b01      	cmp	r3, #1
 8009866:	623b      	str	r3, [r7, #32]
 8009868:	dc5d      	bgt.n	8009926 <WM__InitIVRSearch+0xe2>
 800986a:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800986c:	f7fb fa3e 	bl	8004cec <GUI_ALLOC_LockH>
 8009870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009874:	9000      	str	r0, [sp, #0]
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <WM__InitIVRSearch+0xf4>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	b113      	cbz	r3, 8009884 <WM__InitIVRSearch+0x40>
 800987e:	ab02      	add	r3, sp, #8
 8009880:	3008      	adds	r0, #8
 8009882:	e004      	b.n	800988e <WM__InitIVRSearch+0x4a>
 8009884:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009886:	f013 0402 	ands.w	r4, r3, #2
 800988a:	d00c      	beq.n	80098a6 <WM__InitIVRSearch+0x62>
 800988c:	ab02      	add	r3, sp, #8
 800988e:	ac02      	add	r4, sp, #8
 8009890:	c803      	ldmia	r0, {r0, r1}
 8009892:	e883 0003 	stmia.w	r3, {r0, r1}
 8009896:	f1b8 0f00 	cmp.w	r8, #0
 800989a:	d00c      	beq.n	80098b6 <WM__InitIVRSearch+0x72>
 800989c:	4641      	mov	r1, r8
 800989e:	4620      	mov	r0, r4
 80098a0:	f7fc f8ec 	bl	8005a7c <GUI__IntersectRect>
 80098a4:	e007      	b.n	80098b6 <WM__InitIVRSearch+0x72>
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	4668      	mov	r0, sp
 80098aa:	3b01      	subs	r3, #1
 80098ac:	623b      	str	r3, [r7, #32]
 80098ae:	f7fb fa2b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80098b2:	4620      	mov	r0, r4
 80098b4:	e038      	b.n	8009928 <WM__InitIVRSearch+0xe4>
 80098b6:	6833      	ldr	r3, [r6, #0]
 80098b8:	4f20      	ldr	r7, [pc, #128]	; (800993c <WM__InitIVRSearch+0xf8>)
 80098ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098bc:	b1c2      	cbz	r2, 80098f0 <WM__InitIVRSearch+0xac>
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	6810      	ldr	r0, [r2, #0]
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	ab04      	add	r3, sp, #16
 80098c6:	6851      	ldr	r1, [r2, #4]
 80098c8:	c303      	stmia	r3!, {r0, r1}
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	b133      	cbz	r3, 80098dc <WM__InitIVRSearch+0x98>
 80098ce:	a801      	add	r0, sp, #4
 80098d0:	f7fb fa1a 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80098d4:	6838      	ldr	r0, [r7, #0]
 80098d6:	f7fb fa09 	bl	8004cec <GUI_ALLOC_LockH>
 80098da:	9001      	str	r0, [sp, #4]
 80098dc:	a904      	add	r1, sp, #16
 80098de:	9801      	ldr	r0, [sp, #4]
 80098e0:	f7ff fb52 	bl	8008f88 <WM__Client2Screen>
 80098e4:	4620      	mov	r0, r4
 80098e6:	a904      	add	r1, sp, #16
 80098e8:	f7fc f8c8 	bl	8005a7c <GUI__IntersectRect>
 80098ec:	a801      	add	r0, sp, #4
 80098ee:	e000      	b.n	80098f2 <WM__InitIVRSearch+0xae>
 80098f0:	4668      	mov	r0, sp
 80098f2:	f7fb fa09 	bl	8004d08 <GUI_ALLOC_UnlockH>
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	b119      	cbz	r1, 8009902 <WM__InitIVRSearch+0xbe>
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7ff faa4 	bl	8008e48 <WM__ClipAtParentBorders>
 8009900:	b128      	cbz	r0, 800990e <WM__InitIVRSearch+0xca>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	4620      	mov	r0, r4
 8009906:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8009908:	f7ff fa9e 	bl	8008e48 <WM__ClipAtParentBorders>
 800990c:	b918      	cbnz	r0, 8009916 <WM__InitIVRSearch+0xd2>
 800990e:	6a2b      	ldr	r3, [r5, #32]
 8009910:	3b01      	subs	r3, #1
 8009912:	622b      	str	r3, [r5, #32]
 8009914:	e008      	b.n	8009928 <WM__InitIVRSearch+0xe4>
 8009916:	4b0a      	ldr	r3, [pc, #40]	; (8009940 <WM__InitIVRSearch+0xfc>)
 8009918:	e894 0003 	ldmia.w	r4, {r0, r1}
 800991c:	e883 0003 	stmia.w	r3, {r0, r1}
 8009920:	f7ff fece 	bl	80096c0 <WM__GetNextIVR>
 8009924:	e000      	b.n	8009928 <WM__InitIVRSearch+0xe4>
 8009926:	2001      	movs	r0, #1
 8009928:	b006      	add	sp, #24
 800992a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800992e:	bf00      	nop
 8009930:	20000014 	.word	0x20000014
 8009934:	200001d8 	.word	0x200001d8
 8009938:	2001da30 	.word	0x2001da30
 800993c:	2001da00 	.word	0x2001da00
 8009940:	200001e4 	.word	0x200001e4

08009944 <WM_SetDefault>:
 8009944:	b508      	push	{r3, lr}
 8009946:	f7fb fcf7 	bl	8005338 <GL_SetDefault>
 800994a:	4b02      	ldr	r3, [pc, #8]	; (8009954 <WM_SetDefault+0x10>)
 800994c:	2200      	movs	r2, #0
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	645a      	str	r2, [r3, #68]	; 0x44
 8009952:	bd08      	pop	{r3, pc}
 8009954:	20000014 	.word	0x20000014

08009958 <WM__Paint1>:
 8009958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995a:	b089      	sub	sp, #36	; 0x24
 800995c:	4604      	mov	r4, r0
 800995e:	f7fb f9c5 	bl	8004cec <GUI_ALLOC_LockH>
 8009962:	6907      	ldr	r7, [r0, #16]
 8009964:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8009966:	ae02      	add	r6, sp, #8
 8009968:	9001      	str	r0, [sp, #4]
 800996a:	3008      	adds	r0, #8
 800996c:	c803      	ldmia	r0, {r0, r1}
 800996e:	e886 0003 	stmia.w	r6, {r0, r1}
 8009972:	a801      	add	r0, sp, #4
 8009974:	f7fb f9c8 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009978:	2f00      	cmp	r7, #0
 800997a:	d032      	beq.n	80099e2 <WM__Paint1+0x8a>
 800997c:	07ab      	lsls	r3, r5, #30
 800997e:	d530      	bpl.n	80099e2 <WM__Paint1+0x8a>
 8009980:	212e      	movs	r1, #46	; 0x2e
 8009982:	4620      	mov	r0, r4
 8009984:	f000 faed 	bl	8009f62 <WM_SendMessageNoPara>
 8009988:	4b17      	ldr	r3, [pc, #92]	; (80099e8 <WM__Paint1+0x90>)
 800998a:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800998e:	781a      	ldrb	r2, [r3, #0]
 8009990:	461d      	mov	r5, r3
 8009992:	f102 0201 	add.w	r2, r2, #1
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	d00a      	beq.n	80099b0 <WM__Paint1+0x58>
 800999a:	230f      	movs	r3, #15
 800999c:	9405      	str	r4, [sp, #20]
 800999e:	9607      	str	r6, [sp, #28]
 80099a0:	9304      	str	r3, [sp, #16]
 80099a2:	f7ff ffcf 	bl	8009944 <WM_SetDefault>
 80099a6:	a904      	add	r1, sp, #16
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fbfd 	bl	800a1a8 <WM__SendMessage>
 80099ae:	e011      	b.n	80099d4 <WM__Paint1+0x7c>
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7ff ff47 	bl	8009844 <WM__InitIVRSearch>
 80099b6:	b168      	cbz	r0, 80099d4 <WM__Paint1+0x7c>
 80099b8:	270f      	movs	r7, #15
 80099ba:	9405      	str	r4, [sp, #20]
 80099bc:	9704      	str	r7, [sp, #16]
 80099be:	9607      	str	r6, [sp, #28]
 80099c0:	f7ff ffc0 	bl	8009944 <WM_SetDefault>
 80099c4:	a904      	add	r1, sp, #16
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 fbee 	bl	800a1a8 <WM__SendMessage>
 80099cc:	f7ff fe78 	bl	80096c0 <WM__GetNextIVR>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	d1f2      	bne.n	80099ba <WM__Paint1+0x62>
 80099d4:	782b      	ldrb	r3, [r5, #0]
 80099d6:	212f      	movs	r1, #47	; 0x2f
 80099d8:	4620      	mov	r0, r4
 80099da:	3b01      	subs	r3, #1
 80099dc:	702b      	strb	r3, [r5, #0]
 80099de:	f000 fac0 	bl	8009f62 <WM_SendMessageNoPara>
 80099e2:	b009      	add	sp, #36	; 0x24
 80099e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e6:	bf00      	nop
 80099e8:	2001da30 	.word	0x2001da30

080099ec <WM__Paint>:
 80099ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099f0:	b088      	sub	sp, #32
 80099f2:	f244 0420 	movw	r4, #16416	; 0x4020
 80099f6:	9003      	str	r0, [sp, #12]
 80099f8:	f7fb f978 	bl	8004cec <GUI_ALLOC_LockH>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f100 0208 	add.w	r2, r0, #8
 8009a02:	9005      	str	r0, [sp, #20]
 8009a04:	ae06      	add	r6, sp, #24
 8009a06:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8009a08:	699f      	ldr	r7, [r3, #24]
 8009a0a:	402c      	ands	r4, r5
 8009a0c:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8009a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009a14:	e886 0003 	stmia.w	r6, {r0, r1}
 8009a18:	a805      	add	r0, sp, #20
 8009a1a:	f7fb f975 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	d035      	beq.n	8009a8e <WM__Paint+0xa2>
 8009a22:	f1b8 0f00 	cmp.w	r8, #0
 8009a26:	d017      	beq.n	8009a58 <WM__Paint+0x6c>
 8009a28:	9903      	ldr	r1, [sp, #12]
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	f7ff fa0c 	bl	8008e48 <WM__ClipAtParentBorders>
 8009a30:	b190      	cbz	r0, 8009a58 <WM__Paint+0x6c>
 8009a32:	9803      	ldr	r0, [sp, #12]
 8009a34:	f7ff fca6 	bl	8009384 <WM_SelectWindow>
 8009a38:	0769      	lsls	r1, r5, #29
 8009a3a:	d50f      	bpl.n	8009a5c <WM__Paint+0x70>
 8009a3c:	b127      	cbz	r7, 8009a48 <WM__Paint+0x5c>
 8009a3e:	f005 0501 	and.w	r5, r5, #1
 8009a42:	f085 0501 	eor.w	r5, r5, #1
 8009a46:	e000      	b.n	8009a4a <WM__Paint+0x5e>
 8009a48:	2501      	movs	r5, #1
 8009a4a:	9500      	str	r5, [sp, #0]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	aa03      	add	r2, sp, #12
 8009a50:	4911      	ldr	r1, [pc, #68]	; (8009a98 <WM__Paint+0xac>)
 8009a52:	4630      	mov	r0, r6
 8009a54:	f001 ffa0 	bl	800b998 <GUI_MEMDEV_Draw>
 8009a58:	2400      	movs	r4, #0
 8009a5a:	e003      	b.n	8009a64 <WM__Paint+0x78>
 8009a5c:	2401      	movs	r4, #1
 8009a5e:	9803      	ldr	r0, [sp, #12]
 8009a60:	f7ff f980 	bl	8008d64 <WM__PaintWinAndOverlays>
 8009a64:	9803      	ldr	r0, [sp, #12]
 8009a66:	f7fb f941 	bl	8004cec <GUI_ALLOC_LockH>
 8009a6a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009a6c:	9005      	str	r0, [sp, #20]
 8009a6e:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 8009a72:	0492      	lsls	r2, r2, #18
 8009a74:	f023 0320 	bic.w	r3, r3, #32
 8009a78:	bf48      	it	mi
 8009a7a:	f043 0304 	orrmi.w	r3, r3, #4
 8009a7e:	6283      	str	r3, [r0, #40]	; 0x28
 8009a80:	a805      	add	r0, sp, #20
 8009a82:	f7fb f941 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009a86:	4a05      	ldr	r2, [pc, #20]	; (8009a9c <WM__Paint+0xb0>)
 8009a88:	8813      	ldrh	r3, [r2, #0]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	8013      	strh	r3, [r2, #0]
 8009a8e:	4620      	mov	r0, r4
 8009a90:	b008      	add	sp, #32
 8009a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a96:	bf00      	nop
 8009a98:	08008ddd 	.word	0x08008ddd
 8009a9c:	2001da1c 	.word	0x2001da1c

08009aa0 <_Exec1Draw>:
 8009aa0:	4b1e      	ldr	r3, [pc, #120]	; (8009b1c <_Exec1Draw+0x7c>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009aa8:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
 8009aac:	b09f      	sub	sp, #124	; 0x7c
 8009aae:	461d      	mov	r5, r3
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d02f      	beq.n	8009b14 <_Exec1Draw+0x74>
 8009ab4:	4b1a      	ldr	r3, [pc, #104]	; (8009b20 <_Exec1Draw+0x80>)
 8009ab6:	8818      	ldrh	r0, [r3, #0]
 8009ab8:	461f      	mov	r7, r3
 8009aba:	b358      	cbz	r0, 8009b14 <_Exec1Draw+0x74>
 8009abc:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <_Exec1Draw+0x84>)
 8009abe:	689c      	ldr	r4, [r3, #8]
 8009ac0:	461e      	mov	r6, r3
 8009ac2:	b90c      	cbnz	r4, 8009ac8 <_Exec1Draw+0x28>
 8009ac4:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <_Exec1Draw+0x88>)
 8009ac6:	681c      	ldr	r4, [r3, #0]
 8009ac8:	a801      	add	r0, sp, #4
 8009aca:	f7fb fbcf 	bl	800526c <GUI_SaveContext_W>
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 8009ad4:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8009ad6:	b924      	cbnz	r4, 8009ae2 <_Exec1Draw+0x42>
 8009ad8:	2400      	movs	r4, #0
 8009ada:	e00d      	b.n	8009af8 <_Exec1Draw+0x58>
 8009adc:	f1b9 0f00 	cmp.w	r9, #0
 8009ae0:	d10a      	bne.n	8009af8 <_Exec1Draw+0x58>
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	f7ff ff82 	bl	80099ec <WM__Paint>
 8009ae8:	4681      	mov	r9, r0
 8009aea:	4620      	mov	r0, r4
 8009aec:	f7fb f8f4 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009af0:	6944      	ldr	r4, [r0, #20]
 8009af2:	2c00      	cmp	r4, #0
 8009af4:	d1f2      	bne.n	8009adc <_Exec1Draw+0x3c>
 8009af6:	e7ef      	b.n	8009ad8 <_Exec1Draw+0x38>
 8009af8:	4640      	mov	r0, r8
 8009afa:	60b4      	str	r4, [r6, #8]
 8009afc:	f7fb fbd5 	bl	80052aa <GUI_SetColor>
 8009b00:	4628      	mov	r0, r5
 8009b02:	f7fb fbd0 	bl	80052a6 <GUI_SetBkColor>
 8009b06:	a801      	add	r0, sp, #4
 8009b08:	f7fb fbba 	bl	8005280 <GUI_RestoreContext>
 8009b0c:	8838      	ldrh	r0, [r7, #0]
 8009b0e:	3000      	adds	r0, #0
 8009b10:	bf18      	it	ne
 8009b12:	2001      	movne	r0, #1
 8009b14:	b01f      	add	sp, #124	; 0x7c
 8009b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20000014 	.word	0x20000014
 8009b20:	2001da1c 	.word	0x2001da1c
 8009b24:	200001d8 	.word	0x200001d8
 8009b28:	2001da20 	.word	0x2001da20

08009b2c <WM_Exec>:
 8009b2c:	4b18      	ldr	r3, [pc, #96]	; (8009b90 <WM_Exec+0x64>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	b103      	cbz	r3, 8009b36 <WM_Exec+0xa>
 8009b34:	4798      	blx	r3
 8009b36:	2500      	movs	r5, #0
 8009b38:	f7ff fd80 	bl	800963c <_Exec1Input>
 8009b3c:	b108      	cbz	r0, 8009b42 <WM_Exec+0x16>
 8009b3e:	2501      	movs	r5, #1
 8009b40:	e7fa      	b.n	8009b38 <WM_Exec+0xc>
 8009b42:	4b14      	ldr	r3, [pc, #80]	; (8009b94 <WM_Exec+0x68>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f893 4054 	ldrb.w	r4, [r3, #84]	; 0x54
 8009b4a:	b144      	cbz	r4, 8009b5e <WM_Exec+0x32>
 8009b4c:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <WM_Exec+0x6c>)
 8009b4e:	881c      	ldrh	r4, [r3, #0]
 8009b50:	b12c      	cbz	r4, 8009b5e <WM_Exec+0x32>
 8009b52:	4b12      	ldr	r3, [pc, #72]	; (8009b9c <WM_Exec+0x70>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	b1a3      	cbz	r3, 8009b82 <WM_Exec+0x56>
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4798      	blx	r3
 8009b5c:	2401      	movs	r4, #1
 8009b5e:	f7ff ff9f 	bl	8009aa0 <_Exec1Draw>
 8009b62:	4606      	mov	r6, r0
 8009b64:	b108      	cbz	r0, 8009b6a <WM_Exec+0x3e>
 8009b66:	2501      	movs	r5, #1
 8009b68:	e7f9      	b.n	8009b5e <WM_Exec+0x32>
 8009b6a:	b174      	cbz	r4, 8009b8a <WM_Exec+0x5e>
 8009b6c:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <WM_Exec+0x70>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	b123      	cbz	r3, 8009b7c <WM_Exec+0x50>
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	4798      	blx	r3
 8009b76:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <WM_Exec+0x74>)
 8009b78:	601e      	str	r6, [r3, #0]
 8009b7a:	e006      	b.n	8009b8a <WM_Exec+0x5e>
 8009b7c:	f001 fc1c 	bl	800b3b8 <GUI__ManageCache>
 8009b80:	e003      	b.n	8009b8a <WM_Exec+0x5e>
 8009b82:	2001      	movs	r0, #1
 8009b84:	f001 fc18 	bl	800b3b8 <GUI__ManageCache>
 8009b88:	e7e8      	b.n	8009b5c <WM_Exec+0x30>
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
 8009b8e:	bf00      	nop
 8009b90:	2001da10 	.word	0x2001da10
 8009b94:	20000014 	.word	0x20000014
 8009b98:	2001da1c 	.word	0x2001da1c
 8009b9c:	2001da44 	.word	0x2001da44
 8009ba0:	2001da2c 	.word	0x2001da2c

08009ba4 <WM_Activate>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <WM_Activate+0xc>)
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009bae:	4770      	bx	lr
 8009bb0:	20000014 	.word	0x20000014

08009bb4 <WM_Deactivate>:
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <WM_Deactivate+0x10>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8009bbe:	f7fc ba73 	b.w	80060a8 <LCD_SetClipRectMax>
 8009bc2:	bf00      	nop
 8009bc4:	20000014 	.word	0x20000014

08009bc8 <WM_DefaultProc>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	4604      	mov	r4, r0
 8009bcc:	6840      	ldr	r0, [r0, #4]
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	2b17      	cmp	r3, #23
 8009bd2:	d010      	beq.n	8009bf6 <WM_DefaultProc+0x2e>
 8009bd4:	dc07      	bgt.n	8009be6 <WM_DefaultProc+0x1e>
 8009bd6:	2b0e      	cmp	r3, #14
 8009bd8:	d00f      	beq.n	8009bfa <WM_DefaultProc+0x32>
 8009bda:	2b14      	cmp	r3, #20
 8009bdc:	d115      	bne.n	8009c0a <WM_DefaultProc+0x42>
 8009bde:	68e1      	ldr	r1, [r4, #12]
 8009be0:	f000 fb92 	bl	800a308 <WM__GetClientRectEx>
 8009be4:	e011      	b.n	8009c0a <WM_DefaultProc+0x42>
 8009be6:	2b22      	cmp	r3, #34	; 0x22
 8009be8:	d00c      	beq.n	8009c04 <WM_DefaultProc+0x3c>
 8009bea:	2b28      	cmp	r3, #40	; 0x28
 8009bec:	d10d      	bne.n	8009c0a <WM_DefaultProc+0x42>
 8009bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf2:	f7ff bbba 	b.w	800936a <WM_InvalidateWindow>
 8009bf6:	60e0      	str	r0, [r4, #12]
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c00:	f000 b9b1 	b.w	8009f66 <WM_SendToParent>
 8009c04:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009c08:	e000      	b.n	8009c0c <WM_DefaultProc+0x44>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60e3      	str	r3, [r4, #12]
 8009c0e:	bd10      	pop	{r4, pc}

08009c10 <_cbBackWin>:
 8009c10:	6803      	ldr	r3, [r0, #0]
 8009c12:	2b0e      	cmp	r3, #14
 8009c14:	b510      	push	{r4, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	d002      	beq.n	8009c20 <_cbBackWin+0x10>
 8009c1a:	2b0f      	cmp	r3, #15
 8009c1c:	d009      	beq.n	8009c32 <_cbBackWin+0x22>
 8009c1e:	e020      	b.n	8009c62 <_cbBackWin+0x52>
 8009c20:	68c3      	ldr	r3, [r0, #12]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	2a01      	cmp	r2, #1
 8009c26:	d121      	bne.n	8009c6c <_cbBackWin+0x5c>
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c2e:	f7fb becd 	b.w	80059cc <GUI_StoreKey>
 8009c32:	4a0f      	ldr	r2, [pc, #60]	; (8009c70 <_cbBackWin+0x60>)
 8009c34:	6843      	ldr	r3, [r0, #4]
 8009c36:	6811      	ldr	r1, [r2, #0]
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	d006      	beq.n	8009c4a <_cbBackWin+0x3a>
 8009c3c:	6852      	ldr	r2, [r2, #4]
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	bf0c      	ite	eq
 8009c42:	2301      	moveq	r3, #1
 8009c44:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8009c48:	e000      	b.n	8009c4c <_cbBackWin+0x3c>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4a09      	ldr	r2, [pc, #36]	; (8009c74 <_cbBackWin+0x64>)
 8009c4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009c52:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009c56:	4298      	cmp	r0, r3
 8009c58:	d003      	beq.n	8009c62 <_cbBackWin+0x52>
 8009c5a:	f7fb fb24 	bl	80052a6 <GUI_SetBkColor>
 8009c5e:	f7fb fc2d 	bl	80054bc <GUI_Clear>
 8009c62:	4620      	mov	r0, r4
 8009c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c68:	f7ff bfae 	b.w	8009bc8 <WM_DefaultProc>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	bf00      	nop
 8009c70:	2001da04 	.word	0x2001da04
 8009c74:	2001da38 	.word	0x2001da38

08009c78 <WM_Init>:
 8009c78:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009c7c:	4d2a      	ldr	r5, [pc, #168]	; (8009d28 <WM_Init+0xb0>)
 8009c7e:	7828      	ldrb	r0, [r5, #0]
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d14d      	bne.n	8009d20 <WM_Init+0xa8>
 8009c84:	4b29      	ldr	r3, [pc, #164]	; (8009d2c <WM_Init+0xb4>)
 8009c86:	4604      	mov	r4, r0
 8009c88:	4e29      	ldr	r6, [pc, #164]	; (8009d30 <WM_Init+0xb8>)
 8009c8a:	6018      	str	r0, [r3, #0]
 8009c8c:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <WM_Init+0xbc>)
 8009c8e:	4f2a      	ldr	r7, [pc, #168]	; (8009d38 <WM_Init+0xc0>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d64 <WM_Init+0xec>
 8009c96:	6458      	str	r0, [r3, #68]	; 0x44
 8009c98:	4b28      	ldr	r3, [pc, #160]	; (8009d3c <WM_Init+0xc4>)
 8009c9a:	60a8      	str	r0, [r5, #8]
 8009c9c:	8018      	strh	r0, [r3, #0]
 8009c9e:	4b28      	ldr	r3, [pc, #160]	; (8009d40 <WM_Init+0xc8>)
 8009ca0:	8018      	strh	r0, [r3, #0]
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7fb fd3e 	bl	8005724 <GUI_DEVICE__GetpDriver>
 8009ca8:	b1a8      	cbz	r0, 8009cd6 <WM_Init+0x5e>
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cae:	2302      	movs	r3, #2
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	9602      	str	r6, [sp, #8]
 8009cb4:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009cb8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8009cbc:	9103      	str	r1, [sp, #12]
 8009cbe:	4608      	mov	r0, r1
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f7ff fb7f 	bl	80093c4 <WM_CreateWindowAsChild>
 8009cc6:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8009cca:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8009cce:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
 8009cd2:	f7ff fb4a 	bl	800936a <WM_InvalidateWindow>
 8009cd6:	3401      	adds	r4, #1
 8009cd8:	2c02      	cmp	r4, #2
 8009cda:	d1e2      	bne.n	8009ca2 <WM_Init+0x2a>
 8009cdc:	4819      	ldr	r0, [pc, #100]	; (8009d44 <WM_Init+0xcc>)
 8009cde:	f000 fb0b 	bl	800a2f8 <WM__AddCriticalHandle>
 8009ce2:	4819      	ldr	r0, [pc, #100]	; (8009d48 <WM_Init+0xd0>)
 8009ce4:	f000 fb08 	bl	800a2f8 <WM__AddCriticalHandle>
 8009ce8:	4818      	ldr	r0, [pc, #96]	; (8009d4c <WM_Init+0xd4>)
 8009cea:	f000 fb05 	bl	800a2f8 <WM__AddCriticalHandle>
 8009cee:	4818      	ldr	r0, [pc, #96]	; (8009d50 <WM_Init+0xd8>)
 8009cf0:	f000 fb02 	bl	800a2f8 <WM__AddCriticalHandle>
 8009cf4:	4817      	ldr	r0, [pc, #92]	; (8009d54 <WM_Init+0xdc>)
 8009cf6:	f000 faff 	bl	800a2f8 <WM__AddCriticalHandle>
 8009cfa:	4817      	ldr	r0, [pc, #92]	; (8009d58 <WM_Init+0xe0>)
 8009cfc:	f000 fafc 	bl	800a2f8 <WM__AddCriticalHandle>
 8009d00:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <WM_Init+0xc0>)
 8009d02:	6818      	ldr	r0, [r3, #0]
 8009d04:	f7ff fb3e 	bl	8009384 <WM_SelectWindow>
 8009d08:	f7ff ff4c 	bl	8009ba4 <WM_Activate>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	4813      	ldr	r0, [pc, #76]	; (8009d5c <WM_Init+0xe4>)
 8009d10:	702b      	strb	r3, [r5, #0]
 8009d12:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <WM_Init+0xe8>)
 8009d14:	626b      	str	r3, [r5, #36]	; 0x24
 8009d16:	b004      	add	sp, #16
 8009d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1c:	f7fb bcee 	b.w	80056fc <GUI__RegisterExit>
 8009d20:	b004      	add	sp, #16
 8009d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d26:	bf00      	nop
 8009d28:	200001d8 	.word	0x200001d8
 8009d2c:	2001da20 	.word	0x2001da20
 8009d30:	08009c11 	.word	0x08009c11
 8009d34:	20000014 	.word	0x20000014
 8009d38:	2001da04 	.word	0x2001da04
 8009d3c:	2001da1c 	.word	0x2001da1c
 8009d40:	2001d9fc 	.word	0x2001d9fc
 8009d44:	2001da78 	.word	0x2001da78
 8009d48:	2001da68 	.word	0x2001da68
 8009d4c:	2001da58 	.word	0x2001da58
 8009d50:	2001da80 	.word	0x2001da80
 8009d54:	2001da70 	.word	0x2001da70
 8009d58:	2001da60 	.word	0x2001da60
 8009d5c:	200001fc 	.word	0x200001fc
 8009d60:	080089b5 	.word	0x080089b5
 8009d64:	2001da38 	.word	0x2001da38

08009d68 <WM_GetDesktopWindow>:
 8009d68:	4b03      	ldr	r3, [pc, #12]	; (8009d78 <WM_GetDesktopWindow+0x10>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	7c5a      	ldrb	r2, [r3, #17]
 8009d6e:	4b03      	ldr	r3, [pc, #12]	; (8009d7c <WM_GetDesktopWindow+0x14>)
 8009d70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	20000014 	.word	0x20000014
 8009d7c:	2001da04 	.word	0x2001da04

08009d80 <WM_GetFirstChild>:
 8009d80:	b508      	push	{r3, lr}
 8009d82:	4603      	mov	r3, r0
 8009d84:	b110      	cbz	r0, 8009d8c <WM_GetFirstChild+0xc>
 8009d86:	f7fa ffa7 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009d8a:	69c3      	ldr	r3, [r0, #28]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	bd08      	pop	{r3, pc}

08009d90 <WM_GetWindowOrgX>:
 8009d90:	b508      	push	{r3, lr}
 8009d92:	b120      	cbz	r0, 8009d9e <WM_GetWindowOrgX+0xe>
 8009d94:	f7fa ffa0 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009d98:	f9b0 0000 	ldrsh.w	r0, [r0]
 8009d9c:	bd08      	pop	{r3, pc}
 8009d9e:	bd08      	pop	{r3, pc}

08009da0 <WM_GetParent>:
 8009da0:	b508      	push	{r3, lr}
 8009da2:	4603      	mov	r3, r0
 8009da4:	b110      	cbz	r0, 8009dac <WM_GetParent+0xc>
 8009da6:	f7fa ff97 	bl	8004cd8 <GUI_ALLOC_h2p>
 8009daa:	6983      	ldr	r3, [r0, #24]
 8009dac:	4618      	mov	r0, r3
 8009dae:	bd08      	pop	{r3, pc}

08009db0 <WM_BringToBottom>:
 8009db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009db4:	4604      	mov	r4, r0
 8009db6:	b087      	sub	sp, #28
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d039      	beq.n	8009e30 <WM_BringToBottom+0x80>
 8009dbc:	f7fa ff96 	bl	8004cec <GUI_ALLOC_LockH>
 8009dc0:	ad04      	add	r5, sp, #16
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	9001      	str	r0, [sp, #4]
 8009dc6:	c803      	ldmia	r0, {r0, r1}
 8009dc8:	6a1e      	ldr	r6, [r3, #32]
 8009dca:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 8009dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8009dd2:	a801      	add	r0, sp, #4
 8009dd4:	f7fa ff98 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 f9d2 	bl	800a182 <WM__GetPrevSibling>
 8009dde:	4607      	mov	r7, r0
 8009de0:	b330      	cbz	r0, 8009e30 <WM_BringToBottom+0x80>
 8009de2:	4620      	mov	r0, r4
 8009de4:	f7ff ffdc 	bl	8009da0 <WM_GetParent>
 8009de8:	f019 0f02 	tst.w	r9, #2
 8009dec:	4680      	mov	r8, r0
 8009dee:	d004      	beq.n	8009dfa <WM_BringToBottom+0x4a>
 8009df0:	4601      	mov	r1, r0
 8009df2:	4632      	mov	r2, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	f7ff fa64 	bl	80092c2 <WM__InvalidateRectEx>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f7fa ff76 	bl	8004cec <GUI_ALLOC_LockH>
 8009e00:	9001      	str	r0, [sp, #4]
 8009e02:	4640      	mov	r0, r8
 8009e04:	f7fa ff72 	bl	8004cec <GUI_ALLOC_LockH>
 8009e08:	9003      	str	r0, [sp, #12]
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f7fa ff6e 	bl	8004cec <GUI_ALLOC_LockH>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	9a01      	ldr	r2, [sp, #4]
 8009e14:	69d9      	ldr	r1, [r3, #28]
 8009e16:	6206      	str	r6, [r0, #32]
 8009e18:	9002      	str	r0, [sp, #8]
 8009e1a:	a801      	add	r0, sp, #4
 8009e1c:	6211      	str	r1, [r2, #32]
 8009e1e:	61dc      	str	r4, [r3, #28]
 8009e20:	f7fa ff72 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009e24:	a803      	add	r0, sp, #12
 8009e26:	f7fa ff6f 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009e2a:	a802      	add	r0, sp, #8
 8009e2c:	f7fa ff6c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009e30:	b007      	add	sp, #28
 8009e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009e38 <WM_OnKey>:
 8009e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009e3a:	4a0a      	ldr	r2, [pc, #40]	; (8009e64 <WM_OnKey+0x2c>)
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	6810      	ldr	r0, [r2, #0]
 8009e40:	4a09      	ldr	r2, [pc, #36]	; (8009e68 <WM_OnKey+0x30>)
 8009e42:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8009e46:	b148      	cbz	r0, 8009e5c <WM_OnKey+0x24>
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	230e      	movs	r3, #14
 8009e4c:	9101      	str	r1, [sp, #4]
 8009e4e:	a902      	add	r1, sp, #8
 8009e50:	9302      	str	r3, [sp, #8]
 8009e52:	f8cd d014 	str.w	sp, [sp, #20]
 8009e56:	f000 f9a7 	bl	800a1a8 <WM__SendMessage>
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	b007      	add	sp, #28
 8009e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e62:	bf00      	nop
 8009e64:	2001da24 	.word	0x2001da24
 8009e68:	2001da14 	.word	0x2001da14

08009e6c <WM_ResizeWindow>:
 8009e6c:	ea51 0302 	orrs.w	r3, r1, r2
 8009e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e74:	4680      	mov	r8, r0
 8009e76:	b08a      	sub	sp, #40	; 0x28
 8009e78:	460f      	mov	r7, r1
 8009e7a:	4616      	mov	r6, r2
 8009e7c:	d06e      	beq.n	8009f5c <WM_ResizeWindow+0xf0>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d06c      	beq.n	8009f5c <WM_ResizeWindow+0xf0>
 8009e82:	f7fa ff33 	bl	8004cec <GUI_ALLOC_LockH>
 8009e86:	ac04      	add	r4, sp, #16
 8009e88:	4603      	mov	r3, r0
 8009e8a:	9003      	str	r0, [sp, #12]
 8009e8c:	ad06      	add	r5, sp, #24
 8009e8e:	c803      	ldmia	r0, {r0, r1}
 8009e90:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e94:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e98:	b17f      	cbz	r7, 8009eba <WM_ResizeWindow+0x4e>
 8009e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e9c:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8009ea0:	2a80      	cmp	r2, #128	; 0x80
 8009ea2:	bf0b      	itete	eq
 8009ea4:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
 8009ea8:	f8bd 201c 	ldrhne.w	r2, [sp, #28]
 8009eac:	1bd7      	subeq	r7, r2, r7
 8009eae:	18bf      	addne	r7, r7, r2
 8009eb0:	bf0c      	ite	eq
 8009eb2:	f8ad 7018 	strheq.w	r7, [sp, #24]
 8009eb6:	f8ad 701c 	strhne.w	r7, [sp, #28]
 8009eba:	b186      	cbz	r6, 8009ede <WM_ResizeWindow+0x72>
 8009ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ebe:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 8009ec2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8009ec6:	bf0b      	itete	eq
 8009ec8:	f8bd 201a 	ldrheq.w	r2, [sp, #26]
 8009ecc:	f8bd 201e 	ldrhne.w	r2, [sp, #30]
 8009ed0:	1b96      	subeq	r6, r2, r6
 8009ed2:	18b6      	addne	r6, r6, r2
 8009ed4:	bf0c      	ite	eq
 8009ed6:	f8ad 601a 	strheq.w	r6, [sp, #26]
 8009eda:	f8ad 601e 	strhne.w	r6, [sp, #30]
 8009ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee0:	03da      	lsls	r2, r3, #15
 8009ee2:	d502      	bpl.n	8009eea <WM_ResizeWindow+0x7e>
 8009ee4:	4640      	mov	r0, r8
 8009ee6:	f7ff f8b3 	bl	8009050 <WM__InvalidateDrawAndDescs>
 8009eea:	9b03      	ldr	r3, [sp, #12]
 8009eec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ef0:	e883 0003 	stmia.w	r3, {r0, r1}
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	079b      	lsls	r3, r3, #30
 8009ef8:	d50a      	bpl.n	8009f10 <WM_ResizeWindow+0xa4>
 8009efa:	462a      	mov	r2, r5
 8009efc:	4621      	mov	r1, r4
 8009efe:	a808      	add	r0, sp, #32
 8009f00:	f7fb f920 	bl	8005144 <GUI_MergeRect>
 8009f04:	9b03      	ldr	r3, [sp, #12]
 8009f06:	a808      	add	r0, sp, #32
 8009f08:	6a1a      	ldr	r2, [r3, #32]
 8009f0a:	6999      	ldr	r1, [r3, #24]
 8009f0c:	f7ff f9d9 	bl	80092c2 <WM__InvalidateRectEx>
 8009f10:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 8009f14:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8009f18:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 8009f1c:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8009f20:	1bc0      	subs	r0, r0, r7
 8009f22:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 8009f26:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8009f2a:	1a61      	subs	r1, r4, r1
 8009f2c:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 8009f30:	ac0a      	add	r4, sp, #40	; 0x28
 8009f32:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8009f36:	1af3      	subs	r3, r6, r3
 8009f38:	9000      	str	r0, [sp, #0]
 8009f3a:	1aaa      	subs	r2, r5, r2
 8009f3c:	9803      	ldr	r0, [sp, #12]
 8009f3e:	f000 f965 	bl	800a20c <WM__UpdateChildPositions>
 8009f42:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 8009f46:	f101 0008 	add.w	r0, r1, #8
 8009f4a:	f7fb fd97 	bl	8005a7c <GUI__IntersectRect>
 8009f4e:	4640      	mov	r0, r8
 8009f50:	2105      	movs	r1, #5
 8009f52:	f7ff f8b6 	bl	80090c2 <WM__SendMsgNoData>
 8009f56:	4620      	mov	r0, r4
 8009f58:	f7fa fed6 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009f5c:	b00a      	add	sp, #40	; 0x28
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f62 <WM_SendMessageNoPara>:
 8009f62:	f000 b93f 	b.w	800a1e4 <WM__SendMessageNoPara>

08009f66 <WM_SendToParent>:
 8009f66:	b538      	push	{r3, r4, r5, lr}
 8009f68:	4605      	mov	r5, r0
 8009f6a:	460c      	mov	r4, r1
 8009f6c:	b141      	cbz	r1, 8009f80 <WM_SendToParent+0x1a>
 8009f6e:	f7ff ff17 	bl	8009da0 <WM_GetParent>
 8009f72:	b128      	cbz	r0, 8009f80 <WM_SendToParent+0x1a>
 8009f74:	60a5      	str	r5, [r4, #8]
 8009f76:	4621      	mov	r1, r4
 8009f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f7c:	f000 b914 	b.w	800a1a8 <WM__SendMessage>
 8009f80:	bd38      	pop	{r3, r4, r5, pc}

08009f82 <WM_NotifyParent>:
 8009f82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f84:	2326      	movs	r3, #38	; 0x26
 8009f86:	9103      	str	r1, [sp, #12]
 8009f88:	4669      	mov	r1, sp
 8009f8a:	9300      	str	r3, [sp, #0]
 8009f8c:	f7ff ffeb 	bl	8009f66 <WM_SendToParent>
 8009f90:	b005      	add	sp, #20
 8009f92:	f85d fb04 	ldr.w	pc, [sp], #4

08009f96 <WM_SetSize>:
 8009f96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f9a:	460f      	mov	r7, r1
 8009f9c:	4690      	mov	r8, r2
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	b1e0      	cbz	r0, 8009fdc <WM_SetSize+0x46>
 8009fa2:	f7fa fea3 	bl	8004cec <GUI_ALLOC_LockH>
 8009fa6:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8009faa:	f9b0 4000 	ldrsh.w	r4, [r0]
 8009fae:	f10d 0e08 	add.w	lr, sp, #8
 8009fb2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009fb6:	1b2c      	subs	r4, r5, r4
 8009fb8:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8009fbc:	3401      	adds	r4, #1
 8009fbe:	1b3d      	subs	r5, r7, r4
 8009fc0:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 8009fc4:	4670      	mov	r0, lr
 8009fc6:	1ae3      	subs	r3, r4, r3
 8009fc8:	3301      	adds	r3, #1
 8009fca:	ebc3 0408 	rsb	r4, r3, r8
 8009fce:	f7fa fe9b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	4622      	mov	r2, r4
 8009fd8:	f7ff ff48 	bl	8009e6c <WM_ResizeWindow>
 8009fdc:	b002      	add	sp, #8
 8009fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009fe2 <_MoveDescendents>:
 8009fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	4616      	mov	r6, r2
 8009fea:	2210      	movs	r2, #16
 8009fec:	2703      	movs	r7, #3
 8009fee:	f10d 0808 	add.w	r8, sp, #8
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	460d      	mov	r5, r1
 8009ff6:	eb0d 0002 	add.w	r0, sp, r2
 8009ffa:	2100      	movs	r1, #0
 8009ffc:	f002 fe04 	bl	800cc08 <memset>
 800a000:	b32c      	cbz	r4, 800a04e <_MoveDescendents+0x6c>
 800a002:	4620      	mov	r0, r4
 800a004:	f7fa fe72 	bl	8004cec <GUI_ALLOC_LockH>
 800a008:	4632      	mov	r2, r6
 800a00a:	4629      	mov	r1, r5
 800a00c:	9001      	str	r0, [sp, #4]
 800a00e:	f7fb f8c4 	bl	800519a <GUI_MoveRect>
 800a012:	9801      	ldr	r0, [sp, #4]
 800a014:	4632      	mov	r2, r6
 800a016:	4629      	mov	r1, r5
 800a018:	3008      	adds	r0, #8
 800a01a:	f7fb f8be 	bl	800519a <GUI_MoveRect>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	a801      	add	r0, sp, #4
 800a022:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 800a026:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800a02a:	f7fa fe6d 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a02e:	4632      	mov	r2, r6
 800a030:	4629      	mov	r1, r5
 800a032:	4650      	mov	r0, sl
 800a034:	f7ff ffd5 	bl	8009fe2 <_MoveDescendents>
 800a038:	4620      	mov	r0, r4
 800a03a:	a904      	add	r1, sp, #16
 800a03c:	9704      	str	r7, [sp, #16]
 800a03e:	f8cd 801c 	str.w	r8, [sp, #28]
 800a042:	464c      	mov	r4, r9
 800a044:	9502      	str	r5, [sp, #8]
 800a046:	9603      	str	r6, [sp, #12]
 800a048:	f000 f8ae 	bl	800a1a8 <WM__SendMessage>
 800a04c:	e7d8      	b.n	800a000 <_MoveDescendents+0x1e>
 800a04e:	b008      	add	sp, #32
 800a050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a054 <WM__MoveWindow>:
 800a054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a058:	b08b      	sub	sp, #44	; 0x2c
 800a05a:	4606      	mov	r6, r0
 800a05c:	460d      	mov	r5, r1
 800a05e:	4614      	mov	r4, r2
 800a060:	2100      	movs	r1, #0
 800a062:	2210      	movs	r2, #16
 800a064:	a806      	add	r0, sp, #24
 800a066:	f002 fdcf 	bl	800cc08 <memset>
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d043      	beq.n	800a0f6 <WM__MoveWindow+0xa2>
 800a06e:	b90d      	cbnz	r5, 800a074 <WM__MoveWindow+0x20>
 800a070:	2c00      	cmp	r4, #0
 800a072:	d040      	beq.n	800a0f6 <WM__MoveWindow+0xa2>
 800a074:	4630      	mov	r0, r6
 800a076:	f10d 0808 	add.w	r8, sp, #8
 800a07a:	f7fa fe37 	bl	8004cec <GUI_ALLOC_LockH>
 800a07e:	4603      	mov	r3, r0
 800a080:	9001      	str	r0, [sp, #4]
 800a082:	4622      	mov	r2, r4
 800a084:	af0a      	add	r7, sp, #40	; 0x28
 800a086:	c803      	ldmia	r0, {r0, r1}
 800a088:	e888 0003 	stmia.w	r8, {r0, r1}
 800a08c:	4618      	mov	r0, r3
 800a08e:	4629      	mov	r1, r5
 800a090:	f7fb f883 	bl	800519a <GUI_MoveRect>
 800a094:	9801      	ldr	r0, [sp, #4]
 800a096:	4622      	mov	r2, r4
 800a098:	4629      	mov	r1, r5
 800a09a:	3008      	adds	r0, #8
 800a09c:	f7fb f87d 	bl	800519a <GUI_MoveRect>
 800a0a0:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800a0a4:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800a0a8:	4638      	mov	r0, r7
 800a0aa:	f7fa fe2d 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	4648      	mov	r0, r9
 800a0b4:	f7ff ff95 	bl	8009fe2 <_MoveDescendents>
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7fa fe17 	bl	8004cec <GUI_ALLOC_LockH>
 800a0be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a0c0:	9001      	str	r0, [sp, #4]
 800a0c2:	0792      	lsls	r2, r2, #30
 800a0c4:	d50a      	bpl.n	800a0dc <WM__MoveWindow+0x88>
 800a0c6:	6981      	ldr	r1, [r0, #24]
 800a0c8:	b141      	cbz	r1, 800a0dc <WM__MoveWindow+0x88>
 800a0ca:	6a02      	ldr	r2, [r0, #32]
 800a0cc:	f7ff f8e4 	bl	8009298 <WM__InvalidateParent>
 800a0d0:	9b01      	ldr	r3, [sp, #4]
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	6a1a      	ldr	r2, [r3, #32]
 800a0d6:	6999      	ldr	r1, [r3, #24]
 800a0d8:	f7ff f8de 	bl	8009298 <WM__InvalidateParent>
 800a0dc:	4638      	mov	r0, r7
 800a0de:	f7fa fe13 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	a906      	add	r1, sp, #24
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	9306      	str	r3, [sp, #24]
 800a0ea:	ab04      	add	r3, sp, #16
 800a0ec:	9504      	str	r5, [sp, #16]
 800a0ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f0:	9405      	str	r4, [sp, #20]
 800a0f2:	f000 f859 	bl	800a1a8 <WM__SendMessage>
 800a0f6:	b00b      	add	sp, #44	; 0x2c
 800a0f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800a0fc <WM_MoveWindow>:
 800a0fc:	f7ff bfaa 	b.w	800a054 <WM__MoveWindow>

0800a100 <WM_DeleteTimer>:
 800a100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a102:	4605      	mov	r5, r0
 800a104:	b168      	cbz	r0, 800a122 <WM_DeleteTimer+0x22>
 800a106:	ac02      	add	r4, sp, #8
 800a108:	f7fa fdf0 	bl	8004cec <GUI_ALLOC_LockH>
 800a10c:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a110:	6800      	ldr	r0, [r0, #0]
 800a112:	f000 fc7b 	bl	800aa0c <GUI_TIMER_Delete>
 800a116:	4620      	mov	r0, r4
 800a118:	f7fa fdf6 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a11c:	4628      	mov	r0, r5
 800a11e:	f7fa fe13 	bl	8004d48 <GUI_ALLOC_Free>
 800a122:	b003      	add	sp, #12
 800a124:	bd30      	pop	{r4, r5, pc}

0800a126 <WM__DeleteAssocTimer>:
 800a126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a128:	4605      	mov	r5, r0
 800a12a:	a801      	add	r0, sp, #4
 800a12c:	f000 fc3a 	bl	800a9a4 <GUI_TIMER__GetFirstTimer>
 800a130:	4604      	mov	r4, r0
 800a132:	b1dc      	cbz	r4, 800a16c <WM__DeleteAssocTimer+0x46>
 800a134:	2101      	movs	r1, #1
 800a136:	4620      	mov	r0, r4
 800a138:	f000 fc9a 	bl	800aa70 <GUI_TIMER_GetFlag>
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	b183      	cbz	r3, 800a162 <WM__DeleteAssocTimer+0x3c>
 800a140:	b178      	cbz	r0, 800a162 <WM__DeleteAssocTimer+0x3c>
 800a142:	4618      	mov	r0, r3
 800a144:	f7fa fdc8 	bl	8004cd8 <GUI_ALLOC_h2p>
 800a148:	6843      	ldr	r3, [r0, #4]
 800a14a:	42ab      	cmp	r3, r5
 800a14c:	d109      	bne.n	800a162 <WM__DeleteAssocTimer+0x3c>
 800a14e:	9e01      	ldr	r6, [sp, #4]
 800a150:	a901      	add	r1, sp, #4
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fc3e 	bl	800a9d4 <GUI_TIMER__GetNextTimerLin>
 800a158:	4604      	mov	r4, r0
 800a15a:	4630      	mov	r0, r6
 800a15c:	f7ff ffd0 	bl	800a100 <WM_DeleteTimer>
 800a160:	e7e7      	b.n	800a132 <WM__DeleteAssocTimer+0xc>
 800a162:	a901      	add	r1, sp, #4
 800a164:	4620      	mov	r0, r4
 800a166:	f000 fc35 	bl	800a9d4 <GUI_TIMER__GetNextTimerLin>
 800a16a:	e7e1      	b.n	800a130 <WM__DeleteAssocTimer+0xa>
 800a16c:	b002      	add	sp, #8
 800a16e:	bd70      	pop	{r4, r5, r6, pc}

0800a170 <WM__GetFirstSibling>:
 800a170:	b508      	push	{r3, lr}
 800a172:	f7ff fe15 	bl	8009da0 <WM_GetParent>
 800a176:	b118      	cbz	r0, 800a180 <WM__GetFirstSibling+0x10>
 800a178:	f7fa fdae 	bl	8004cd8 <GUI_ALLOC_h2p>
 800a17c:	69c0      	ldr	r0, [r0, #28]
 800a17e:	bd08      	pop	{r3, pc}
 800a180:	bd08      	pop	{r3, pc}

0800a182 <WM__GetPrevSibling>:
 800a182:	b538      	push	{r3, r4, r5, lr}
 800a184:	4605      	mov	r5, r0
 800a186:	f7ff fff3 	bl	800a170 <WM__GetFirstSibling>
 800a18a:	4604      	mov	r4, r0
 800a18c:	b154      	cbz	r4, 800a1a4 <WM__GetPrevSibling+0x22>
 800a18e:	42ac      	cmp	r4, r5
 800a190:	d007      	beq.n	800a1a2 <WM__GetPrevSibling+0x20>
 800a192:	4620      	mov	r0, r4
 800a194:	f7fa fda0 	bl	8004cd8 <GUI_ALLOC_h2p>
 800a198:	6a03      	ldr	r3, [r0, #32]
 800a19a:	429d      	cmp	r5, r3
 800a19c:	d002      	beq.n	800a1a4 <WM__GetPrevSibling+0x22>
 800a19e:	461c      	mov	r4, r3
 800a1a0:	e7f4      	b.n	800a18c <WM__GetPrevSibling+0xa>
 800a1a2:	2400      	movs	r4, #0
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}

0800a1a8 <WM__SendMessage>:
 800a1a8:	b570      	push	{r4, r5, r6, lr}
 800a1aa:	4c0d      	ldr	r4, [pc, #52]	; (800a1e0 <WM__SendMessage+0x38>)
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	460d      	mov	r5, r1
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	2b13      	cmp	r3, #19
 800a1b4:	dc12      	bgt.n	800a1dc <WM__SendMessage+0x34>
 800a1b6:	f7fa fd8f 	bl	8004cd8 <GUI_ALLOC_h2p>
 800a1ba:	6902      	ldr	r2, [r0, #16]
 800a1bc:	606e      	str	r6, [r5, #4]
 800a1be:	b142      	cbz	r2, 800a1d2 <WM__SendMessage+0x2a>
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	6023      	str	r3, [r4, #0]
 800a1c8:	4790      	blx	r2
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	bd70      	pop	{r4, r5, r6, pc}
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1d8:	f7ff bcf6 	b.w	8009bc8 <WM_DefaultProc>
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000208 	.word	0x20000208

0800a1e4 <WM__SendMessageNoPara>:
 800a1e4:	b530      	push	{r4, r5, lr}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	2210      	movs	r2, #16
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	4668      	mov	r0, sp
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	f002 fd09 	bl	800cc08 <memset>
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7fa fd6e 	bl	8004cd8 <GUI_ALLOC_h2p>
 800a1fc:	6903      	ldr	r3, [r0, #16]
 800a1fe:	b11b      	cbz	r3, 800a208 <WM__SendMessageNoPara+0x24>
 800a200:	9401      	str	r4, [sp, #4]
 800a202:	4668      	mov	r0, sp
 800a204:	9500      	str	r5, [sp, #0]
 800a206:	4798      	blx	r3
 800a208:	b005      	add	sp, #20
 800a20a:	bd30      	pop	{r4, r5, pc}

0800a20c <WM__UpdateChildPositions>:
 800a20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a210:	b08b      	sub	sp, #44	; 0x2c
 800a212:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800a216:	9303      	str	r3, [sp, #12]
 800a218:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a21c:	9101      	str	r1, [sp, #4]
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a224:	9202      	str	r2, [sp, #8]
 800a226:	9305      	str	r3, [sp, #20]
 800a228:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a22c:	9306      	str	r3, [sp, #24]
 800a22e:	f1bb 0f00 	cmp.w	fp, #0
 800a232:	d05e      	beq.n	800a2f2 <WM__UpdateChildPositions+0xe6>
 800a234:	4658      	mov	r0, fp
 800a236:	f7fa fd59 	bl	8004cec <GUI_ALLOC_LockH>
 800a23a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a23c:	9009      	str	r0, [sp, #36]	; 0x24
 800a23e:	f402 7120 	and.w	r1, r2, #640	; 0x280
 800a242:	f9b0 a000 	ldrsh.w	sl, [r0]
 800a246:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a24a:	2980      	cmp	r1, #128	; 0x80
 800a24c:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 800a250:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 800a254:	d008      	beq.n	800a268 <WM__UpdateChildPositions+0x5c>
 800a256:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 800a25a:	d107      	bne.n	800a26c <WM__UpdateChildPositions+0x60>
 800a25c:	9901      	ldr	r1, [sp, #4]
 800a25e:	eb0a 0601 	add.w	r6, sl, r1
 800a262:	9903      	ldr	r1, [sp, #12]
 800a264:	b236      	sxth	r6, r6
 800a266:	e005      	b.n	800a274 <WM__UpdateChildPositions+0x68>
 800a268:	9904      	ldr	r1, [sp, #16]
 800a26a:	e000      	b.n	800a26e <WM__UpdateChildPositions+0x62>
 800a26c:	9905      	ldr	r1, [sp, #20]
 800a26e:	eb01 060a 	add.w	r6, r1, sl
 800a272:	b236      	sxth	r6, r6
 800a274:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800a278:	eb01 0508 	add.w	r5, r1, r8
 800a27c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a280:	b22d      	sxth	r5, r5
 800a282:	d007      	beq.n	800a294 <WM__UpdateChildPositions+0x88>
 800a284:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800a288:	d10a      	bne.n	800a2a0 <WM__UpdateChildPositions+0x94>
 800a28a:	9a02      	ldr	r2, [sp, #8]
 800a28c:	189f      	adds	r7, r3, r2
 800a28e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a290:	b23f      	sxth	r7, r7
 800a292:	e002      	b.n	800a29a <WM__UpdateChildPositions+0x8e>
 800a294:	9a06      	ldr	r2, [sp, #24]
 800a296:	18d7      	adds	r7, r2, r3
 800a298:	b23f      	sxth	r7, r7
 800a29a:	eb09 0402 	add.w	r4, r9, r2
 800a29e:	e005      	b.n	800a2ac <WM__UpdateChildPositions+0xa0>
 800a2a0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a2a4:	18cf      	adds	r7, r1, r3
 800a2a6:	eb01 0409 	add.w	r4, r1, r9
 800a2aa:	b23f      	sxth	r7, r7
 800a2ac:	ebb6 010a 	subs.w	r1, r6, sl
 800a2b0:	b224      	sxth	r4, r4
 800a2b2:	eba7 0203 	sub.w	r2, r7, r3
 800a2b6:	d100      	bne.n	800a2ba <WM__UpdateChildPositions+0xae>
 800a2b8:	b122      	cbz	r2, 800a2c4 <WM__UpdateChildPositions+0xb8>
 800a2ba:	4658      	mov	r0, fp
 800a2bc:	9307      	str	r3, [sp, #28]
 800a2be:	f7ff ff1d 	bl	800a0fc <WM_MoveWindow>
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	1bad      	subs	r5, r5, r6
 800a2c6:	ebca 0808 	rsb	r8, sl, r8
 800a2ca:	1be4      	subs	r4, r4, r7
 800a2cc:	ebc3 0909 	rsb	r9, r3, r9
 800a2d0:	ebb5 0108 	subs.w	r1, r5, r8
 800a2d4:	ebc9 0204 	rsb	r2, r9, r4
 800a2d8:	d100      	bne.n	800a2dc <WM__UpdateChildPositions+0xd0>
 800a2da:	b112      	cbz	r2, 800a2e2 <WM__UpdateChildPositions+0xd6>
 800a2dc:	4658      	mov	r0, fp
 800a2de:	f7ff fdc5 	bl	8009e6c <WM_ResizeWindow>
 800a2e2:	a80a      	add	r0, sp, #40	; 0x28
 800a2e4:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800a2e8:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800a2ec:	f7fa fd0c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a2f0:	e79d      	b.n	800a22e <WM__UpdateChildPositions+0x22>
 800a2f2:	b00b      	add	sp, #44	; 0x2c
 800a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2f8 <WM__AddCriticalHandle>:
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <WM__AddCriticalHandle+0xc>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	6002      	str	r2, [r0, #0]
 800a2fe:	6018      	str	r0, [r3, #0]
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	2001da40 	.word	0x2001da40

0800a308 <WM__GetClientRectEx>:
 800a308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30a:	460d      	mov	r5, r1
 800a30c:	b158      	cbz	r0, 800a326 <WM__GetClientRectEx+0x1e>
 800a30e:	b151      	cbz	r1, 800a326 <WM__GetClientRectEx+0x1e>
 800a310:	ac02      	add	r4, sp, #8
 800a312:	f7fa fceb 	bl	8004cec <GUI_ALLOC_LockH>
 800a316:	4629      	mov	r1, r5
 800a318:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a31c:	f7fe fedc 	bl	80090d8 <WM__GetClientRectWin>
 800a320:	4620      	mov	r0, r4
 800a322:	f7fa fcf1 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a326:	b003      	add	sp, #12
 800a328:	bd30      	pop	{r4, r5, pc}

0800a32a <_GetIndexMask_0>:
 800a32a:	b508      	push	{r3, lr}
 800a32c:	f7fc f87a 	bl	8006424 <LCD_GetNumColors>
 800a330:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800a334:	d010      	beq.n	800a358 <_GetIndexMask_0+0x2e>
 800a336:	287f      	cmp	r0, #127	; 0x7f
 800a338:	d810      	bhi.n	800a35c <_GetIndexMask_0+0x32>
 800a33a:	283f      	cmp	r0, #63	; 0x3f
 800a33c:	d810      	bhi.n	800a360 <_GetIndexMask_0+0x36>
 800a33e:	281f      	cmp	r0, #31
 800a340:	d810      	bhi.n	800a364 <_GetIndexMask_0+0x3a>
 800a342:	280f      	cmp	r0, #15
 800a344:	d810      	bhi.n	800a368 <_GetIndexMask_0+0x3e>
 800a346:	2807      	cmp	r0, #7
 800a348:	d810      	bhi.n	800a36c <_GetIndexMask_0+0x42>
 800a34a:	2803      	cmp	r0, #3
 800a34c:	d810      	bhi.n	800a370 <_GetIndexMask_0+0x46>
 800a34e:	2801      	cmp	r0, #1
 800a350:	bf94      	ite	ls
 800a352:	2000      	movls	r0, #0
 800a354:	2001      	movhi	r0, #1
 800a356:	e00c      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a358:	2008      	movs	r0, #8
 800a35a:	e00a      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a35c:	2007      	movs	r0, #7
 800a35e:	e008      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a360:	2006      	movs	r0, #6
 800a362:	e006      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a364:	2005      	movs	r0, #5
 800a366:	e004      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a368:	2004      	movs	r0, #4
 800a36a:	e002      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a36c:	2003      	movs	r0, #3
 800a36e:	e000      	b.n	800a372 <_GetIndexMask_0+0x48>
 800a370:	2002      	movs	r0, #2
 800a372:	2301      	movs	r3, #1
 800a374:	fa03 f000 	lsl.w	r0, r3, r0
 800a378:	3801      	subs	r0, #1
 800a37a:	bd08      	pop	{r3, pc}

0800a37c <_Index2Color_0>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4604      	mov	r4, r0
 800a380:	f7fc f850 	bl	8006424 <LCD_GetNumColors>
 800a384:	4605      	mov	r5, r0
 800a386:	f7fc f873 	bl	8006470 <LCD_GetPalette>
 800a38a:	42a5      	cmp	r5, r4
 800a38c:	d903      	bls.n	800a396 <_Index2Color_0+0x1a>
 800a38e:	b118      	cbz	r0, 800a398 <_Index2Color_0+0x1c>
 800a390:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a394:	bd38      	pop	{r3, r4, r5, pc}
 800a396:	2000      	movs	r0, #0
 800a398:	bd38      	pop	{r3, r4, r5, pc}

0800a39a <_Color2Index_0>:
 800a39a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39e:	4681      	mov	r9, r0
 800a3a0:	f7fc f840 	bl	8006424 <LCD_GetNumColors>
 800a3a4:	4607      	mov	r7, r0
 800a3a6:	f7fc f863 	bl	8006470 <LCD_GetPalette>
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	b1e0      	cbz	r0, 800a3e8 <_Color2Index_0+0x4e>
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f856 3020 	ldr.w	r3, [r6, r0, lsl #2]
 800a3b4:	454b      	cmp	r3, r9
 800a3b6:	d017      	beq.n	800a3e8 <_Color2Index_0+0x4e>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	4287      	cmp	r7, r0
 800a3bc:	dcf8      	bgt.n	800a3b0 <_Color2Index_0+0x16>
 800a3be:	2400      	movs	r4, #0
 800a3c0:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800a3c4:	4625      	mov	r5, r4
 800a3c6:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800a3ca:	4648      	mov	r0, r9
 800a3cc:	f7fa fe6a 	bl	80050a4 <GUI_CalcColorDist>
 800a3d0:	4580      	cmp	r8, r0
 800a3d2:	bf88      	it	hi
 800a3d4:	462c      	movhi	r4, r5
 800a3d6:	f105 0501 	add.w	r5, r5, #1
 800a3da:	bf88      	it	hi
 800a3dc:	4680      	movhi	r8, r0
 800a3de:	42af      	cmp	r7, r5
 800a3e0:	dcf1      	bgt.n	800a3c6 <_Color2Index_0+0x2c>
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a3ec <GUI_GetYAdjust>:
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <GUI_GetYAdjust+0x2c>)
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 800a3f2:	f003 030c 	and.w	r3, r3, #12
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d007      	beq.n	800a40a <GUI_GetYAdjust+0x1e>
 800a3fa:	2b0c      	cmp	r3, #12
 800a3fc:	d005      	beq.n	800a40a <GUI_GetYAdjust+0x1e>
 800a3fe:	2b04      	cmp	r3, #4
 800a400:	d107      	bne.n	800a412 <GUI_GetYAdjust+0x26>
 800a402:	69d3      	ldr	r3, [r2, #28]
 800a404:	7e18      	ldrb	r0, [r3, #24]
 800a406:	3801      	subs	r0, #1
 800a408:	4770      	bx	lr
 800a40a:	69d3      	ldr	r3, [r2, #28]
 800a40c:	7e18      	ldrb	r0, [r3, #24]
 800a40e:	0840      	lsrs	r0, r0, #1
 800a410:	4770      	bx	lr
 800a412:	2000      	movs	r0, #0
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	20000014 	.word	0x20000014

0800a41c <GUI_GetFontDistY>:
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <GUI_GetFontDistY+0xc>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	7e58      	ldrb	r0, [r3, #25]
 800a424:	4770      	bx	lr
 800a426:	bf00      	nop
 800a428:	20000014 	.word	0x20000014

0800a42c <GUI_GetCharDistX>:
 800a42c:	4b02      	ldr	r3, [pc, #8]	; (800a438 <GUI_GetCharDistX+0xc>)
 800a42e:	2100      	movs	r1, #0
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	4718      	bx	r3
 800a438:	20000014 	.word	0x20000014

0800a43c <GUI_GetCharDistXEx>:
 800a43c:	4b02      	ldr	r3, [pc, #8]	; (800a448 <GUI_GetCharDistXEx+0xc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	4718      	bx	r3
 800a446:	bf00      	nop
 800a448:	20000014 	.word	0x20000014

0800a44c <_Log2VisBuffered>:
 800a44c:	4770      	bx	lr
	...

0800a450 <_DispLine>:
 800a450:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a452:	4615      	mov	r5, r2
 800a454:	ab02      	add	r3, sp, #8
 800a456:	4a21      	ldr	r2, [pc, #132]	; (800a4dc <_DispLine+0x8c>)
 800a458:	4c21      	ldr	r4, [pc, #132]	; (800a4e0 <_DispLine+0x90>)
 800a45a:	f843 1d08 	str.w	r1, [r3, #-8]!
 800a45e:	4619      	mov	r1, r3
 800a460:	9001      	str	r0, [sp, #4]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	4790      	blx	r2
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	9001      	str	r0, [sp, #4]
 800a46a:	6958      	ldr	r0, [r3, #20]
 800a46c:	b940      	cbnz	r0, 800a480 <_DispLine+0x30>
 800a46e:	2001      	movs	r0, #1
 800a470:	f000 ffa2 	bl	800b3b8 <GUI__ManageCache>
 800a474:	6822      	ldr	r2, [r4, #0]
 800a476:	69d3      	ldr	r3, [r2, #28]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	b93b      	cbnz	r3, 800a48c <_DispLine+0x3c>
 800a47c:	4d19      	ldr	r5, [pc, #100]	; (800a4e4 <_DispLine+0x94>)
 800a47e:	e022      	b.n	800a4c6 <_DispLine+0x76>
 800a480:	4629      	mov	r1, r5
 800a482:	f7fa fed5 	bl	8005230 <GUI_RectsIntersect>
 800a486:	2800      	cmp	r0, #0
 800a488:	d1f1      	bne.n	800a46e <_DispLine+0x1e>
 800a48a:	e024      	b.n	800a4d6 <_DispLine+0x86>
 800a48c:	4c16      	ldr	r4, [pc, #88]	; (800a4e8 <_DispLine+0x98>)
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	6821      	ldr	r1, [r4, #0]
 800a492:	b141      	cbz	r1, 800a4a6 <_DispLine+0x56>
 800a494:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800a498:	9801      	ldr	r0, [sp, #4]
 800a49a:	9900      	ldr	r1, [sp, #0]
 800a49c:	4798      	blx	r3
 800a49e:	6823      	ldr	r3, [r4, #0]
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	4798      	blx	r3
 800a4a4:	e014      	b.n	800a4d0 <_DispLine+0x80>
 800a4a6:	9900      	ldr	r1, [sp, #0]
 800a4a8:	9801      	ldr	r0, [sp, #4]
 800a4aa:	4798      	blx	r3
 800a4ac:	e010      	b.n	800a4d0 <_DispLine+0x80>
 800a4ae:	a801      	add	r0, sp, #4
 800a4b0:	f7fb faac 	bl	8005a0c <GUI_UC__GetCharCodeInc>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4798      	blx	r3
 800a4be:	682b      	ldr	r3, [r5, #0]
 800a4c0:	b10b      	cbz	r3, 800a4c6 <_DispLine+0x76>
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	4798      	blx	r3
 800a4c6:	9b00      	ldr	r3, [sp, #0]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	daee      	bge.n	800a4ae <_DispLine+0x5e>
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	f000 ff71 	bl	800b3b8 <GUI__ManageCache>
 800a4d6:	b002      	add	sp, #8
 800a4d8:	bd70      	pop	{r4, r5, r6, pc}
 800a4da:	bf00      	nop
 800a4dc:	20000038 	.word	0x20000038
 800a4e0:	20000014 	.word	0x20000014
 800a4e4:	2001d9c4 	.word	0x2001d9c4
 800a4e8:	2001d9b8 	.word	0x2001d9b8

0800a4ec <GUI__GetLineNumChars>:
 800a4ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ee:	460d      	mov	r5, r1
 800a4f0:	9001      	str	r0, [sp, #4]
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	b188      	cbz	r0, 800a51a <GUI__GetLineNumChars+0x2e>
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	; (800a520 <GUI__GetLineNumChars+0x34>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	695c      	ldr	r4, [r3, #20]
 800a4fe:	b154      	cbz	r4, 800a516 <GUI__GetLineNumChars+0x2a>
 800a500:	6864      	ldr	r4, [r4, #4]
 800a502:	b144      	cbz	r4, 800a516 <GUI__GetLineNumChars+0x2a>
 800a504:	47a0      	blx	r4
 800a506:	e009      	b.n	800a51c <GUI__GetLineNumChars+0x30>
 800a508:	a801      	add	r0, sp, #4
 800a50a:	f7fb fa7f 	bl	8005a0c <GUI_UC__GetCharCodeInc>
 800a50e:	b120      	cbz	r0, 800a51a <GUI__GetLineNumChars+0x2e>
 800a510:	280a      	cmp	r0, #10
 800a512:	d002      	beq.n	800a51a <GUI__GetLineNumChars+0x2e>
 800a514:	3401      	adds	r4, #1
 800a516:	42ac      	cmp	r4, r5
 800a518:	dbf6      	blt.n	800a508 <GUI__GetLineNumChars+0x1c>
 800a51a:	4620      	mov	r0, r4
 800a51c:	b003      	add	sp, #12
 800a51e:	bd30      	pop	{r4, r5, pc}
 800a520:	20000014 	.word	0x20000014

0800a524 <GUI__GetOverlap>:
 800a524:	b513      	push	{r0, r1, r4, lr}
 800a526:	2400      	movs	r4, #0
 800a528:	a902      	add	r1, sp, #8
 800a52a:	f841 4d04 	str.w	r4, [r1, #-4]!
 800a52e:	f7ff ff85 	bl	800a43c <GUI_GetCharDistXEx>
 800a532:	9b01      	ldr	r3, [sp, #4]
 800a534:	4298      	cmp	r0, r3
 800a536:	bfb4      	ite	lt
 800a538:	1a18      	sublt	r0, r3, r0
 800a53a:	4620      	movge	r0, r4
 800a53c:	b002      	add	sp, #8
 800a53e:	bd10      	pop	{r4, pc}

0800a540 <GUI__GetLineDistX>:
 800a540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a542:	4a15      	ldr	r2, [pc, #84]	; (800a598 <GUI__GetLineDistX+0x58>)
 800a544:	ab02      	add	r3, sp, #8
 800a546:	9001      	str	r0, [sp, #4]
 800a548:	f843 1d08 	str.w	r1, [r3, #-8]!
 800a54c:	4619      	mov	r1, r3
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	4790      	blx	r2
 800a552:	9001      	str	r0, [sp, #4]
 800a554:	b1e8      	cbz	r0, 800a592 <GUI__GetLineDistX+0x52>
 800a556:	4b11      	ldr	r3, [pc, #68]	; (800a59c <GUI__GetLineDistX+0x5c>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	695c      	ldr	r4, [r3, #20]
 800a55e:	b10c      	cbz	r4, 800a564 <GUI__GetLineDistX+0x24>
 800a560:	6824      	ldr	r4, [r4, #0]
 800a562:	b90c      	cbnz	r4, 800a568 <GUI__GetLineDistX+0x28>
 800a564:	4625      	mov	r5, r4
 800a566:	e002      	b.n	800a56e <GUI__GetLineDistX+0x2e>
 800a568:	9900      	ldr	r1, [sp, #0]
 800a56a:	47a0      	blx	r4
 800a56c:	e011      	b.n	800a592 <GUI__GetLineDistX+0x52>
 800a56e:	9b00      	ldr	r3, [sp, #0]
 800a570:	3b01      	subs	r3, #1
 800a572:	2b00      	cmp	r3, #0
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	db07      	blt.n	800a588 <GUI__GetLineDistX+0x48>
 800a578:	a801      	add	r0, sp, #4
 800a57a:	f7fb fa47 	bl	8005a0c <GUI_UC__GetCharCodeInc>
 800a57e:	4604      	mov	r4, r0
 800a580:	f7ff ff54 	bl	800a42c <GUI_GetCharDistX>
 800a584:	4405      	add	r5, r0
 800a586:	e7f2      	b.n	800a56e <GUI__GetLineDistX+0x2e>
 800a588:	4620      	mov	r0, r4
 800a58a:	f7ff ffcb 	bl	800a524 <GUI__GetOverlap>
 800a58e:	4428      	add	r0, r5
 800a590:	e7ff      	b.n	800a592 <GUI__GetLineDistX+0x52>
 800a592:	b003      	add	sp, #12
 800a594:	bd30      	pop	{r4, r5, pc}
 800a596:	bf00      	nop
 800a598:	20000038 	.word	0x20000038
 800a59c:	20000014 	.word	0x20000014

0800a5a0 <GUI__DispLine>:
 800a5a0:	4b27      	ldr	r3, [pc, #156]	; (800a640 <GUI__DispLine+0xa0>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	460e      	mov	r6, r1
 800a5aa:	b163      	cbz	r3, 800a5c6 <GUI__DispLine+0x26>
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f7ff f949 	bl	8009844 <WM__InitIVRSearch>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d041      	beq.n	800a63a <GUI__DispLine+0x9a>
 800a5b6:	466a      	mov	r2, sp
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	f7ff ff48 	bl	800a450 <_DispLine>
 800a5c0:	f7ff f87e 	bl	80096c0 <WM__GetNextIVR>
 800a5c4:	e7f5      	b.n	800a5b2 <GUI__DispLine+0x12>
 800a5c6:	4c1f      	ldr	r4, [pc, #124]	; (800a644 <GUI__DispLine+0xa4>)
 800a5c8:	466b      	mov	r3, sp
 800a5ca:	6810      	ldr	r0, [r2, #0]
 800a5cc:	6851      	ldr	r1, [r2, #4]
 800a5ce:	6822      	ldr	r2, [r4, #0]
 800a5d0:	c303      	stmia	r3!, {r0, r1}
 800a5d2:	f8b2 704c 	ldrh.w	r7, [r2, #76]	; 0x4c
 800a5d6:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5da:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800a5de:	443b      	add	r3, r7
 800a5e0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800a5e4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800a5e8:	f8ad 3000 	strh.w	r3, [sp]
 800a5ec:	4401      	add	r1, r0
 800a5ee:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a5f2:	443a      	add	r2, r7
 800a5f4:	f8ad 1002 	strh.w	r1, [sp, #2]
 800a5f8:	4403      	add	r3, r0
 800a5fa:	4668      	mov	r0, sp
 800a5fc:	f8ad 2004 	strh.w	r2, [sp, #4]
 800a600:	f8ad 3006 	strh.w	r3, [sp, #6]
 800a604:	f7ff f91e 	bl	8009844 <WM__InitIVRSearch>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	b940      	cbnz	r0, 800a61e <GUI__DispLine+0x7e>
 800a60c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a60e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a610:	1a52      	subs	r2, r2, r1
 800a612:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a614:	845a      	strh	r2, [r3, #34]	; 0x22
 800a616:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800a618:	1a52      	subs	r2, r2, r1
 800a61a:	849a      	strh	r2, [r3, #36]	; 0x24
 800a61c:	e00d      	b.n	800a63a <GUI__DispLine+0x9a>
 800a61e:	f8bd 2000 	ldrh.w	r2, [sp]
 800a622:	4631      	mov	r1, r6
 800a624:	4628      	mov	r0, r5
 800a626:	845a      	strh	r2, [r3, #34]	; 0x22
 800a628:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a62c:	849a      	strh	r2, [r3, #36]	; 0x24
 800a62e:	466a      	mov	r2, sp
 800a630:	f7ff ff0e 	bl	800a450 <_DispLine>
 800a634:	f7ff f844 	bl	80096c0 <WM__GetNextIVR>
 800a638:	e7e6      	b.n	800a608 <GUI__DispLine+0x68>
 800a63a:	b003      	add	sp, #12
 800a63c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a63e:	bf00      	nop
 800a640:	2001d9a4 	.word	0x2001d9a4
 800a644:	20000014 	.word	0x20000014

0800a648 <GUIMONO_DispChar>:
 800a648:	4b4d      	ldr	r3, [pc, #308]	; (800a780 <GUIMONO_DispChar+0x138>)
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	69d1      	ldr	r1, [r2, #28]
 800a64e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a652:	69cc      	ldr	r4, [r1, #28]
 800a654:	b08b      	sub	sp, #44	; 0x2c
 800a656:	89a3      	ldrh	r3, [r4, #12]
 800a658:	4283      	cmp	r3, r0
 800a65a:	d808      	bhi.n	800a66e <GUIMONO_DispChar+0x26>
 800a65c:	89e5      	ldrh	r5, [r4, #14]
 800a65e:	4285      	cmp	r5, r0
 800a660:	d305      	bcc.n	800a66e <GUIMONO_DispChar+0x26>
 800a662:	6825      	ldr	r5, [r4, #0]
 800a664:	1ac3      	subs	r3, r0, r3
 800a666:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a66a:	9506      	str	r5, [sp, #24]
 800a66c:	e013      	b.n	800a696 <GUIMONO_DispChar+0x4e>
 800a66e:	68a3      	ldr	r3, [r4, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d07c      	beq.n	800a76e <GUIMONO_DispChar+0x126>
 800a674:	881d      	ldrh	r5, [r3, #0]
 800a676:	42a8      	cmp	r0, r5
 800a678:	d379      	bcc.n	800a76e <GUIMONO_DispChar+0x126>
 800a67a:	885e      	ldrh	r6, [r3, #2]
 800a67c:	4286      	cmp	r6, r0
 800a67e:	d376      	bcc.n	800a76e <GUIMONO_DispChar+0x126>
 800a680:	1b40      	subs	r0, r0, r5
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	6866      	ldr	r6, [r4, #4]
 800a686:	b280      	uxth	r0, r0
 800a688:	9606      	str	r6, [sp, #24]
 800a68a:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800a68e:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 800a692:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 800a696:	1c58      	adds	r0, r3, #1
 800a698:	9309      	str	r3, [sp, #36]	; 0x24
 800a69a:	d068      	beq.n	800a76e <GUIMONO_DispChar+0x126>
 800a69c:	f891 b018 	ldrb.w	fp, [r1, #24]
 800a6a0:	7ca1      	ldrb	r1, [r4, #18]
 800a6a2:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 800a6a6:	fb1b f301 	smulbb	r3, fp, r1
 800a6aa:	4d35      	ldr	r5, [pc, #212]	; (800a780 <GUIMONO_DispChar+0x138>)
 800a6ac:	4648      	mov	r0, r9
 800a6ae:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 800a6b2:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 800a6b6:	9307      	str	r3, [sp, #28]
 800a6b8:	f894 a010 	ldrb.w	sl, [r4, #16]
 800a6bc:	f7fb fa6c 	bl	8005b98 <LCD_SetDrawMode>
 800a6c0:	6829      	ldr	r1, [r5, #0]
 800a6c2:	9b07      	ldr	r3, [sp, #28]
 800a6c4:	69ca      	ldr	r2, [r1, #28]
 800a6c6:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a6c8:	9008      	str	r0, [sp, #32]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	9105      	str	r1, [sp, #20]
 800a6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d0:	9906      	ldr	r1, [sp, #24]
 800a6d2:	fb00 1003 	mla	r0, r0, r3, r1
 800a6d6:	4641      	mov	r1, r8
 800a6d8:	9004      	str	r0, [sp, #16]
 800a6da:	4638      	mov	r0, r7
 800a6dc:	7ca3      	ldrb	r3, [r4, #18]
 800a6de:	9303      	str	r3, [sp, #12]
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	7ed3      	ldrb	r3, [r2, #27]
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	7e93      	ldrb	r3, [r2, #26]
 800a6ea:	4652      	mov	r2, sl
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	465b      	mov	r3, fp
 800a6f0:	f7fb fbc8 	bl	8005e84 <LCD_DrawBitmap>
 800a6f4:	1c73      	adds	r3, r6, #1
 800a6f6:	d01a      	beq.n	800a72e <GUIMONO_DispChar+0xe6>
 800a6f8:	f049 0002 	orr.w	r0, r9, #2
 800a6fc:	f7fb fa4c 	bl	8005b98 <LCD_SetDrawMode>
 800a700:	682a      	ldr	r2, [r5, #0]
 800a702:	9906      	ldr	r1, [sp, #24]
 800a704:	4638      	mov	r0, r7
 800a706:	69d3      	ldr	r3, [r2, #28]
 800a708:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a70a:	9205      	str	r2, [sp, #20]
 800a70c:	9a07      	ldr	r2, [sp, #28]
 800a70e:	fb02 1606 	mla	r6, r2, r6, r1
 800a712:	4641      	mov	r1, r8
 800a714:	9604      	str	r6, [sp, #16]
 800a716:	7ca2      	ldrb	r2, [r4, #18]
 800a718:	9203      	str	r2, [sp, #12]
 800a71a:	2201      	movs	r2, #1
 800a71c:	9202      	str	r2, [sp, #8]
 800a71e:	7eda      	ldrb	r2, [r3, #27]
 800a720:	9201      	str	r2, [sp, #4]
 800a722:	4652      	mov	r2, sl
 800a724:	7e9b      	ldrb	r3, [r3, #26]
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	465b      	mov	r3, fp
 800a72a:	f7fb fbab 	bl	8005e84 <LCD_DrawBitmap>
 800a72e:	682b      	ldr	r3, [r5, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	7e5a      	ldrb	r2, [r3, #25]
 800a734:	7e1b      	ldrb	r3, [r3, #24]
 800a736:	429a      	cmp	r2, r3
 800a738:	d915      	bls.n	800a766 <GUIMONO_DispChar+0x11e>
 800a73a:	f1b9 0f02 	cmp.w	r9, #2
 800a73e:	d012      	beq.n	800a766 <GUIMONO_DispChar+0x11e>
 800a740:	f089 0004 	eor.w	r0, r9, #4
 800a744:	f7fb fa28 	bl	8005b98 <LCD_SetDrawMode>
 800a748:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <GUIMONO_DispChar+0x138>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	69db      	ldr	r3, [r3, #28]
 800a74e:	7e18      	ldrb	r0, [r3, #24]
 800a750:	7ed9      	ldrb	r1, [r3, #27]
 800a752:	7e9a      	ldrb	r2, [r3, #26]
 800a754:	7e5b      	ldrb	r3, [r3, #25]
 800a756:	fb00 8101 	mla	r1, r0, r1, r8
 800a75a:	fb0a 7202 	mla	r2, sl, r2, r7
 800a75e:	4638      	mov	r0, r7
 800a760:	4443      	add	r3, r8
 800a762:	f7fb fa77 	bl	8005c54 <LCD_FillRect>
 800a766:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800a76a:	f7fb fa15 	bl	8005b98 <LCD_SetDrawMode>
 800a76e:	4b04      	ldr	r3, [pc, #16]	; (800a780 <GUIMONO_DispChar+0x138>)
 800a770:	7c61      	ldrb	r1, [r4, #17]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	8c53      	ldrh	r3, [r2, #34]	; 0x22
 800a776:	440b      	add	r3, r1
 800a778:	8453      	strh	r3, [r2, #34]	; 0x22
 800a77a:	b00b      	add	sp, #44	; 0x2c
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a780:	20000014 	.word	0x20000014

0800a784 <GUIMONO_GetCharDistX>:
 800a784:	4b04      	ldr	r3, [pc, #16]	; (800a798 <GUIMONO_GetCharDistX+0x14>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	b109      	cbz	r1, 800a792 <GUIMONO_GetCharDistX+0xe>
 800a78e:	7c1a      	ldrb	r2, [r3, #16]
 800a790:	600a      	str	r2, [r1, #0]
 800a792:	7c58      	ldrb	r0, [r3, #17]
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	20000014 	.word	0x20000014

0800a79c <GUIMONO_GetFontInfo>:
 800a79c:	2302      	movs	r3, #2
 800a79e:	800b      	strh	r3, [r1, #0]
 800a7a0:	4770      	bx	lr

0800a7a2 <GUIMONO_IsInFont>:
 800a7a2:	69c3      	ldr	r3, [r0, #28]
 800a7a4:	899a      	ldrh	r2, [r3, #12]
 800a7a6:	428a      	cmp	r2, r1
 800a7a8:	d802      	bhi.n	800a7b0 <GUIMONO_IsInFont+0xe>
 800a7aa:	89da      	ldrh	r2, [r3, #14]
 800a7ac:	428a      	cmp	r2, r1
 800a7ae:	d20f      	bcs.n	800a7d0 <GUIMONO_IsInFont+0x2e>
 800a7b0:	6898      	ldr	r0, [r3, #8]
 800a7b2:	b180      	cbz	r0, 800a7d6 <GUIMONO_IsInFont+0x34>
 800a7b4:	8803      	ldrh	r3, [r0, #0]
 800a7b6:	4299      	cmp	r1, r3
 800a7b8:	d30c      	bcc.n	800a7d4 <GUIMONO_IsInFont+0x32>
 800a7ba:	8842      	ldrh	r2, [r0, #2]
 800a7bc:	428a      	cmp	r2, r1
 800a7be:	d309      	bcc.n	800a7d4 <GUIMONO_IsInFont+0x32>
 800a7c0:	1ac9      	subs	r1, r1, r3
 800a7c2:	6843      	ldr	r3, [r0, #4]
 800a7c4:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 800a7c8:	43c0      	mvns	r0, r0
 800a7ca:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 800a7ce:	4770      	bx	lr
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	4770      	bx	lr
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	4770      	bx	lr

0800a7d8 <GUIPROP__FindChar>:
 800a7d8:	b138      	cbz	r0, 800a7ea <GUIPROP__FindChar+0x12>
 800a7da:	8803      	ldrh	r3, [r0, #0]
 800a7dc:	428b      	cmp	r3, r1
 800a7de:	d802      	bhi.n	800a7e6 <GUIPROP__FindChar+0xe>
 800a7e0:	8843      	ldrh	r3, [r0, #2]
 800a7e2:	428b      	cmp	r3, r1
 800a7e4:	d201      	bcs.n	800a7ea <GUIPROP__FindChar+0x12>
 800a7e6:	6880      	ldr	r0, [r0, #8]
 800a7e8:	e7f6      	b.n	800a7d8 <GUIPROP__FindChar>
 800a7ea:	4770      	bx	lr

0800a7ec <GUIPROP_DispChar>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	4c38      	ldr	r4, [pc, #224]	; (800a8d4 <GUIPROP_DispChar+0xe8>)
 800a7f2:	b089      	sub	sp, #36	; 0x24
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	4601      	mov	r1, r0
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 800a7fe:	69db      	ldr	r3, [r3, #28]
 800a800:	69d8      	ldr	r0, [r3, #28]
 800a802:	f7ff ffe9 	bl	800a7d8 <GUIPROP__FindChar>
 800a806:	2800      	cmp	r0, #0
 800a808:	d060      	beq.n	800a8cc <GUIPROP_DispChar+0xe0>
 800a80a:	8805      	ldrh	r5, [r0, #0]
 800a80c:	6847      	ldr	r7, [r0, #4]
 800a80e:	4640      	mov	r0, r8
 800a810:	1b75      	subs	r5, r6, r5
 800a812:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 800a816:	f896 a002 	ldrb.w	sl, [r6, #2]
 800a81a:	f7fb f9bd 	bl	8005b98 <LCD_SetDrawMode>
 800a81e:	f8d4 c000 	ldr.w	ip, [r4]
 800a822:	4681      	mov	r9, r0
 800a824:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 800a828:	f8dc e01c 	ldr.w	lr, [ip, #28]
 800a82c:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 800a830:	f89e b018 	ldrb.w	fp, [lr, #24]
 800a834:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 800a838:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 800a83c:	f04f 0c01 	mov.w	ip, #1
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	6873      	ldr	r3, [r6, #4]
 800a844:	f8cd a00c 	str.w	sl, [sp, #12]
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	465b      	mov	r3, fp
 800a84c:	f8cd c008 	str.w	ip, [sp, #8]
 800a850:	f89e c01b 	ldrb.w	ip, [lr, #27]
 800a854:	f8cd c004 	str.w	ip, [sp, #4]
 800a858:	f89e e01a 	ldrb.w	lr, [lr, #26]
 800a85c:	f8cd e000 	str.w	lr, [sp]
 800a860:	f7fb fb10 	bl	8005e84 <LCD_DrawBitmap>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	7e59      	ldrb	r1, [r3, #25]
 800a86a:	f893 a018 	ldrb.w	sl, [r3, #24]
 800a86e:	9107      	str	r1, [sp, #28]
 800a870:	4551      	cmp	r1, sl
 800a872:	d920      	bls.n	800a8b6 <GUIPROP_DispChar+0xca>
 800a874:	f1b8 0f02 	cmp.w	r8, #2
 800a878:	d01d      	beq.n	800a8b6 <GUIPROP_DispChar+0xca>
 800a87a:	f893 b01b 	ldrb.w	fp, [r3, #27]
 800a87e:	f7fa fc3f 	bl	8005100 <GUI_GetColor>
 800a882:	4680      	mov	r8, r0
 800a884:	f7fa fc35 	bl	80050f2 <GUI_GetBkColor>
 800a888:	f7fa fd0f 	bl	80052aa <GUI_SetColor>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	9907      	ldr	r1, [sp, #28]
 800a890:	f9b3 e024 	ldrsh.w	lr, [r3, #36]	; 0x24
 800a894:	f9b3 0022 	ldrsh.w	r0, [r3, #34]	; 0x22
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	f817 5035 	ldrb.w	r5, [r7, r5, lsl #3]
 800a89e:	7eda      	ldrb	r2, [r3, #27]
 800a8a0:	fb0b e301 	mla	r3, fp, r1, lr
 800a8a4:	fb0b e10a 	mla	r1, fp, sl, lr
 800a8a8:	fb05 0202 	mla	r2, r5, r2, r0
 800a8ac:	f7fb f9d2 	bl	8005c54 <LCD_FillRect>
 800a8b0:	4640      	mov	r0, r8
 800a8b2:	f7fa fcfa 	bl	80052aa <GUI_SetColor>
 800a8b6:	4648      	mov	r0, r9
 800a8b8:	f7fb f96e 	bl	8005b98 <LCD_SetDrawMode>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	7871      	ldrb	r1, [r6, #1]
 800a8c0:	69da      	ldr	r2, [r3, #28]
 800a8c2:	7e90      	ldrb	r0, [r2, #26]
 800a8c4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800a8c6:	fb00 2201 	mla	r2, r0, r1, r2
 800a8ca:	845a      	strh	r2, [r3, #34]	; 0x22
 800a8cc:	b009      	add	sp, #36	; 0x24
 800a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000014 	.word	0x20000014

0800a8d8 <GUIPROP_GetCharDistX>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <GUIPROP_GetCharDistX+0x38>)
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460c      	mov	r4, r1
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	69dd      	ldr	r5, [r3, #28]
 800a8e6:	69e8      	ldr	r0, [r5, #28]
 800a8e8:	f7ff ff76 	bl	800a7d8 <GUIPROP__FindChar>
 800a8ec:	b170      	cbz	r0, 800a90c <GUIPROP_GetCharDistX+0x34>
 800a8ee:	8803      	ldrh	r3, [r0, #0]
 800a8f0:	1ad2      	subs	r2, r2, r3
 800a8f2:	6843      	ldr	r3, [r0, #4]
 800a8f4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800a8f8:	7848      	ldrb	r0, [r1, #1]
 800a8fa:	7ea9      	ldrb	r1, [r5, #26]
 800a8fc:	fb10 f001 	smulbb	r0, r0, r1
 800a900:	b124      	cbz	r4, 800a90c <GUIPROP_GetCharDistX+0x34>
 800a902:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 800a906:	fb11 f303 	smulbb	r3, r1, r3
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	bd38      	pop	{r3, r4, r5, pc}
 800a90e:	bf00      	nop
 800a910:	20000014 	.word	0x20000014

0800a914 <GUIPROP_GetFontInfo>:
 800a914:	2301      	movs	r3, #1
 800a916:	800b      	strh	r3, [r1, #0]
 800a918:	4770      	bx	lr

0800a91a <GUIPROP_IsInFont>:
 800a91a:	b508      	push	{r3, lr}
 800a91c:	69c0      	ldr	r0, [r0, #28]
 800a91e:	f7ff ff5b 	bl	800a7d8 <GUIPROP__FindChar>
 800a922:	3000      	adds	r0, #0
 800a924:	bf18      	it	ne
 800a926:	2001      	movne	r0, #1
 800a928:	bd08      	pop	{r3, pc}
	...

0800a92c <GUI_SelectLayer>:
 800a92c:	b570      	push	{r4, r5, r6, lr}
 800a92e:	4d08      	ldr	r5, [pc, #32]	; (800a950 <GUI_SelectLayer+0x24>)
 800a930:	2801      	cmp	r0, #1
 800a932:	4604      	mov	r4, r0
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	7c5e      	ldrb	r6, [r3, #17]
 800a938:	d808      	bhi.n	800a94c <GUI_SelectLayer+0x20>
 800a93a:	f7fa fef3 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800a93e:	b128      	cbz	r0, 800a94c <GUI_SelectLayer+0x20>
 800a940:	682b      	ldr	r3, [r5, #0]
 800a942:	745c      	strb	r4, [r3, #17]
 800a944:	f7fa fca6 	bl	8005294 <GUI_SelectLCD>
 800a948:	4b02      	ldr	r3, [pc, #8]	; (800a954 <GUI_SelectLayer+0x28>)
 800a94a:	601c      	str	r4, [r3, #0]
 800a94c:	4630      	mov	r0, r6
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	20000014 	.word	0x20000014
 800a954:	2001da24 	.word	0x2001da24

0800a958 <_Unlink>:
 800a958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a95a:	4605      	mov	r5, r0
 800a95c:	b1e8      	cbz	r0, 800a99a <_Unlink+0x42>
 800a95e:	f7fa f9c5 	bl	8004cec <GUI_ALLOC_LockH>
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <_Unlink+0x48>)
 800a964:	9000      	str	r0, [sp, #0]
 800a966:	685c      	ldr	r4, [r3, #4]
 800a968:	42a5      	cmp	r5, r4
 800a96a:	d105      	bne.n	800a978 <_Unlink+0x20>
 800a96c:	6842      	ldr	r2, [r0, #4]
 800a96e:	605a      	str	r2, [r3, #4]
 800a970:	e010      	b.n	800a994 <_Unlink+0x3c>
 800a972:	a801      	add	r0, sp, #4
 800a974:	f7fa f9c8 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a978:	b164      	cbz	r4, 800a994 <_Unlink+0x3c>
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7fa f9b6 	bl	8004cec <GUI_ALLOC_LockH>
 800a980:	6844      	ldr	r4, [r0, #4]
 800a982:	9001      	str	r0, [sp, #4]
 800a984:	42a5      	cmp	r5, r4
 800a986:	d1f4      	bne.n	800a972 <_Unlink+0x1a>
 800a988:	9b00      	ldr	r3, [sp, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	6043      	str	r3, [r0, #4]
 800a98e:	a801      	add	r0, sp, #4
 800a990:	f7fa f9ba 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a994:	4668      	mov	r0, sp
 800a996:	f7fa f9b7 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a99a:	b003      	add	sp, #12
 800a99c:	bd30      	pop	{r4, r5, pc}
 800a99e:	bf00      	nop
 800a9a0:	2000020c 	.word	0x2000020c

0800a9a4 <GUI_TIMER__GetFirstTimer>:
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a8:	6003      	str	r3, [r0, #0]
 800a9aa:	4605      	mov	r5, r0
 800a9ac:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <GUI_TIMER__GetFirstTimer+0x2c>)
 800a9ae:	681c      	ldr	r4, [r3, #0]
 800a9b0:	b154      	cbz	r4, 800a9c8 <GUI_TIMER__GetFirstTimer+0x24>
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7fa f99a 	bl	8004cec <GUI_ALLOC_LockH>
 800a9b8:	ab02      	add	r3, sp, #8
 800a9ba:	6902      	ldr	r2, [r0, #16]
 800a9bc:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	602a      	str	r2, [r5, #0]
 800a9c4:	f7fa f9a0 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	b003      	add	sp, #12
 800a9cc:	bd30      	pop	{r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000020c 	.word	0x2000020c

0800a9d4 <GUI_TIMER__GetNextTimerLin>:
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9d8:	600b      	str	r3, [r1, #0]
 800a9da:	460e      	mov	r6, r1
 800a9dc:	4604      	mov	r4, r0
 800a9de:	b190      	cbz	r0, 800aa06 <GUI_TIMER__GetNextTimerLin+0x32>
 800a9e0:	f7fa f984 	bl	8004cec <GUI_ALLOC_LockH>
 800a9e4:	ad02      	add	r5, sp, #8
 800a9e6:	6884      	ldr	r4, [r0, #8]
 800a9e8:	f845 0d04 	str.w	r0, [r5, #-4]!
 800a9ec:	b144      	cbz	r4, 800aa00 <GUI_TIMER__GetNextTimerLin+0x2c>
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f7fa f98a 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	f7fa f979 	bl	8004cec <GUI_ALLOC_LockH>
 800a9fa:	6903      	ldr	r3, [r0, #16]
 800a9fc:	9001      	str	r0, [sp, #4]
 800a9fe:	6033      	str	r3, [r6, #0]
 800aa00:	4628      	mov	r0, r5
 800aa02:	f7fa f981 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800aa06:	4620      	mov	r0, r4
 800aa08:	b002      	add	sp, #8
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}

0800aa0c <GUI_TIMER_Delete>:
 800aa0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa0e:	4604      	mov	r4, r0
 800aa10:	b350      	cbz	r0, 800aa68 <GUI_TIMER_Delete+0x5c>
 800aa12:	4e16      	ldr	r6, [pc, #88]	; (800aa6c <GUI_TIMER_Delete+0x60>)
 800aa14:	6835      	ldr	r5, [r6, #0]
 800aa16:	42a8      	cmp	r0, r5
 800aa18:	d10b      	bne.n	800aa32 <GUI_TIMER_Delete+0x26>
 800aa1a:	f7fa f967 	bl	8004cec <GUI_ALLOC_LockH>
 800aa1e:	ab02      	add	r3, sp, #8
 800aa20:	6882      	ldr	r2, [r0, #8]
 800aa22:	f843 0d04 	str.w	r0, [r3, #-4]!
 800aa26:	4618      	mov	r0, r3
 800aa28:	6032      	str	r2, [r6, #0]
 800aa2a:	e015      	b.n	800aa58 <GUI_TIMER_Delete+0x4c>
 800aa2c:	4668      	mov	r0, sp
 800aa2e:	f7fa f96b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800aa32:	b19d      	cbz	r5, 800aa5c <GUI_TIMER_Delete+0x50>
 800aa34:	4628      	mov	r0, r5
 800aa36:	f7fa f959 	bl	8004cec <GUI_ALLOC_LockH>
 800aa3a:	6885      	ldr	r5, [r0, #8]
 800aa3c:	9000      	str	r0, [sp, #0]
 800aa3e:	42ac      	cmp	r4, r5
 800aa40:	d1f4      	bne.n	800aa2c <GUI_TIMER_Delete+0x20>
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7fa f952 	bl	8004cec <GUI_ALLOC_LockH>
 800aa48:	9b00      	ldr	r3, [sp, #0]
 800aa4a:	6882      	ldr	r2, [r0, #8]
 800aa4c:	9001      	str	r0, [sp, #4]
 800aa4e:	a801      	add	r0, sp, #4
 800aa50:	609a      	str	r2, [r3, #8]
 800aa52:	f7fa f959 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800aa56:	4668      	mov	r0, sp
 800aa58:	f7fa f956 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7ff ff7b 	bl	800a958 <_Unlink>
 800aa62:	4620      	mov	r0, r4
 800aa64:	f7fa f970 	bl	8004d48 <GUI_ALLOC_Free>
 800aa68:	b002      	add	sp, #8
 800aa6a:	bd70      	pop	{r4, r5, r6, pc}
 800aa6c:	2000020c 	.word	0x2000020c

0800aa70 <GUI_TIMER_GetFlag>:
 800aa70:	b513      	push	{r0, r1, r4, lr}
 800aa72:	460c      	mov	r4, r1
 800aa74:	b168      	cbz	r0, 800aa92 <GUI_TIMER_GetFlag+0x22>
 800aa76:	f7fa f939 	bl	8004cec <GUI_ALLOC_LockH>
 800aa7a:	8982      	ldrh	r2, [r0, #12]
 800aa7c:	ab02      	add	r3, sp, #8
 800aa7e:	4222      	tst	r2, r4
 800aa80:	f843 0d04 	str.w	r0, [r3, #-4]!
 800aa84:	4618      	mov	r0, r3
 800aa86:	bf14      	ite	ne
 800aa88:	2401      	movne	r4, #1
 800aa8a:	2400      	moveq	r4, #0
 800aa8c:	f7fa f93c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800aa90:	e000      	b.n	800aa94 <GUI_TIMER_GetFlag+0x24>
 800aa92:	2401      	movs	r4, #1
 800aa94:	4620      	mov	r0, r4
 800aa96:	b002      	add	sp, #8
 800aa98:	bd10      	pop	{r4, pc}
	...

0800aa9c <GUI__MixColorsBulk>:
 800aa9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa0:	b087      	sub	sp, #28
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460f      	mov	r7, r1
 800aaa6:	4690      	mov	r8, r2
 800aaa8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aab0:	009d      	lsls	r5, r3, #2
 800aab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aab4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800aab8:	9303      	str	r3, [sp, #12]
 800aaba:	2300      	movs	r3, #0
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	4b18      	ldr	r3, [pc, #96]	; (800ab20 <GUI__MixColorsBulk+0x84>)
 800aac0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aac2:	9901      	ldr	r1, [sp, #4]
 800aac4:	4291      	cmp	r1, r2
 800aac6:	d028      	beq.n	800ab1a <GUI__MixColorsBulk+0x7e>
 800aac8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800aacc:	46c2      	mov	sl, r8
 800aace:	46b3      	mov	fp, r6
 800aad0:	9702      	str	r7, [sp, #8]
 800aad2:	f85b 0b04 	ldr.w	r0, [fp], #4
 800aad6:	9904      	ldr	r1, [sp, #16]
 800aad8:	0e02      	lsrs	r2, r0, #24
 800aada:	9c02      	ldr	r4, [sp, #8]
 800aadc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800aae0:	9305      	str	r3, [sp, #20]
 800aae2:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800aae6:	434a      	muls	r2, r1
 800aae8:	21ff      	movs	r1, #255	; 0xff
 800aaea:	fbb2 f2f1 	udiv	r2, r2, r1
 800aaee:	f854 1b04 	ldr.w	r1, [r4], #4
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	9402      	str	r4, [sp, #8]
 800aaf6:	681c      	ldr	r4, [r3, #0]
 800aaf8:	47a0      	blx	r4
 800aafa:	f1b9 0901 	subs.w	r9, r9, #1
 800aafe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800ab02:	9b05      	ldr	r3, [sp, #20]
 800ab04:	f84a 0b04 	str.w	r0, [sl], #4
 800ab08:	d1e3      	bne.n	800aad2 <GUI__MixColorsBulk+0x36>
 800ab0a:	9a03      	ldr	r2, [sp, #12]
 800ab0c:	442e      	add	r6, r5
 800ab0e:	44a8      	add	r8, r5
 800ab10:	4417      	add	r7, r2
 800ab12:	9a01      	ldr	r2, [sp, #4]
 800ab14:	3201      	adds	r2, #1
 800ab16:	9201      	str	r2, [sp, #4]
 800ab18:	e7d2      	b.n	800aac0 <GUI__MixColorsBulk+0x24>
 800ab1a:	b007      	add	sp, #28
 800ab1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab20:	2000003c 	.word	0x2000003c

0800ab24 <GUI__MixColors>:
 800ab24:	f081 417f 	eor.w	r1, r1, #4278190080	; 0xff000000
 800ab28:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800ab2c:	0e0b      	lsrs	r3, r1, #24
 800ab2e:	ea4f 6310 	mov.w	r3, r0, lsr #24
 800ab32:	fb02 f203 	mul.w	r2, r2, r3
 800ab36:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800ab3a:	bf08      	it	eq
 800ab3c:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800ab40:	fbb2 f2f3 	udiv	r2, r2, r3
 800ab44:	b530      	push	{r4, r5, lr}
 800ab46:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800ab4a:	1a9d      	subs	r5, r3, r2
 800ab4c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800ab50:	f044 7380 	orr.w	r3, r4, #16777216	; 0x1000000
 800ab54:	0a0c      	lsrs	r4, r1, #8
 800ab56:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 800ab5a:	436c      	muls	r4, r5
 800ab5c:	fb02 4403 	mla	r4, r2, r3, r4
 800ab60:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 800ab64:	4342      	muls	r2, r0
 800ab66:	f004 24ff 	and.w	r4, r4, #4278255360	; 0xff00ff00
 800ab6a:	fb05 2103 	mla	r1, r5, r3, r2
 800ab6e:	0a09      	lsrs	r1, r1, #8
 800ab70:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800ab74:	ea44 0001 	orr.w	r0, r4, r1
 800ab78:	f080 407f 	eor.w	r0, r0, #4278190080	; 0xff000000
 800ab7c:	bd30      	pop	{r4, r5, pc}
	...

0800ab80 <_OnExit>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	4c08      	ldr	r4, [pc, #32]	; (800aba4 <_OnExit+0x24>)
 800ab84:	6820      	ldr	r0, [r4, #0]
 800ab86:	f7fa f89d 	bl	8004cc4 <GUI_ALLOC_FreeFixedBlock>
 800ab8a:	6860      	ldr	r0, [r4, #4]
 800ab8c:	f7fa f89a 	bl	8004cc4 <GUI_ALLOC_FreeFixedBlock>
 800ab90:	68a0      	ldr	r0, [r4, #8]
 800ab92:	f7fa f897 	bl	8004cc4 <GUI_ALLOC_FreeFixedBlock>
 800ab96:	2300      	movs	r3, #0
 800ab98:	60a3      	str	r3, [r4, #8]
 800ab9a:	6063      	str	r3, [r4, #4]
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	60e3      	str	r3, [r4, #12]
 800aba0:	6123      	str	r3, [r4, #16]
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	20000220 	.word	0x20000220

0800aba8 <GUI__GetAlphaBuffer>:
 800aba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abac:	4c29      	ldr	r4, [pc, #164]	; (800ac54 <GUI__GetAlphaBuffer+0xac>)
 800abae:	461d      	mov	r5, r3
 800abb0:	4606      	mov	r6, r0
 800abb2:	4688      	mov	r8, r1
 800abb4:	6923      	ldr	r3, [r4, #16]
 800abb6:	4617      	mov	r7, r2
 800abb8:	b93b      	cbnz	r3, 800abca <GUI__GetAlphaBuffer+0x22>
 800abba:	2301      	movs	r3, #1
 800abbc:	4620      	mov	r0, r4
 800abbe:	6123      	str	r3, [r4, #16]
 800abc0:	4b25      	ldr	r3, [pc, #148]	; (800ac58 <GUI__GetAlphaBuffer+0xb0>)
 800abc2:	f840 3f14 	str.w	r3, [r0, #20]!
 800abc6:	f7fa fd99 	bl	80056fc <GUI__RegisterExit>
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800ac54 <GUI__GetAlphaBuffer+0xac>
 800abd0:	b943      	cbnz	r3, 800abe4 <GUI__GetAlphaBuffer+0x3c>
 800abd2:	4b22      	ldr	r3, [pc, #136]	; (800ac5c <GUI__GetAlphaBuffer+0xb4>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f8c9 300c 	str.w	r3, [r9, #12]
 800abda:	b91b      	cbnz	r3, 800abe4 <GUI__GetAlphaBuffer+0x3c>
 800abdc:	f7fb fc66 	bl	80064ac <LCD_GetVXSizeMax>
 800abe0:	f8c9 000c 	str.w	r0, [r9, #12]
 800abe4:	b10d      	cbz	r5, 800abea <GUI__GetAlphaBuffer+0x42>
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	b17e      	cbz	r6, 800ac0c <GUI__GetAlphaBuffer+0x64>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	4d19      	ldr	r5, [pc, #100]	; (800ac54 <GUI__GetAlphaBuffer+0xac>)
 800abf0:	b943      	cbnz	r3, 800ac04 <GUI__GetAlphaBuffer+0x5c>
 800abf2:	68e8      	ldr	r0, [r5, #12]
 800abf4:	0080      	lsls	r0, r0, #2
 800abf6:	f7fa f93d 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 800abfa:	6028      	str	r0, [r5, #0]
 800abfc:	fab0 f580 	clz	r5, r0
 800ac00:	096d      	lsrs	r5, r5, #5
 800ac02:	e000      	b.n	800ac06 <GUI__GetAlphaBuffer+0x5e>
 800ac04:	2500      	movs	r5, #0
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	6033      	str	r3, [r6, #0]
 800ac0a:	e000      	b.n	800ac0e <GUI__GetAlphaBuffer+0x66>
 800ac0c:	4635      	mov	r5, r6
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	d00d      	beq.n	800ac30 <GUI__GetAlphaBuffer+0x88>
 800ac14:	6863      	ldr	r3, [r4, #4]
 800ac16:	4e0f      	ldr	r6, [pc, #60]	; (800ac54 <GUI__GetAlphaBuffer+0xac>)
 800ac18:	b93b      	cbnz	r3, 800ac2a <GUI__GetAlphaBuffer+0x82>
 800ac1a:	68f0      	ldr	r0, [r6, #12]
 800ac1c:	0080      	lsls	r0, r0, #2
 800ac1e:	f7fa f929 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	6070      	str	r0, [r6, #4]
 800ac26:	bf08      	it	eq
 800ac28:	2501      	moveq	r5, #1
 800ac2a:	6863      	ldr	r3, [r4, #4]
 800ac2c:	f8c8 3000 	str.w	r3, [r8]
 800ac30:	b167      	cbz	r7, 800ac4c <GUI__GetAlphaBuffer+0xa4>
 800ac32:	68a3      	ldr	r3, [r4, #8]
 800ac34:	4e07      	ldr	r6, [pc, #28]	; (800ac54 <GUI__GetAlphaBuffer+0xac>)
 800ac36:	b93b      	cbnz	r3, 800ac48 <GUI__GetAlphaBuffer+0xa0>
 800ac38:	68f0      	ldr	r0, [r6, #12]
 800ac3a:	0080      	lsls	r0, r0, #2
 800ac3c:	f7fa f91a 	bl	8004e74 <GUI_ALLOC_GetFixedBlock>
 800ac40:	2800      	cmp	r0, #0
 800ac42:	60b0      	str	r0, [r6, #8]
 800ac44:	bf08      	it	eq
 800ac46:	2501      	moveq	r5, #1
 800ac48:	68a3      	ldr	r3, [r4, #8]
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac52:	bf00      	nop
 800ac54:	20000220 	.word	0x20000220
 800ac58:	0800ab81 	.word	0x0800ab81
 800ac5c:	2001d9f0 	.word	0x2001d9f0

0800ac60 <GUI__DoAlphaBlending>:
 800ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac64:	b093      	sub	sp, #76	; 0x4c
 800ac66:	2400      	movs	r4, #0
 800ac68:	4692      	mov	sl, r2
 800ac6a:	461e      	mov	r6, r3
 800ac6c:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 800ac6e:	ab11      	add	r3, sp, #68	; 0x44
 800ac70:	900a      	str	r0, [sp, #40]	; 0x28
 800ac72:	4622      	mov	r2, r4
 800ac74:	910b      	str	r1, [sp, #44]	; 0x2c
 800ac76:	a80f      	add	r0, sp, #60	; 0x3c
 800ac78:	603c      	str	r4, [r7, #0]
 800ac7a:	a910      	add	r1, sp, #64	; 0x40
 800ac7c:	f7ff ff94 	bl	800aba8 <GUI__GetAlphaBuffer>
 800ac80:	4605      	mov	r5, r0
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f040 80c5 	bne.w	800ae12 <GUI__DoAlphaBlending+0x1b2>
 800ac88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac8a:	4c64      	ldr	r4, [pc, #400]	; (800ae1c <GUI__DoAlphaBlending+0x1bc>)
 800ac8c:	42b3      	cmp	r3, r6
 800ac8e:	bfa8      	it	ge
 800ac90:	4633      	movge	r3, r6
 800ac92:	9309      	str	r3, [sp, #36]	; 0x24
 800ac94:	6823      	ldr	r3, [r4, #0]
 800ac96:	7c58      	ldrb	r0, [r3, #17]
 800ac98:	4b61      	ldr	r3, [pc, #388]	; (800ae20 <GUI__DoAlphaBlending+0x1c0>)
 800ac9a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ac9e:	9306      	str	r3, [sp, #24]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	930c      	str	r3, [sp, #48]	; 0x30
 800aca4:	f7fb fbce 	bl	8006444 <GUI_GetBitsPerPixelEx>
 800aca8:	6823      	ldr	r3, [r4, #0]
 800acaa:	9007      	str	r0, [sp, #28]
 800acac:	7c58      	ldrb	r0, [r3, #17]
 800acae:	f7fb fbe7 	bl	8006480 <GUI_GetpfIndex2ColorEx>
 800acb2:	4b5c      	ldr	r3, [pc, #368]	; (800ae24 <GUI__DoAlphaBlending+0x1c4>)
 800acb4:	9003      	str	r0, [sp, #12]
 800acb6:	4298      	cmp	r0, r3
 800acb8:	d005      	beq.n	800acc6 <GUI__DoAlphaBlending+0x66>
 800acba:	4b5b      	ldr	r3, [pc, #364]	; (800ae28 <GUI__DoAlphaBlending+0x1c8>)
 800acbc:	1ac3      	subs	r3, r0, r3
 800acbe:	bf18      	it	ne
 800acc0:	2301      	movne	r3, #1
 800acc2:	9305      	str	r3, [sp, #20]
 800acc4:	e000      	b.n	800acc8 <GUI__DoAlphaBlending+0x68>
 800acc6:	9505      	str	r5, [sp, #20]
 800acc8:	2600      	movs	r6, #0
 800acca:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800acce:	4635      	mov	r5, r6
 800acd0:	4653      	mov	r3, sl
 800acd2:	f853 0b04 	ldr.w	r0, [r3], #4
 800acd6:	930d      	str	r3, [sp, #52]	; 0x34
 800acd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800acda:	4798      	blx	r3
 800acdc:	9004      	str	r0, [sp, #16]
 800acde:	0e03      	lsrs	r3, r0, #24
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	f000 8084 	beq.w	800adee <GUI__DoAlphaBlending+0x18e>
 800ace6:	2d00      	cmp	r5, #0
 800ace8:	d139      	bne.n	800ad5e <GUI__DoAlphaBlending+0xfe>
 800acea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acee:	eb03 0906 	add.w	r9, r3, r6
 800acf2:	4b4a      	ldr	r3, [pc, #296]	; (800ae1c <GUI__DoAlphaBlending+0x1bc>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800acfa:	454b      	cmp	r3, r9
 800acfc:	bfc4      	itt	gt
 800acfe:	ebc9 0503 	rsbgt	r5, r9, r3
 800ad02:	4699      	movgt	r9, r3
 800ad04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad06:	19ac      	adds	r4, r5, r6
 800ad08:	4648      	mov	r0, r9
 800ad0a:	eb03 0802 	add.w	r8, r3, r2
 800ad0e:	9b06      	ldr	r3, [sp, #24]
 800ad10:	00a4      	lsls	r4, r4, #2
 800ad12:	9301      	str	r3, [sp, #4]
 800ad14:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800ad18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad1a:	4423      	add	r3, r4
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad20:	4619      	mov	r1, r3
 800ad22:	f000 fc4f 	bl	800b5c4 <GUI_ReadRectEx>
 800ad26:	9b07      	ldr	r3, [sp, #28]
 800ad28:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ad2a:	2b17      	cmp	r3, #23
 800ad2c:	dc07      	bgt.n	800ad3e <GUI__DoAlphaBlending+0xde>
 800ad2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad30:	ebc5 010b 	rsb	r1, r5, fp
 800ad34:	9a07      	ldr	r2, [sp, #28]
 800ad36:	4420      	add	r0, r4
 800ad38:	f000 fa12 	bl	800b160 <GUI__ExpandPixelIndicesEx>
 800ad3c:	e001      	b.n	800ad42 <GUI__DoAlphaBlending+0xe2>
 800ad3e:	9b05      	ldr	r3, [sp, #20]
 800ad40:	b90b      	cbnz	r3, 800ad46 <GUI__DoAlphaBlending+0xe6>
 800ad42:	2501      	movs	r5, #1
 800ad44:	e00b      	b.n	800ad5e <GUI__DoAlphaBlending+0xfe>
 800ad46:	4404      	add	r4, r0
 800ad48:	ebc9 0808 	rsb	r8, r9, r8
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	9b03      	ldr	r3, [sp, #12]
 800ad50:	4798      	blx	r3
 800ad52:	f1b8 0801 	subs.w	r8, r8, #1
 800ad56:	f844 0b04 	str.w	r0, [r4], #4
 800ad5a:	d1f7      	bne.n	800ad4c <GUI__DoAlphaBlending+0xec>
 800ad5c:	e7f1      	b.n	800ad42 <GUI__DoAlphaBlending+0xe2>
 800ad5e:	4b33      	ldr	r3, [pc, #204]	; (800ae2c <GUI__DoAlphaBlending+0x1cc>)
 800ad60:	00b4      	lsls	r4, r6, #2
 800ad62:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800ad66:	f1b8 0f00 	cmp.w	r8, #0
 800ad6a:	d027      	beq.n	800adbc <GUI__DoAlphaBlending+0x15c>
 800ad6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ad6e:	465b      	mov	r3, fp
 800ad70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ad72:	4650      	mov	r0, sl
 800ad74:	192a      	adds	r2, r5, r4
 800ad76:	4421      	add	r1, r4
 800ad78:	9210      	str	r2, [sp, #64]	; 0x40
 800ad7a:	910f      	str	r1, [sp, #60]	; 0x3c
 800ad7c:	47c0      	blx	r8
 800ad7e:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ad80:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800ad82:	2300      	movs	r3, #0
 800ad84:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800ad88:	f000 427f 	and.w	r2, r0, #4278190080	; 0xff000000
 800ad8c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ad90:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
 800ad94:	d102      	bne.n	800ad9c <GUI__DoAlphaBlending+0x13c>
 800ad96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ad9a:	e006      	b.n	800adaa <GUI__DoAlphaBlending+0x14a>
 800ad9c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800ada0:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800ada4:	bf08      	it	eq
 800ada6:	f841 0023 	streq.w	r0, [r1, r3, lsl #2]
 800adaa:	3301      	adds	r3, #1
 800adac:	459b      	cmp	fp, r3
 800adae:	d1e9      	bne.n	800ad84 <GUI__DoAlphaBlending+0x124>
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	9510      	str	r5, [sp, #64]	; 0x40
 800adb4:	f043 0301 	orr.w	r3, r3, #1
 800adb8:	603b      	str	r3, [r7, #0]
 800adba:	e028      	b.n	800ae0e <GUI__DoAlphaBlending+0x1ae>
 800adbc:	9b08      	ldr	r3, [sp, #32]
 800adbe:	f89d 2020 	ldrb.w	r2, [sp, #32]
 800adc2:	2bff      	cmp	r3, #255	; 0xff
 800adc4:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800adc8:	d104      	bne.n	800add4 <GUI__DoAlphaBlending+0x174>
 800adca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adcc:	591b      	ldr	r3, [r3, r4]
 800adce:	f848 3004 	str.w	r3, [r8, r4]
 800add2:	e014      	b.n	800adfe <GUI__DoAlphaBlending+0x19e>
 800add4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800add6:	43d2      	mvns	r2, r2
 800add8:	5919      	ldr	r1, [r3, r4]
 800adda:	b2d2      	uxtb	r2, r2
 800addc:	9b04      	ldr	r3, [sp, #16]
 800adde:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800ade2:	4b13      	ldr	r3, [pc, #76]	; (800ae30 <GUI__DoAlphaBlending+0x1d0>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4798      	blx	r3
 800ade8:	f848 0004 	str.w	r0, [r8, r4]
 800adec:	e003      	b.n	800adf6 <GUI__DoAlphaBlending+0x196>
 800adee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adf0:	9a04      	ldr	r2, [sp, #16]
 800adf2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	f043 0301 	orr.w	r3, r3, #1
 800adfc:	603b      	str	r3, [r7, #0]
 800adfe:	f1bb 0b01 	subs.w	fp, fp, #1
 800ae02:	f106 0601 	add.w	r6, r6, #1
 800ae06:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800ae0a:	f47f af61 	bne.w	800acd0 <GUI__DoAlphaBlending+0x70>
 800ae0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ae10:	e000      	b.n	800ae14 <GUI__DoAlphaBlending+0x1b4>
 800ae12:	4620      	mov	r0, r4
 800ae14:	b013      	add	sp, #76	; 0x4c
 800ae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000014 	.word	0x20000014
 800ae20:	2001d9e8 	.word	0x2001d9e8
 800ae24:	0800bfc5 	.word	0x0800bfc5
 800ae28:	0800bfc7 	.word	0x0800bfc7
 800ae2c:	20000220 	.word	0x20000220
 800ae30:	2000003c 	.word	0x2000003c

0800ae34 <GUI__AllocAlphaBuffer>:
 800ae34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae36:	b908      	cbnz	r0, 800ae3c <GUI__AllocAlphaBuffer+0x8>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	e000      	b.n	800ae3e <GUI__AllocAlphaBuffer+0xa>
 800ae3c:	aa03      	add	r2, sp, #12
 800ae3e:	2300      	movs	r3, #0
 800ae40:	a902      	add	r1, sp, #8
 800ae42:	a801      	add	r0, sp, #4
 800ae44:	f7ff feb0 	bl	800aba8 <GUI__GetAlphaBuffer>
 800ae48:	b005      	add	sp, #20
 800ae4a:	f85d fb04 	ldr.w	pc, [sp], #4

0800ae4e <GUI__CompactPixelIndices>:
 800ae4e:	2a08      	cmp	r2, #8
 800ae50:	b510      	push	{r4, lr}
 800ae52:	dd0e      	ble.n	800ae72 <GUI__CompactPixelIndices+0x24>
 800ae54:	2a10      	cmp	r2, #16
 800ae56:	dc0a      	bgt.n	800ae6e <GUI__CompactPixelIndices+0x20>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800ae5e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae62:	f823 2b02 	strh.w	r2, [r3], #2
 800ae66:	428b      	cmp	r3, r1
 800ae68:	d1f9      	bne.n	800ae5e <GUI__CompactPixelIndices+0x10>
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	bd10      	pop	{r4, pc}
 800ae6e:	2000      	movs	r0, #0
 800ae70:	bd10      	pop	{r4, pc}
 800ae72:	2a02      	cmp	r2, #2
 800ae74:	d12a      	bne.n	800aecc <GUI__CompactPixelIndices+0x7e>
 800ae76:	4604      	mov	r4, r0
 800ae78:	6803      	ldr	r3, [r0, #0]
 800ae7a:	2901      	cmp	r1, #1
 800ae7c:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	d020      	beq.n	800aec6 <GUI__CompactPixelIndices+0x78>
 800ae84:	6842      	ldr	r2, [r0, #4]
 800ae86:	2902      	cmp	r1, #2
 800ae88:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800ae8c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800ae90:	ea43 0302 	orr.w	r3, r3, r2
 800ae94:	d101      	bne.n	800ae9a <GUI__CompactPixelIndices+0x4c>
 800ae96:	3008      	adds	r0, #8
 800ae98:	e016      	b.n	800aec8 <GUI__CompactPixelIndices+0x7a>
 800ae9a:	6882      	ldr	r2, [r0, #8]
 800ae9c:	2903      	cmp	r1, #3
 800ae9e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800aea2:	f002 020c 	and.w	r2, r2, #12
 800aea6:	ea43 0302 	orr.w	r3, r3, r2
 800aeaa:	d101      	bne.n	800aeb0 <GUI__CompactPixelIndices+0x62>
 800aeac:	300c      	adds	r0, #12
 800aeae:	e00b      	b.n	800aec8 <GUI__CompactPixelIndices+0x7a>
 800aeb0:	68c2      	ldr	r2, [r0, #12]
 800aeb2:	3904      	subs	r1, #4
 800aeb4:	3010      	adds	r0, #16
 800aeb6:	f002 0203 	and.w	r2, r2, #3
 800aeba:	4313      	orrs	r3, r2
 800aebc:	f804 3b01 	strb.w	r3, [r4], #1
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d1d9      	bne.n	800ae78 <GUI__CompactPixelIndices+0x2a>
 800aec4:	e7d1      	b.n	800ae6a <GUI__CompactPixelIndices+0x1c>
 800aec6:	3004      	adds	r0, #4
 800aec8:	2100      	movs	r1, #0
 800aeca:	e7f7      	b.n	800aebc <GUI__CompactPixelIndices+0x6e>
 800aecc:	2a04      	cmp	r2, #4
 800aece:	d115      	bne.n	800aefc <GUI__CompactPixelIndices+0xae>
 800aed0:	4604      	mov	r4, r0
 800aed2:	2901      	cmp	r1, #1
 800aed4:	6803      	ldr	r3, [r0, #0]
 800aed6:	bf18      	it	ne
 800aed8:	6842      	ldrne	r2, [r0, #4]
 800aeda:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800aede:	bf0c      	ite	eq
 800aee0:	2100      	moveq	r1, #0
 800aee2:	3902      	subne	r1, #2
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	bf17      	itett	ne
 800aee8:	f002 020f 	andne.w	r2, r2, #15
 800aeec:	3004      	addeq	r0, #4
 800aeee:	3008      	addne	r0, #8
 800aef0:	4313      	orrne	r3, r2
 800aef2:	f804 3b01 	strb.w	r3, [r4], #1
 800aef6:	2900      	cmp	r1, #0
 800aef8:	d1eb      	bne.n	800aed2 <GUI__CompactPixelIndices+0x84>
 800aefa:	e7b6      	b.n	800ae6a <GUI__CompactPixelIndices+0x1c>
 800aefc:	2a01      	cmp	r2, #1
 800aefe:	4603      	mov	r3, r0
 800af00:	d154      	bne.n	800afac <GUI__CompactPixelIndices+0x15e>
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	2901      	cmp	r1, #1
 800af06:	ea4f 12c2 	mov.w	r2, r2, lsl #7
 800af0a:	b2d2      	uxtb	r2, r2
 800af0c:	d04b      	beq.n	800afa6 <GUI__CompactPixelIndices+0x158>
 800af0e:	685c      	ldr	r4, [r3, #4]
 800af10:	2902      	cmp	r1, #2
 800af12:	ea4f 1484 	mov.w	r4, r4, lsl #6
 800af16:	f004 0440 	and.w	r4, r4, #64	; 0x40
 800af1a:	ea42 0204 	orr.w	r2, r2, r4
 800af1e:	d101      	bne.n	800af24 <GUI__CompactPixelIndices+0xd6>
 800af20:	3308      	adds	r3, #8
 800af22:	e041      	b.n	800afa8 <GUI__CompactPixelIndices+0x15a>
 800af24:	689c      	ldr	r4, [r3, #8]
 800af26:	2903      	cmp	r1, #3
 800af28:	ea4f 1444 	mov.w	r4, r4, lsl #5
 800af2c:	f004 0420 	and.w	r4, r4, #32
 800af30:	ea42 0204 	orr.w	r2, r2, r4
 800af34:	d101      	bne.n	800af3a <GUI__CompactPixelIndices+0xec>
 800af36:	330c      	adds	r3, #12
 800af38:	e036      	b.n	800afa8 <GUI__CompactPixelIndices+0x15a>
 800af3a:	68dc      	ldr	r4, [r3, #12]
 800af3c:	2904      	cmp	r1, #4
 800af3e:	ea4f 1404 	mov.w	r4, r4, lsl #4
 800af42:	f004 0410 	and.w	r4, r4, #16
 800af46:	ea42 0204 	orr.w	r2, r2, r4
 800af4a:	d101      	bne.n	800af50 <GUI__CompactPixelIndices+0x102>
 800af4c:	3310      	adds	r3, #16
 800af4e:	e02b      	b.n	800afa8 <GUI__CompactPixelIndices+0x15a>
 800af50:	691c      	ldr	r4, [r3, #16]
 800af52:	2905      	cmp	r1, #5
 800af54:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800af58:	f004 0408 	and.w	r4, r4, #8
 800af5c:	ea42 0204 	orr.w	r2, r2, r4
 800af60:	d101      	bne.n	800af66 <GUI__CompactPixelIndices+0x118>
 800af62:	3314      	adds	r3, #20
 800af64:	e020      	b.n	800afa8 <GUI__CompactPixelIndices+0x15a>
 800af66:	695c      	ldr	r4, [r3, #20]
 800af68:	2906      	cmp	r1, #6
 800af6a:	ea4f 0484 	mov.w	r4, r4, lsl #2
 800af6e:	f004 0404 	and.w	r4, r4, #4
 800af72:	ea42 0204 	orr.w	r2, r2, r4
 800af76:	d101      	bne.n	800af7c <GUI__CompactPixelIndices+0x12e>
 800af78:	3318      	adds	r3, #24
 800af7a:	e015      	b.n	800afa8 <GUI__CompactPixelIndices+0x15a>
 800af7c:	699c      	ldr	r4, [r3, #24]
 800af7e:	3907      	subs	r1, #7
 800af80:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800af84:	bf08      	it	eq
 800af86:	331c      	addeq	r3, #28
 800af88:	f004 0402 	and.w	r4, r4, #2
 800af8c:	ea42 0204 	orr.w	r2, r2, r4
 800af90:	bf1f      	itttt	ne
 800af92:	69dc      	ldrne	r4, [r3, #28]
 800af94:	3320      	addne	r3, #32
 800af96:	f004 0401 	andne.w	r4, r4, #1
 800af9a:	4322      	orrne	r2, r4
 800af9c:	f800 2b01 	strb.w	r2, [r0], #1
 800afa0:	2900      	cmp	r1, #0
 800afa2:	d1ae      	bne.n	800af02 <GUI__CompactPixelIndices+0xb4>
 800afa4:	e761      	b.n	800ae6a <GUI__CompactPixelIndices+0x1c>
 800afa6:	3304      	adds	r3, #4
 800afa8:	2100      	movs	r1, #0
 800afaa:	e7f7      	b.n	800af9c <GUI__CompactPixelIndices+0x14e>
 800afac:	4401      	add	r1, r0
 800afae:	f850 2b04 	ldr.w	r2, [r0], #4
 800afb2:	f803 2b01 	strb.w	r2, [r3], #1
 800afb6:	4299      	cmp	r1, r3
 800afb8:	d1f9      	bne.n	800afae <GUI__CompactPixelIndices+0x160>
 800afba:	e756      	b.n	800ae6a <GUI__CompactPixelIndices+0x1c>

0800afbc <GUI__ConvertColor2Index>:
 800afbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	9f08      	ldr	r7, [sp, #32]
 800afc2:	4604      	mov	r4, r0
 800afc4:	460d      	mov	r5, r1
 800afc6:	f8d3 8000 	ldr.w	r8, [r3]
 800afca:	2f00      	cmp	r7, #0
 800afcc:	bf08      	it	eq
 800afce:	4607      	moveq	r7, r0
 800afd0:	2a08      	cmp	r2, #8
 800afd2:	dd05      	ble.n	800afe0 <GUI__ConvertColor2Index+0x24>
 800afd4:	2a10      	cmp	r2, #16
 800afd6:	f340 80ad 	ble.w	800b134 <GUI__ConvertColor2Index+0x178>
 800afda:	2000      	movs	r0, #0
 800afdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe0:	3a01      	subs	r2, #1
 800afe2:	2a07      	cmp	r2, #7
 800afe4:	f200 809d 	bhi.w	800b122 <GUI__ConvertColor2Index+0x166>
 800afe8:	e8df f002 	tbb	[pc, r2]
 800afec:	7f9b5b11 	.word	0x7f9b5b11
 800aff0:	899b9b9b 	.word	0x899b9b9b
 800aff4:	69e0      	ldr	r0, [r4, #28]
 800aff6:	f104 0920 	add.w	r9, r4, #32
 800affa:	47c0      	blx	r8
 800affc:	4330      	orrs	r0, r6
 800affe:	3d08      	subs	r5, #8
 800b000:	464c      	mov	r4, r9
 800b002:	b2c6      	uxtb	r6, r0
 800b004:	f807 6b01 	strb.w	r6, [r7], #1
 800b008:	2d00      	cmp	r5, #0
 800b00a:	f000 808a 	beq.w	800b122 <GUI__ConvertColor2Index+0x166>
 800b00e:	6820      	ldr	r0, [r4, #0]
 800b010:	47c0      	blx	r8
 800b012:	2d01      	cmp	r5, #1
 800b014:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800b018:	b2c6      	uxtb	r6, r0
 800b01a:	f000 8085 	beq.w	800b128 <GUI__ConvertColor2Index+0x16c>
 800b01e:	6860      	ldr	r0, [r4, #4]
 800b020:	47c0      	blx	r8
 800b022:	2d02      	cmp	r5, #2
 800b024:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 800b028:	b2c6      	uxtb	r6, r0
 800b02a:	d101      	bne.n	800b030 <GUI__ConvertColor2Index+0x74>
 800b02c:	3408      	adds	r4, #8
 800b02e:	e07c      	b.n	800b12a <GUI__ConvertColor2Index+0x16e>
 800b030:	68a0      	ldr	r0, [r4, #8]
 800b032:	47c0      	blx	r8
 800b034:	2d03      	cmp	r5, #3
 800b036:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 800b03a:	b2c6      	uxtb	r6, r0
 800b03c:	d101      	bne.n	800b042 <GUI__ConvertColor2Index+0x86>
 800b03e:	340c      	adds	r4, #12
 800b040:	e073      	b.n	800b12a <GUI__ConvertColor2Index+0x16e>
 800b042:	68e0      	ldr	r0, [r4, #12]
 800b044:	47c0      	blx	r8
 800b046:	2d04      	cmp	r5, #4
 800b048:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 800b04c:	b2c6      	uxtb	r6, r0
 800b04e:	d101      	bne.n	800b054 <GUI__ConvertColor2Index+0x98>
 800b050:	3410      	adds	r4, #16
 800b052:	e06a      	b.n	800b12a <GUI__ConvertColor2Index+0x16e>
 800b054:	6920      	ldr	r0, [r4, #16]
 800b056:	47c0      	blx	r8
 800b058:	2d05      	cmp	r5, #5
 800b05a:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 800b05e:	b2c6      	uxtb	r6, r0
 800b060:	d101      	bne.n	800b066 <GUI__ConvertColor2Index+0xaa>
 800b062:	3414      	adds	r4, #20
 800b064:	e061      	b.n	800b12a <GUI__ConvertColor2Index+0x16e>
 800b066:	6960      	ldr	r0, [r4, #20]
 800b068:	47c0      	blx	r8
 800b06a:	2d06      	cmp	r5, #6
 800b06c:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 800b070:	b2c6      	uxtb	r6, r0
 800b072:	d101      	bne.n	800b078 <GUI__ConvertColor2Index+0xbc>
 800b074:	3418      	adds	r4, #24
 800b076:	e058      	b.n	800b12a <GUI__ConvertColor2Index+0x16e>
 800b078:	69a0      	ldr	r0, [r4, #24]
 800b07a:	47c0      	blx	r8
 800b07c:	2d07      	cmp	r5, #7
 800b07e:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 800b082:	b2c6      	uxtb	r6, r0
 800b084:	d1b6      	bne.n	800aff4 <GUI__ConvertColor2Index+0x38>
 800b086:	341c      	adds	r4, #28
 800b088:	e04f      	b.n	800b12a <GUI__ConvertColor2Index+0x16e>
 800b08a:	68e0      	ldr	r0, [r4, #12]
 800b08c:	f104 0910 	add.w	r9, r4, #16
 800b090:	47c0      	blx	r8
 800b092:	4330      	orrs	r0, r6
 800b094:	3d04      	subs	r5, #4
 800b096:	464c      	mov	r4, r9
 800b098:	b2c6      	uxtb	r6, r0
 800b09a:	f807 6b01 	strb.w	r6, [r7], #1
 800b09e:	2d00      	cmp	r5, #0
 800b0a0:	d03f      	beq.n	800b122 <GUI__ConvertColor2Index+0x166>
 800b0a2:	6820      	ldr	r0, [r4, #0]
 800b0a4:	47c0      	blx	r8
 800b0a6:	2d01      	cmp	r5, #1
 800b0a8:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800b0ac:	b2c6      	uxtb	r6, r0
 800b0ae:	d03e      	beq.n	800b12e <GUI__ConvertColor2Index+0x172>
 800b0b0:	6860      	ldr	r0, [r4, #4]
 800b0b2:	47c0      	blx	r8
 800b0b4:	2d02      	cmp	r5, #2
 800b0b6:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 800b0ba:	b2c6      	uxtb	r6, r0
 800b0bc:	d101      	bne.n	800b0c2 <GUI__ConvertColor2Index+0x106>
 800b0be:	3408      	adds	r4, #8
 800b0c0:	e036      	b.n	800b130 <GUI__ConvertColor2Index+0x174>
 800b0c2:	68a0      	ldr	r0, [r4, #8]
 800b0c4:	47c0      	blx	r8
 800b0c6:	2d03      	cmp	r5, #3
 800b0c8:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 800b0cc:	b2c6      	uxtb	r6, r0
 800b0ce:	d1dc      	bne.n	800b08a <GUI__ConvertColor2Index+0xce>
 800b0d0:	340c      	adds	r4, #12
 800b0d2:	e02d      	b.n	800b130 <GUI__ConvertColor2Index+0x174>
 800b0d4:	6860      	ldr	r0, [r4, #4]
 800b0d6:	f104 0908 	add.w	r9, r4, #8
 800b0da:	47c0      	blx	r8
 800b0dc:	4330      	orrs	r0, r6
 800b0de:	3d02      	subs	r5, #2
 800b0e0:	464c      	mov	r4, r9
 800b0e2:	b2c6      	uxtb	r6, r0
 800b0e4:	f807 6b01 	strb.w	r6, [r7], #1
 800b0e8:	b1dd      	cbz	r5, 800b122 <GUI__ConvertColor2Index+0x166>
 800b0ea:	6820      	ldr	r0, [r4, #0]
 800b0ec:	47c0      	blx	r8
 800b0ee:	2d01      	cmp	r5, #1
 800b0f0:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800b0f4:	b2c6      	uxtb	r6, r0
 800b0f6:	d1ed      	bne.n	800b0d4 <GUI__ConvertColor2Index+0x118>
 800b0f8:	3404      	adds	r4, #4
 800b0fa:	2500      	movs	r5, #0
 800b0fc:	e7f2      	b.n	800b0e4 <GUI__ConvertColor2Index+0x128>
 800b0fe:	691e      	ldr	r6, [r3, #16]
 800b100:	b12e      	cbz	r6, 800b10e <GUI__ConvertColor2Index+0x152>
 800b102:	2301      	movs	r3, #1
 800b104:	462a      	mov	r2, r5
 800b106:	4639      	mov	r1, r7
 800b108:	4620      	mov	r0, r4
 800b10a:	47b0      	blx	r6
 800b10c:	e009      	b.n	800b122 <GUI__ConvertColor2Index+0x166>
 800b10e:	1e7e      	subs	r6, r7, #1
 800b110:	f854 0b04 	ldr.w	r0, [r4], #4
 800b114:	47c0      	blx	r8
 800b116:	f806 0f01 	strb.w	r0, [r6, #1]!
 800b11a:	43f3      	mvns	r3, r6
 800b11c:	442b      	add	r3, r5
 800b11e:	42df      	cmn	r7, r3
 800b120:	d1f6      	bne.n	800b110 <GUI__ConvertColor2Index+0x154>
 800b122:	2001      	movs	r0, #1
 800b124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b128:	3404      	adds	r4, #4
 800b12a:	2500      	movs	r5, #0
 800b12c:	e76a      	b.n	800b004 <GUI__ConvertColor2Index+0x48>
 800b12e:	3404      	adds	r4, #4
 800b130:	2500      	movs	r5, #0
 800b132:	e7b2      	b.n	800b09a <GUI__ConvertColor2Index+0xde>
 800b134:	691e      	ldr	r6, [r3, #16]
 800b136:	b11e      	cbz	r6, 800b140 <GUI__ConvertColor2Index+0x184>
 800b138:	2302      	movs	r3, #2
 800b13a:	462a      	mov	r2, r5
 800b13c:	4639      	mov	r1, r7
 800b13e:	e7e4      	b.n	800b10a <GUI__ConvertColor2Index+0x14e>
 800b140:	3f02      	subs	r7, #2
 800b142:	f854 0b04 	ldr.w	r0, [r4], #4
 800b146:	47c0      	blx	r8
 800b148:	3d01      	subs	r5, #1
 800b14a:	f827 0f02 	strh.w	r0, [r7, #2]!
 800b14e:	d1f8      	bne.n	800b142 <GUI__ConvertColor2Index+0x186>
 800b150:	e7e7      	b.n	800b122 <GUI__ConvertColor2Index+0x166>

0800b152 <GUI__CompactPixelIndicesEx>:
 800b152:	b513      	push	{r0, r1, r4, lr}
 800b154:	2400      	movs	r4, #0
 800b156:	9400      	str	r4, [sp, #0]
 800b158:	f7ff ff30 	bl	800afbc <GUI__ConvertColor2Index>
 800b15c:	b002      	add	sp, #8
 800b15e:	bd10      	pop	{r4, pc}

0800b160 <GUI__ExpandPixelIndicesEx>:
 800b160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b164:	1e0c      	subs	r4, r1, #0
 800b166:	4605      	mov	r5, r0
 800b168:	f340 80b6 	ble.w	800b2d8 <GUI__ExpandPixelIndicesEx+0x178>
 800b16c:	2a08      	cmp	r2, #8
 800b16e:	685e      	ldr	r6, [r3, #4]
 800b170:	dd04      	ble.n	800b17c <GUI__ExpandPixelIndicesEx+0x1c>
 800b172:	2a10      	cmp	r2, #16
 800b174:	f340 809a 	ble.w	800b2ac <GUI__ExpandPixelIndicesEx+0x14c>
 800b178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b17c:	3a01      	subs	r2, #1
 800b17e:	2a07      	cmp	r2, #7
 800b180:	f200 80aa 	bhi.w	800b2d8 <GUI__ExpandPixelIndicesEx+0x178>
 800b184:	e8df f002 	tbb	[pc, r2]
 800b188:	59a82d04 	.word	0x59a82d04
 800b18c:	85a8a8a8 	.word	0x85a8a8a8
 800b190:	1e67      	subs	r7, r4, #1
 800b192:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800b196:	10fb      	asrs	r3, r7, #3
 800b198:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b19c:	f007 0707 	and.w	r7, r7, #7
 800b1a0:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800b1a4:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800b1a8:	f815 a003 	ldrb.w	sl, [r5, r3]
 800b1ac:	44a9      	add	r9, r5
 800b1ae:	2580      	movs	r5, #128	; 0x80
 800b1b0:	413d      	asrs	r5, r7
 800b1b2:	b2ed      	uxtb	r5, r5
 800b1b4:	f1c7 0307 	rsb	r3, r7, #7
 800b1b8:	ea05 000a 	and.w	r0, r5, sl
 800b1bc:	4118      	asrs	r0, r3
 800b1be:	47b0      	blx	r6
 800b1c0:	f848 0904 	str.w	r0, [r8], #-4
 800b1c4:	b937      	cbnz	r7, 800b1d4 <GUI__ExpandPixelIndicesEx+0x74>
 800b1c6:	f899 a000 	ldrb.w	sl, [r9]
 800b1ca:	2501      	movs	r5, #1
 800b1cc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b1d0:	2707      	movs	r7, #7
 800b1d2:	e002      	b.n	800b1da <GUI__ExpandPixelIndicesEx+0x7a>
 800b1d4:	006d      	lsls	r5, r5, #1
 800b1d6:	3f01      	subs	r7, #1
 800b1d8:	b2ed      	uxtb	r5, r5
 800b1da:	3c01      	subs	r4, #1
 800b1dc:	d1ea      	bne.n	800b1b4 <GUI__ExpandPixelIndicesEx+0x54>
 800b1de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e2:	1e67      	subs	r7, r4, #1
 800b1e4:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800b1e8:	10bb      	asrs	r3, r7, #2
 800b1ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b1ee:	f007 0703 	and.w	r7, r7, #3
 800b1f2:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800b1f6:	f815 a003 	ldrb.w	sl, [r5, r3]
 800b1fa:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800b1fe:	23c0      	movs	r3, #192	; 0xc0
 800b200:	44a9      	add	r9, r5
 800b202:	007d      	lsls	r5, r7, #1
 800b204:	fa43 f505 	asr.w	r5, r3, r5
 800b208:	b2ed      	uxtb	r5, r5
 800b20a:	007b      	lsls	r3, r7, #1
 800b20c:	ea05 000a 	and.w	r0, r5, sl
 800b210:	f1c3 0306 	rsb	r3, r3, #6
 800b214:	4118      	asrs	r0, r3
 800b216:	47b0      	blx	r6
 800b218:	f848 0904 	str.w	r0, [r8], #-4
 800b21c:	b937      	cbnz	r7, 800b22c <GUI__ExpandPixelIndicesEx+0xcc>
 800b21e:	2503      	movs	r5, #3
 800b220:	f899 a000 	ldrb.w	sl, [r9]
 800b224:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b228:	462f      	mov	r7, r5
 800b22a:	e002      	b.n	800b232 <GUI__ExpandPixelIndicesEx+0xd2>
 800b22c:	00ad      	lsls	r5, r5, #2
 800b22e:	3f01      	subs	r7, #1
 800b230:	b2ed      	uxtb	r5, r5
 800b232:	3c01      	subs	r4, #1
 800b234:	d1e9      	bne.n	800b20a <GUI__ExpandPixelIndicesEx+0xaa>
 800b236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b23a:	1e67      	subs	r7, r4, #1
 800b23c:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800b240:	107b      	asrs	r3, r7, #1
 800b242:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b246:	f007 0701 	and.w	r7, r7, #1
 800b24a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800b24e:	f815 a003 	ldrb.w	sl, [r5, r3]
 800b252:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800b256:	23f0      	movs	r3, #240	; 0xf0
 800b258:	44a9      	add	r9, r5
 800b25a:	00bd      	lsls	r5, r7, #2
 800b25c:	fa43 f505 	asr.w	r5, r3, r5
 800b260:	b2ed      	uxtb	r5, r5
 800b262:	00bb      	lsls	r3, r7, #2
 800b264:	ea05 000a 	and.w	r0, r5, sl
 800b268:	f1c3 0304 	rsb	r3, r3, #4
 800b26c:	4118      	asrs	r0, r3
 800b26e:	47b0      	blx	r6
 800b270:	f848 0904 	str.w	r0, [r8], #-4
 800b274:	b937      	cbnz	r7, 800b284 <GUI__ExpandPixelIndicesEx+0x124>
 800b276:	f899 a000 	ldrb.w	sl, [r9]
 800b27a:	250f      	movs	r5, #15
 800b27c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b280:	2701      	movs	r7, #1
 800b282:	e002      	b.n	800b28a <GUI__ExpandPixelIndicesEx+0x12a>
 800b284:	012d      	lsls	r5, r5, #4
 800b286:	2700      	movs	r7, #0
 800b288:	b2ed      	uxtb	r5, r5
 800b28a:	3c01      	subs	r4, #1
 800b28c:	d1e9      	bne.n	800b262 <GUI__ExpandPixelIndicesEx+0x102>
 800b28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b292:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800b296:	4425      	add	r5, r4
 800b298:	1b64      	subs	r4, r4, r5
 800b29a:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 800b29e:	47b0      	blx	r6
 800b2a0:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b2a4:	42e5      	cmn	r5, r4
 800b2a6:	d1f8      	bne.n	800b29a <GUI__ExpandPixelIndicesEx+0x13a>
 800b2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ac:	695f      	ldr	r7, [r3, #20]
 800b2ae:	b137      	cbz	r7, 800b2be <GUI__ExpandPixelIndicesEx+0x15e>
 800b2b0:	4622      	mov	r2, r4
 800b2b2:	4629      	mov	r1, r5
 800b2b4:	46bc      	mov	ip, r7
 800b2b6:	2302      	movs	r3, #2
 800b2b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2bc:	4760      	bx	ip
 800b2be:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800b2c2:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800b2c6:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 800b2ca:	47b0      	blx	r6
 800b2cc:	3c01      	subs	r4, #1
 800b2ce:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b2d2:	d1f8      	bne.n	800b2c6 <GUI__ExpandPixelIndicesEx+0x166>
 800b2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b2dc <GUI__ManageCacheEx>:
 800b2dc:	2801      	cmp	r0, #1
 800b2de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	460c      	mov	r4, r1
 800b2e4:	dc62      	bgt.n	800b3ac <GUI__ManageCacheEx+0xd0>
 800b2e6:	4d33      	ldr	r5, [pc, #204]	; (800b3b4 <GUI__ManageCacheEx+0xd8>)
 800b2e8:	686b      	ldr	r3, [r5, #4]
 800b2ea:	b103      	cbz	r3, 800b2ee <GUI__ManageCacheEx+0x12>
 800b2ec:	4798      	blx	r3
 800b2ee:	2c01      	cmp	r4, #1
 800b2f0:	d004      	beq.n	800b2fc <GUI__ManageCacheEx+0x20>
 800b2f2:	2c02      	cmp	r4, #2
 800b2f4:	d020      	beq.n	800b338 <GUI__ManageCacheEx+0x5c>
 800b2f6:	2c00      	cmp	r4, #0
 800b2f8:	d158      	bne.n	800b3ac <GUI__ManageCacheEx+0xd0>
 800b2fa:	e033      	b.n	800b364 <GUI__ManageCacheEx+0x88>
 800b2fc:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 800b300:	68af      	ldr	r7, [r5, #8]
 800b302:	b9af      	cbnz	r7, 800b330 <GUI__ManageCacheEx+0x54>
 800b304:	4630      	mov	r0, r6
 800b306:	f7fa fa0d 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800b30a:	9001      	str	r0, [sp, #4]
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d04d      	beq.n	800b3ac <GUI__ManageCacheEx+0xd0>
 800b310:	68c3      	ldr	r3, [r0, #12]
 800b312:	210d      	movs	r1, #13
 800b314:	a801      	add	r0, sp, #4
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	4798      	blx	r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d045      	beq.n	800b3ac <GUI__ManageCacheEx+0xd0>
 800b320:	4621      	mov	r1, r4
 800b322:	9801      	ldr	r0, [sp, #4]
 800b324:	4798      	blx	r3
 800b326:	68ab      	ldr	r3, [r5, #8]
 800b328:	4638      	mov	r0, r7
 800b32a:	3301      	adds	r3, #1
 800b32c:	60ab      	str	r3, [r5, #8]
 800b32e:	e03e      	b.n	800b3ae <GUI__ManageCacheEx+0xd2>
 800b330:	1c78      	adds	r0, r7, #1
 800b332:	60a8      	str	r0, [r5, #8]
 800b334:	4620      	mov	r0, r4
 800b336:	e03a      	b.n	800b3ae <GUI__ManageCacheEx+0xd2>
 800b338:	4630      	mov	r0, r6
 800b33a:	f7fa f9f3 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800b33e:	9001      	str	r0, [sp, #4]
 800b340:	2800      	cmp	r0, #0
 800b342:	d033      	beq.n	800b3ac <GUI__ManageCacheEx+0xd0>
 800b344:	68c3      	ldr	r3, [r0, #12]
 800b346:	210d      	movs	r1, #13
 800b348:	a801      	add	r0, sp, #4
 800b34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34c:	4798      	blx	r3
 800b34e:	4604      	mov	r4, r0
 800b350:	2800      	cmp	r0, #0
 800b352:	d02b      	beq.n	800b3ac <GUI__ManageCacheEx+0xd0>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <GUI__ManageCacheEx+0x7e>
 800b358:	4798      	blx	r3
 800b35a:	2102      	movs	r1, #2
 800b35c:	9801      	ldr	r0, [sp, #4]
 800b35e:	47a0      	blx	r4
 800b360:	2000      	movs	r0, #0
 800b362:	e024      	b.n	800b3ae <GUI__ManageCacheEx+0xd2>
 800b364:	00b4      	lsls	r4, r6, #2
 800b366:	192b      	adds	r3, r5, r4
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d001      	beq.n	800b372 <GUI__ManageCacheEx+0x96>
 800b36e:	2001      	movs	r0, #1
 800b370:	e015      	b.n	800b39e <GUI__ManageCacheEx+0xc2>
 800b372:	4630      	mov	r0, r6
 800b374:	f7fa f9d6 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800b378:	9001      	str	r0, [sp, #4]
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0f7      	beq.n	800b36e <GUI__ManageCacheEx+0x92>
 800b37e:	68c3      	ldr	r3, [r0, #12]
 800b380:	210d      	movs	r1, #13
 800b382:	a801      	add	r0, sp, #4
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	4798      	blx	r3
 800b388:	4606      	mov	r6, r0
 800b38a:	2800      	cmp	r0, #0
 800b38c:	d0ef      	beq.n	800b36e <GUI__ManageCacheEx+0x92>
 800b38e:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <GUI__ManageCacheEx+0xd8>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	b103      	cbz	r3, 800b396 <GUI__ManageCacheEx+0xba>
 800b394:	4798      	blx	r3
 800b396:	2100      	movs	r1, #0
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	47b0      	blx	r6
 800b39c:	2000      	movs	r0, #0
 800b39e:	4425      	add	r5, r4
 800b3a0:	68ab      	ldr	r3, [r5, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	bf18      	it	ne
 800b3a6:	3b01      	subne	r3, #1
 800b3a8:	60ab      	str	r3, [r5, #8]
 800b3aa:	e000      	b.n	800b3ae <GUI__ManageCacheEx+0xd2>
 800b3ac:	2001      	movs	r0, #1
 800b3ae:	b003      	add	sp, #12
 800b3b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20000240 	.word	0x20000240

0800b3b8 <GUI__ManageCache>:
 800b3b8:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <GUI__ManageCache+0xc>)
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	7c58      	ldrb	r0, [r3, #17]
 800b3c0:	f7ff bf8c 	b.w	800b2dc <GUI__ManageCacheEx>
 800b3c4:	20000014 	.word	0x20000014

0800b3c8 <LCD_AA_MixColors16>:
 800b3c8:	0e0b      	lsrs	r3, r1, #24
 800b3ca:	2bff      	cmp	r3, #255	; 0xff
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	4c0e      	ldr	r4, [pc, #56]	; (800b408 <LCD_AA_MixColors16+0x40>)
 800b3d0:	d110      	bne.n	800b3f4 <LCD_AA_MixColors16+0x2c>
 800b3d2:	0e03      	lsrs	r3, r0, #24
 800b3d4:	d108      	bne.n	800b3e8 <LCD_AA_MixColors16+0x20>
 800b3d6:	f06f 0310 	mvn.w	r3, #16
 800b3da:	435a      	muls	r2, r3
 800b3dc:	6963      	ldr	r3, [r4, #20]
 800b3de:	32ff      	adds	r2, #255	; 0xff
 800b3e0:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800b3e4:	4018      	ands	r0, r3
 800b3e6:	bd10      	pop	{r4, pc}
 800b3e8:	2bff      	cmp	r3, #255	; 0xff
 800b3ea:	d103      	bne.n	800b3f4 <LCD_AA_MixColors16+0x2c>
 800b3ec:	6963      	ldr	r3, [r4, #20]
 800b3ee:	ea01 0003 	and.w	r0, r1, r3
 800b3f2:	bd10      	pop	{r4, pc}
 800b3f4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800b3f8:	4b04      	ldr	r3, [pc, #16]	; (800b40c <LCD_AA_MixColors16+0x44>)
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4798      	blx	r3
 800b400:	6961      	ldr	r1, [r4, #20]
 800b402:	4008      	ands	r0, r1
 800b404:	bd10      	pop	{r4, pc}
 800b406:	bf00      	nop
 800b408:	20000044 	.word	0x20000044
 800b40c:	2000003c 	.word	0x2000003c

0800b410 <LCD_AA_SetAndMask>:
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <LCD_AA_SetAndMask+0xc>)
 800b412:	695a      	ldr	r2, [r3, #20]
 800b414:	6158      	str	r0, [r3, #20]
 800b416:	4610      	mov	r0, r2
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	20000044 	.word	0x20000044

0800b420 <LCD_ReadRectEx>:
 800b420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b424:	b087      	sub	sp, #28
 800b426:	4690      	mov	r8, r2
 800b428:	4607      	mov	r7, r0
 800b42a:	460e      	mov	r6, r1
 800b42c:	9303      	str	r3, [sp, #12]
 800b42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b430:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b432:	68da      	ldr	r2, [r3, #12]
 800b434:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800b436:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800b43a:	b96b      	cbnz	r3, 800b458 <LCD_ReadRectEx+0x38>
 800b43c:	4b60      	ldr	r3, [pc, #384]	; (800b5c0 <LCD_ReadRectEx+0x1a0>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	7c58      	ldrb	r0, [r3, #17]
 800b442:	f7fa ffff 	bl	8006444 <GUI_GetBitsPerPixelEx>
 800b446:	2808      	cmp	r0, #8
 800b448:	dd15      	ble.n	800b476 <LCD_ReadRectEx+0x56>
 800b44a:	2811      	cmp	r0, #17
 800b44c:	bfb4      	ite	lt
 800b44e:	f04f 0a02 	movlt.w	sl, #2
 800b452:	f04f 0a04 	movge.w	sl, #4
 800b456:	e010      	b.n	800b47a <LCD_ReadRectEx+0x5a>
 800b458:	2101      	movs	r1, #1
 800b45a:	a811      	add	r0, sp, #68	; 0x44
 800b45c:	4798      	blx	r3
 800b45e:	4605      	mov	r5, r0
 800b460:	2800      	cmp	r0, #0
 800b462:	d0eb      	beq.n	800b43c <LCD_ReadRectEx+0x1c>
 800b464:	9b03      	ldr	r3, [sp, #12]
 800b466:	4632      	mov	r2, r6
 800b468:	9401      	str	r4, [sp, #4]
 800b46a:	4639      	mov	r1, r7
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	4643      	mov	r3, r8
 800b470:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b472:	47a8      	blx	r5
 800b474:	e0a0      	b.n	800b5b8 <LCD_ReadRectEx+0x198>
 800b476:	f04f 0a01 	mov.w	sl, #1
 800b47a:	1e43      	subs	r3, r0, #1
 800b47c:	2500      	movs	r5, #0
 800b47e:	9304      	str	r3, [sp, #16]
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	429e      	cmp	r6, r3
 800b484:	f300 8098 	bgt.w	800b5b8 <LCD_ReadRectEx+0x198>
 800b488:	f1ba 0f02 	cmp.w	sl, #2
 800b48c:	d009      	beq.n	800b4a2 <LCD_ReadRectEx+0x82>
 800b48e:	f1ba 0f04 	cmp.w	sl, #4
 800b492:	d004      	beq.n	800b49e <LCD_ReadRectEx+0x7e>
 800b494:	f1ba 0f01 	cmp.w	sl, #1
 800b498:	f040 808c 	bne.w	800b5b4 <LCD_ReadRectEx+0x194>
 800b49c:	e003      	b.n	800b4a6 <LCD_ReadRectEx+0x86>
 800b49e:	46bb      	mov	fp, r7
 800b4a0:	e07d      	b.n	800b59e <LCD_ReadRectEx+0x17e>
 800b4a2:	46bb      	mov	fp, r7
 800b4a4:	e070      	b.n	800b588 <LCD_ReadRectEx+0x168>
 800b4a6:	9b04      	ldr	r3, [sp, #16]
 800b4a8:	2b07      	cmp	r3, #7
 800b4aa:	f200 8083 	bhi.w	800b5b4 <LCD_ReadRectEx+0x194>
 800b4ae:	e8df f003 	tbb	[pc, r3]
 800b4b2:	0a0e      	.short	0x0a0e
 800b4b4:	04040707 	.word	0x04040707
 800b4b8:	0404      	.short	0x0404
 800b4ba:	ebc4 0b07 	rsb	fp, r4, r7
 800b4be:	e059      	b.n	800b574 <LCD_ReadRectEx+0x154>
 800b4c0:	46bb      	mov	fp, r7
 800b4c2:	230f      	movs	r3, #15
 800b4c4:	e03b      	b.n	800b53e <LCD_ReadRectEx+0x11e>
 800b4c6:	46bb      	mov	fp, r7
 800b4c8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800b4cc:	e019      	b.n	800b502 <LCD_ReadRectEx+0xe2>
 800b4ce:	46bb      	mov	fp, r7
 800b4d0:	45c3      	cmp	fp, r8
 800b4d2:	dc6f      	bgt.n	800b5b4 <LCD_ReadRectEx+0x194>
 800b4d4:	4632      	mov	r2, r6
 800b4d6:	4659      	mov	r1, fp
 800b4d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b4da:	f10b 0b01 	add.w	fp, fp, #1
 800b4de:	47c8      	blx	r9
 800b4e0:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800b4e4:	7822      	ldrb	r2, [r4, #0]
 800b4e6:	412b      	asrs	r3, r5
 800b4e8:	401a      	ands	r2, r3
 800b4ea:	f1c5 0307 	rsb	r3, r5, #7
 800b4ee:	3501      	adds	r5, #1
 800b4f0:	4098      	lsls	r0, r3
 800b4f2:	f025 0307 	bic.w	r3, r5, #7
 800b4f6:	4310      	orrs	r0, r2
 800b4f8:	7020      	strb	r0, [r4, #0]
 800b4fa:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 800b4fe:	411d      	asrs	r5, r3
 800b500:	e7e6      	b.n	800b4d0 <LCD_ReadRectEx+0xb0>
 800b502:	45c3      	cmp	fp, r8
 800b504:	dc56      	bgt.n	800b5b4 <LCD_ReadRectEx+0x194>
 800b506:	4659      	mov	r1, fp
 800b508:	4632      	mov	r2, r6
 800b50a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b50c:	f10b 0b01 	add.w	fp, fp, #1
 800b510:	9305      	str	r3, [sp, #20]
 800b512:	47c8      	blx	r9
 800b514:	006a      	lsls	r2, r5, #1
 800b516:	9b05      	ldr	r3, [sp, #20]
 800b518:	f894 e000 	ldrb.w	lr, [r4]
 800b51c:	3501      	adds	r5, #1
 800b51e:	fa43 f102 	asr.w	r1, r3, r2
 800b522:	f1c2 0206 	rsb	r2, r2, #6
 800b526:	ea0e 0101 	and.w	r1, lr, r1
 800b52a:	4090      	lsls	r0, r2
 800b52c:	ea41 0200 	orr.w	r2, r1, r0
 800b530:	7022      	strb	r2, [r4, #0]
 800b532:	f025 0203 	bic.w	r2, r5, #3
 800b536:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 800b53a:	4115      	asrs	r5, r2
 800b53c:	e7e1      	b.n	800b502 <LCD_ReadRectEx+0xe2>
 800b53e:	45c3      	cmp	fp, r8
 800b540:	dc38      	bgt.n	800b5b4 <LCD_ReadRectEx+0x194>
 800b542:	4659      	mov	r1, fp
 800b544:	4632      	mov	r2, r6
 800b546:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b548:	f10b 0b01 	add.w	fp, fp, #1
 800b54c:	9305      	str	r3, [sp, #20]
 800b54e:	47c8      	blx	r9
 800b550:	00aa      	lsls	r2, r5, #2
 800b552:	9b05      	ldr	r3, [sp, #20]
 800b554:	f894 e000 	ldrb.w	lr, [r4]
 800b558:	fa03 f102 	lsl.w	r1, r3, r2
 800b55c:	f1c2 0204 	rsb	r2, r2, #4
 800b560:	ea0e 0101 	and.w	r1, lr, r1
 800b564:	4090      	lsls	r0, r2
 800b566:	ea41 0200 	orr.w	r2, r1, r0
 800b56a:	7022      	strb	r2, [r4, #0]
 800b56c:	442c      	add	r4, r5
 800b56e:	f085 0501 	eor.w	r5, r5, #1
 800b572:	e7e4      	b.n	800b53e <LCD_ReadRectEx+0x11e>
 800b574:	eb04 010b 	add.w	r1, r4, fp
 800b578:	4588      	cmp	r8, r1
 800b57a:	db1b      	blt.n	800b5b4 <LCD_ReadRectEx+0x194>
 800b57c:	4632      	mov	r2, r6
 800b57e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b580:	47c8      	blx	r9
 800b582:	f804 0b01 	strb.w	r0, [r4], #1
 800b586:	e7f5      	b.n	800b574 <LCD_ReadRectEx+0x154>
 800b588:	45c3      	cmp	fp, r8
 800b58a:	dc13      	bgt.n	800b5b4 <LCD_ReadRectEx+0x194>
 800b58c:	4659      	mov	r1, fp
 800b58e:	4632      	mov	r2, r6
 800b590:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b592:	f10b 0b01 	add.w	fp, fp, #1
 800b596:	47c8      	blx	r9
 800b598:	f824 0b02 	strh.w	r0, [r4], #2
 800b59c:	e7f4      	b.n	800b588 <LCD_ReadRectEx+0x168>
 800b59e:	45c3      	cmp	fp, r8
 800b5a0:	dc08      	bgt.n	800b5b4 <LCD_ReadRectEx+0x194>
 800b5a2:	4659      	mov	r1, fp
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b5a8:	f10b 0b01 	add.w	fp, fp, #1
 800b5ac:	47c8      	blx	r9
 800b5ae:	f844 0b04 	str.w	r0, [r4], #4
 800b5b2:	e7f4      	b.n	800b59e <LCD_ReadRectEx+0x17e>
 800b5b4:	3601      	adds	r6, #1
 800b5b6:	e763      	b.n	800b480 <LCD_ReadRectEx+0x60>
 800b5b8:	b007      	add	sp, #28
 800b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000014 	.word	0x20000014

0800b5c4 <GUI_ReadRectEx>:
 800b5c4:	b4f0      	push	{r4, r5, r6, r7}
 800b5c6:	4d16      	ldr	r5, [pc, #88]	; (800b620 <GUI_ReadRectEx+0x5c>)
 800b5c8:	9e04      	ldr	r6, [sp, #16]
 800b5ca:	682d      	ldr	r5, [r5, #0]
 800b5cc:	9c05      	ldr	r4, [sp, #20]
 800b5ce:	f9b5 7008 	ldrsh.w	r7, [r5, #8]
 800b5d2:	42b8      	cmp	r0, r7
 800b5d4:	bfb8      	it	lt
 800b5d6:	4638      	movlt	r0, r7
 800b5d8:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 800b5dc:	42ba      	cmp	r2, r7
 800b5de:	bfa8      	it	ge
 800b5e0:	463a      	movge	r2, r7
 800b5e2:	4290      	cmp	r0, r2
 800b5e4:	dc1a      	bgt.n	800b61c <GUI_ReadRectEx+0x58>
 800b5e6:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 800b5ea:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 800b5ee:	42b9      	cmp	r1, r7
 800b5f0:	bfb8      	it	lt
 800b5f2:	4639      	movlt	r1, r7
 800b5f4:	42ab      	cmp	r3, r5
 800b5f6:	bfa8      	it	ge
 800b5f8:	462b      	movge	r3, r5
 800b5fa:	428b      	cmp	r3, r1
 800b5fc:	db0e      	blt.n	800b61c <GUI_ReadRectEx+0x58>
 800b5fe:	68e5      	ldr	r5, [r4, #12]
 800b600:	682d      	ldr	r5, [r5, #0]
 800b602:	f035 0504 	bics.w	r5, r5, #4
 800b606:	d104      	bne.n	800b612 <GUI_ReadRectEx+0x4e>
 800b608:	9405      	str	r4, [sp, #20]
 800b60a:	9604      	str	r6, [sp, #16]
 800b60c:	bcf0      	pop	{r4, r5, r6, r7}
 800b60e:	f7ff bf07 	b.w	800b420 <LCD_ReadRectEx>
 800b612:	6825      	ldr	r5, [r4, #0]
 800b614:	2d00      	cmp	r5, #0
 800b616:	d0f7      	beq.n	800b608 <GUI_ReadRectEx+0x44>
 800b618:	462c      	mov	r4, r5
 800b61a:	e7f0      	b.n	800b5fe <GUI_ReadRectEx+0x3a>
 800b61c:	bcf0      	pop	{r4, r5, r6, r7}
 800b61e:	4770      	bx	lr
 800b620:	20000014 	.word	0x20000014

0800b624 <LCD_SetClipRectEx>:
 800b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b626:	4c09      	ldr	r4, [pc, #36]	; (800b64c <LCD_SetClipRectEx+0x28>)
 800b628:	4605      	mov	r5, r0
 800b62a:	4669      	mov	r1, sp
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	7c5a      	ldrb	r2, [r3, #17]
 800b630:	4b07      	ldr	r3, [pc, #28]	; (800b650 <LCD_SetClipRectEx+0x2c>)
 800b632:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b636:	68c3      	ldr	r3, [r0, #12]
 800b638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63a:	4798      	blx	r3
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	466a      	mov	r2, sp
 800b640:	4629      	mov	r1, r5
 800b642:	3008      	adds	r0, #8
 800b644:	f7fa fa37 	bl	8005ab6 <GUI__IntersectRects>
 800b648:	b003      	add	sp, #12
 800b64a:	bd30      	pop	{r4, r5, pc}
 800b64c:	20000014 	.word	0x20000014
 800b650:	2001d9e8 	.word	0x2001d9e8

0800b654 <GUI_MEMDEV__WriteToActiveAt>:
 800b654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b658:	460f      	mov	r7, r1
 800b65a:	4690      	mov	r8, r2
 800b65c:	4606      	mov	r6, r0
 800b65e:	f7f9 fb45 	bl	8004cec <GUI_ALLOC_LockH>
 800b662:	6803      	ldr	r3, [r0, #0]
 800b664:	ac02      	add	r4, sp, #8
 800b666:	2116      	movs	r1, #22
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b66e:	2000      	movs	r0, #0
 800b670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b672:	4798      	blx	r3
 800b674:	4605      	mov	r5, r0
 800b676:	4620      	mov	r0, r4
 800b678:	f7f9 fb46 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800b67c:	b11d      	cbz	r5, 800b686 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800b67e:	4642      	mov	r2, r8
 800b680:	4639      	mov	r1, r7
 800b682:	4630      	mov	r0, r6
 800b684:	47a8      	blx	r5
 800b686:	b002      	add	sp, #8
 800b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b68c <GUI_MEMDEV__CreateFixed>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	4d46      	ldr	r5, [pc, #280]	; (800b7ac <GUI_MEMDEV__CreateFixed+0x120>)
 800b692:	b087      	sub	sp, #28
 800b694:	461c      	mov	r4, r3
 800b696:	4681      	mov	r9, r0
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	468a      	mov	sl, r1
 800b69c:	4690      	mov	r8, r2
 800b69e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b6a0:	7c5b      	ldrb	r3, [r3, #17]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b6a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b6a8:	f7fa f84e 	bl	8005748 <GUI_DEVICE_Create>
 800b6ac:	9503      	str	r5, [sp, #12]
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	b380      	cbz	r0, 800b714 <GUI_MEMDEV__CreateFixed+0x88>
 800b6b2:	6903      	ldr	r3, [r0, #16]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	4798      	blx	r3
 800b6b8:	f7fa ff4d 	bl	8006556 <LCD__GetBPPDevice>
 800b6bc:	fb00 f508 	mul.w	r5, r0, r8
 800b6c0:	9002      	str	r0, [sp, #8]
 800b6c2:	f7f9 fc47 	bl	8004f54 <GUI_ALLOC_RequestSize>
 800b6c6:	f017 0701 	ands.w	r7, r7, #1
 800b6ca:	f105 0507 	add.w	r5, r5, #7
 800b6ce:	bf08      	it	eq
 800b6d0:	2304      	moveq	r3, #4
 800b6d2:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 800b6d6:	bf04      	itt	eq
 800b6d8:	fb90 f0f3 	sdiveq	r0, r0, r3
 800b6dc:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 800b6e0:	2c00      	cmp	r4, #0
 800b6e2:	dc44      	bgt.n	800b76e <GUI_MEMDEV__CreateFixed+0xe2>
 800b6e4:	b11d      	cbz	r5, 800b6ee <GUI_MEMDEV__CreateFixed+0x62>
 800b6e6:	3818      	subs	r0, #24
 800b6e8:	fbb0 f0f5 	udiv	r0, r0, r5
 800b6ec:	e000      	b.n	800b6f0 <GUI_MEMDEV__CreateFixed+0x64>
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	4264      	negs	r4, r4
 800b6f2:	4284      	cmp	r4, r0
 800b6f4:	bfa8      	it	ge
 800b6f6:	4604      	movge	r4, r0
 800b6f8:	b977      	cbnz	r7, 800b718 <GUI_MEMDEV__CreateFixed+0x8c>
 800b6fa:	9700      	str	r7, [sp, #0]
 800b6fc:	4623      	mov	r3, r4
 800b6fe:	4642      	mov	r2, r8
 800b700:	4651      	mov	r1, sl
 800b702:	4648      	mov	r0, r9
 800b704:	f000 fbe8 	bl	800bed8 <GUI_USAGE_BM_Create>
 800b708:	2c00      	cmp	r4, #0
 800b70a:	4683      	mov	fp, r0
 800b70c:	dc39      	bgt.n	800b782 <GUI_MEMDEV__CreateFixed+0xf6>
 800b70e:	4630      	mov	r0, r6
 800b710:	f7fa f818 	bl	8005744 <GUI_DEVICE_Delete>
 800b714:	2000      	movs	r0, #0
 800b716:	e046      	b.n	800b7a6 <GUI_MEMDEV__CreateFixed+0x11a>
 800b718:	2c00      	cmp	r4, #0
 800b71a:	ddf8      	ble.n	800b70e <GUI_MEMDEV__CreateFixed+0x82>
 800b71c:	fb05 f004 	mul.w	r0, r5, r4
 800b720:	3018      	adds	r0, #24
 800b722:	f7f9 fca3 	bl	800506c <GUI_ALLOC_AllocNoInit>
 800b726:	4607      	mov	r7, r0
 800b728:	2800      	cmp	r0, #0
 800b72a:	d0f0      	beq.n	800b70e <GUI_MEMDEV__CreateFixed+0x82>
 800b72c:	f04f 0b00 	mov.w	fp, #0
 800b730:	4638      	mov	r0, r7
 800b732:	f7f9 fadb 	bl	8004cec <GUI_ALLOC_LockH>
 800b736:	9a02      	ldr	r2, [sp, #8]
 800b738:	4603      	mov	r3, r0
 800b73a:	a806      	add	r0, sp, #24
 800b73c:	f8a3 9004 	strh.w	r9, [r3, #4]
 800b740:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b744:	f8a3 a006 	strh.w	sl, [r3, #6]
 800b748:	601e      	str	r6, [r3, #0]
 800b74a:	f8a3 8008 	strh.w	r8, [r3, #8]
 800b74e:	815c      	strh	r4, [r3, #10]
 800b750:	60dd      	str	r5, [r3, #12]
 800b752:	611a      	str	r2, [r3, #16]
 800b754:	f8c3 b014 	str.w	fp, [r3, #20]
 800b758:	f7f9 fad6 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800b75c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b75e:	60b7      	str	r7, [r6, #8]
 800b760:	6133      	str	r3, [r6, #16]
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	7c5b      	ldrb	r3, [r3, #17]
 800b768:	61b3      	str	r3, [r6, #24]
 800b76a:	4638      	mov	r0, r7
 800b76c:	e01b      	b.n	800b7a6 <GUI_MEMDEV__CreateFixed+0x11a>
 800b76e:	2f00      	cmp	r7, #0
 800b770:	d1d4      	bne.n	800b71c <GUI_MEMDEV__CreateFixed+0x90>
 800b772:	9700      	str	r7, [sp, #0]
 800b774:	4623      	mov	r3, r4
 800b776:	4642      	mov	r2, r8
 800b778:	4651      	mov	r1, sl
 800b77a:	4648      	mov	r0, r9
 800b77c:	f000 fbac 	bl	800bed8 <GUI_USAGE_BM_Create>
 800b780:	4683      	mov	fp, r0
 800b782:	fb05 f004 	mul.w	r0, r5, r4
 800b786:	3018      	adds	r0, #24
 800b788:	f7f9 fc74 	bl	8005074 <GUI_ALLOC_AllocZero>
 800b78c:	4607      	mov	r7, r0
 800b78e:	2800      	cmp	r0, #0
 800b790:	d1ce      	bne.n	800b730 <GUI_MEMDEV__CreateFixed+0xa4>
 800b792:	4630      	mov	r0, r6
 800b794:	f7f9 ffd6 	bl	8005744 <GUI_DEVICE_Delete>
 800b798:	f1bb 0f00 	cmp.w	fp, #0
 800b79c:	d0ba      	beq.n	800b714 <GUI_MEMDEV__CreateFixed+0x88>
 800b79e:	4658      	mov	r0, fp
 800b7a0:	f7f9 fad2 	bl	8004d48 <GUI_ALLOC_Free>
 800b7a4:	e7e1      	b.n	800b76a <GUI_MEMDEV__CreateFixed+0xde>
 800b7a6:	b007      	add	sp, #28
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	20000014 	.word	0x20000014

0800b7b0 <GUI_MEMDEV_GetBitsPerPixel>:
 800b7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	b170      	cbz	r0, 800b7d4 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800b7b6:	f7f9 fa99 	bl	8004cec <GUI_ALLOC_LockH>
 800b7ba:	6803      	ldr	r3, [r0, #0]
 800b7bc:	ad02      	add	r5, sp, #8
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	4798      	blx	r3
 800b7c8:	f7fa fec5 	bl	8006556 <LCD__GetBPPDevice>
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f7f9 fa9a 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	b003      	add	sp, #12
 800b7d8:	bd30      	pop	{r4, r5, pc}
	...

0800b7dc <GUI_MEMDEV_Delete>:
 800b7dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7de:	4604      	mov	r4, r0
 800b7e0:	b1d0      	cbz	r0, 800b818 <GUI_MEMDEV_Delete+0x3c>
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <GUI_MEMDEV_Delete+0x40>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7e8:	4298      	cmp	r0, r3
 800b7ea:	d101      	bne.n	800b7f0 <GUI_MEMDEV_Delete+0x14>
 800b7ec:	f7f9 fd52 	bl	8005294 <GUI_SelectLCD>
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7f9 fa7b 	bl	8004cec <GUI_ALLOC_LockH>
 800b7f6:	9001      	str	r0, [sp, #4]
 800b7f8:	6940      	ldr	r0, [r0, #20]
 800b7fa:	b108      	cbz	r0, 800b800 <GUI_MEMDEV_Delete+0x24>
 800b7fc:	f7fc fccc 	bl	8008198 <GUI_USAGE_DecUseCnt>
 800b800:	ad02      	add	r5, sp, #8
 800b802:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b806:	6818      	ldr	r0, [r3, #0]
 800b808:	f7f9 ff9c 	bl	8005744 <GUI_DEVICE_Delete>
 800b80c:	4628      	mov	r0, r5
 800b80e:	f7f9 fa7b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800b812:	4620      	mov	r0, r4
 800b814:	f7f9 fa98 	bl	8004d48 <GUI_ALLOC_Free>
 800b818:	b003      	add	sp, #12
 800b81a:	bd30      	pop	{r4, r5, pc}
 800b81c:	20000014 	.word	0x20000014

0800b820 <GUI_MEMDEV_CreateEx>:
 800b820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	4699      	mov	r9, r3
 800b826:	4b19      	ldr	r3, [pc, #100]	; (800b88c <GUI_MEMDEV_CreateEx+0x6c>)
 800b828:	4606      	mov	r6, r0
 800b82a:	460f      	mov	r7, r1
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4690      	mov	r8, r2
 800b830:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b832:	7c58      	ldrb	r0, [r3, #17]
 800b834:	4b16      	ldr	r3, [pc, #88]	; (800b890 <GUI_MEMDEV_CreateEx+0x70>)
 800b836:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800b83a:	68e3      	ldr	r3, [r4, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b04      	cmp	r3, #4
 800b840:	d006      	beq.n	800b850 <GUI_MEMDEV_CreateEx+0x30>
 800b842:	6824      	ldr	r4, [r4, #0]
 800b844:	2c00      	cmp	r4, #0
 800b846:	d1f8      	bne.n	800b83a <GUI_MEMDEV_CreateEx+0x1a>
 800b848:	f7f9 ff6c 	bl	8005724 <GUI_DEVICE__GetpDriver>
 800b84c:	4604      	mov	r4, r0
 800b84e:	b130      	cbz	r0, 800b85e <GUI_MEMDEV_CreateEx+0x3e>
 800b850:	68e3      	ldr	r3, [r4, #12]
 800b852:	2101      	movs	r1, #1
 800b854:	4620      	mov	r0, r4
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	4798      	blx	r3
 800b85a:	4682      	mov	sl, r0
 800b85c:	b908      	cbnz	r0, 800b862 <GUI_MEMDEV_CreateEx+0x42>
 800b85e:	2000      	movs	r0, #0
 800b860:	e010      	b.n	800b884 <GUI_MEMDEV_CreateEx+0x64>
 800b862:	6924      	ldr	r4, [r4, #16]
 800b864:	68a3      	ldr	r3, [r4, #8]
 800b866:	4798      	blx	r3
 800b868:	3001      	adds	r0, #1
 800b86a:	464b      	mov	r3, r9
 800b86c:	4642      	mov	r2, r8
 800b86e:	bf04      	itt	eq
 800b870:	f045 0501 	orreq.w	r5, r5, #1
 800b874:	4c07      	ldreq	r4, [pc, #28]	; (800b894 <GUI_MEMDEV_CreateEx+0x74>)
 800b876:	4639      	mov	r1, r7
 800b878:	4630      	mov	r0, r6
 800b87a:	9402      	str	r4, [sp, #8]
 800b87c:	e88d 0420 	stmia.w	sp, {r5, sl}
 800b880:	f7ff ff04 	bl	800b68c <GUI_MEMDEV__CreateFixed>
 800b884:	b004      	add	sp, #16
 800b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88a:	bf00      	nop
 800b88c:	20000014 	.word	0x20000014
 800b890:	2001d9e8 	.word	0x2001d9e8
 800b894:	0800e9a4 	.word	0x0800e9a4

0800b898 <GUI_MEMDEV_Select>:
 800b898:	4b11      	ldr	r3, [pc, #68]	; (800b8e0 <GUI_MEMDEV_Select+0x48>)
 800b89a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4606      	mov	r6, r0
 800b8a0:	461c      	mov	r4, r3
 800b8a2:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800b8a4:	b910      	cbnz	r0, 800b8ac <GUI_MEMDEV_Select+0x14>
 800b8a6:	f7f9 fcf5 	bl	8005294 <GUI_SelectLCD>
 800b8aa:	e016      	b.n	800b8da <GUI_MEMDEV_Select+0x42>
 800b8ac:	b10f      	cbz	r7, 800b8b2 <GUI_MEMDEV_Select+0x1a>
 800b8ae:	f7f9 fcf1 	bl	8005294 <GUI_SelectLCD>
 800b8b2:	f7fe f97f 	bl	8009bb4 <WM_Deactivate>
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7f9 fa18 	bl	8004cec <GUI_ALLOC_LockH>
 800b8bc:	ad02      	add	r5, sp, #8
 800b8be:	6823      	ldr	r3, [r4, #0]
 800b8c0:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b8c4:	661e      	str	r6, [r3, #96]	; 0x60
 800b8c6:	6800      	ldr	r0, [r0, #0]
 800b8c8:	f7f9 ff7c 	bl	80057c4 <GUI_DEVICE_Link>
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f7f9 fa1b 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800b8d2:	f7fa fecd 	bl	8006670 <LCD_UpdateColorIndices>
 800b8d6:	f7fa fbe7 	bl	80060a8 <LCD_SetClipRectMax>
 800b8da:	4638      	mov	r0, r7
 800b8dc:	b003      	add	sp, #12
 800b8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8e0:	20000014 	.word	0x20000014

0800b8e4 <GUI_MEMDEV_CopyToLCDAt>:
 800b8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	4615      	mov	r5, r2
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d043      	beq.n	800b97c <GUI_MEMDEV_CopyToLCDAt+0x98>
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	f7f9 fcda 	bl	80052ae <GUI_SetDrawMode>
 800b8fa:	4b22      	ldr	r3, [pc, #136]	; (800b984 <GUI_MEMDEV_CopyToLCDAt+0xa0>)
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	4630      	mov	r0, r6
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f8d3 8060 	ldr.w	r8, [r3, #96]	; 0x60
 800b906:	f7f9 f9f1 	bl	8004cec <GUI_ALLOC_LockH>
 800b90a:	6803      	ldr	r3, [r0, #0]
 800b90c:	9001      	str	r0, [sp, #4]
 800b90e:	6998      	ldr	r0, [r3, #24]
 800b910:	f7ff f80c 	bl	800a92c <GUI_SelectLayer>
 800b914:	9a01      	ldr	r2, [sp, #4]
 800b916:	4b1c      	ldr	r3, [pc, #112]	; (800b988 <GUI_MEMDEV_CopyToLCDAt+0xa4>)
 800b918:	4681      	mov	r9, r0
 800b91a:	429c      	cmp	r4, r3
 800b91c:	8913      	ldrh	r3, [r2, #8]
 800b91e:	bf08      	it	eq
 800b920:	f9b2 4004 	ldrsheq.w	r4, [r2, #4]
 800b924:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b928:	bf08      	it	eq
 800b92a:	f9b2 5006 	ldrsheq.w	r5, [r2, #6]
 800b92e:	4423      	add	r3, r4
 800b930:	f8ad 4008 	strh.w	r4, [sp, #8]
 800b934:	f8ad 500a 	strh.w	r5, [sp, #10]
 800b938:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b93c:	8953      	ldrh	r3, [r2, #10]
 800b93e:	3b01      	subs	r3, #1
 800b940:	442b      	add	r3, r5
 800b942:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b946:	f7fe f92d 	bl	8009ba4 <WM_Activate>
 800b94a:	a801      	add	r0, sp, #4
 800b94c:	f7f9 f9dc 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800b950:	a802      	add	r0, sp, #8
 800b952:	f7fd ff77 	bl	8009844 <WM__InitIVRSearch>
 800b956:	b948      	cbnz	r0, 800b96c <GUI_MEMDEV_CopyToLCDAt+0x88>
 800b958:	4648      	mov	r0, r9
 800b95a:	f7fe ffe7 	bl	800a92c <GUI_SelectLayer>
 800b95e:	4640      	mov	r0, r8
 800b960:	f7ff ff9a 	bl	800b898 <GUI_MEMDEV_Select>
 800b964:	4638      	mov	r0, r7
 800b966:	f7f9 fca2 	bl	80052ae <GUI_SetDrawMode>
 800b96a:	e007      	b.n	800b97c <GUI_MEMDEV_CopyToLCDAt+0x98>
 800b96c:	462a      	mov	r2, r5
 800b96e:	4621      	mov	r1, r4
 800b970:	4630      	mov	r0, r6
 800b972:	f7fc fc79 	bl	8008268 <GUI_MEMDEV__WriteToActiveOpaque>
 800b976:	f7fd fea3 	bl	80096c0 <WM__GetNextIVR>
 800b97a:	e7ec      	b.n	800b956 <GUI_MEMDEV_CopyToLCDAt+0x72>
 800b97c:	b005      	add	sp, #20
 800b97e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b982:	bf00      	nop
 800b984:	20000014 	.word	0x20000014
 800b988:	fffff001 	.word	0xfffff001

0800b98c <GUI_MEMDEV_CopyToLCD>:
 800b98c:	4a01      	ldr	r2, [pc, #4]	; (800b994 <GUI_MEMDEV_CopyToLCD+0x8>)
 800b98e:	4611      	mov	r1, r2
 800b990:	f7ff bfa8 	b.w	800b8e4 <GUI_MEMDEV_CopyToLCDAt>
 800b994:	fffff001 	.word	0xfffff001

0800b998 <GUI_MEMDEV_Draw>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	4698      	mov	r8, r3
 800b99e:	b087      	sub	sp, #28
 800b9a0:	4b51      	ldr	r3, [pc, #324]	; (800bae8 <GUI_MEMDEV_Draw+0x150>)
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	9203      	str	r2, [sp, #12]
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	469b      	mov	fp, r3
 800b9aa:	9102      	str	r1, [sp, #8]
 800b9ac:	7c54      	ldrb	r4, [r2, #17]
 800b9ae:	4a4f      	ldr	r2, [pc, #316]	; (800baec <GUI_MEMDEV_Draw+0x154>)
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	5712      	ldrsb	r2, [r2, r4]
 800b9b4:	2a01      	cmp	r2, #1
 800b9b6:	dd06      	ble.n	800b9c6 <GUI_MEMDEV_Draw+0x2e>
 800b9b8:	f7fa fd0e 	bl	80063d8 <LCD_GetXSizeEx>
 800b9bc:	4681      	mov	r9, r0
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f7fa fd0d 	bl	80063de <LCD_GetYSizeEx>
 800b9c4:	e005      	b.n	800b9d2 <GUI_MEMDEV_Draw+0x3a>
 800b9c6:	f7fa fd0d 	bl	80063e4 <LCD_GetVXSizeEx>
 800b9ca:	4681      	mov	r9, r0
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f7fa fd0c 	bl	80063ea <LCD_GetVYSizeEx>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	b336      	cbz	r6, 800ba24 <GUI_MEMDEV_Draw+0x8c>
 800b9d6:	a905      	add	r1, sp, #20
 800b9d8:	a804      	add	r0, sp, #16
 800b9da:	f7f9 fb99 	bl	8005110 <GUI_GetOrg>
 800b9de:	9a04      	ldr	r2, [sp, #16]
 800b9e0:	9b05      	ldr	r3, [sp, #20]
 800b9e2:	4491      	add	r9, r2
 800b9e4:	f9b6 7000 	ldrsh.w	r7, [r6]
 800b9e8:	441c      	add	r4, r3
 800b9ea:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 800b9ee:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800b9f2:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800b9f6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800b9fa:	f9b6 9004 	ldrsh.w	r9, [r6, #4]
 800b9fe:	3c01      	subs	r4, #1
 800ba00:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ba04:	454a      	cmp	r2, r9
 800ba06:	bfd4      	ite	le
 800ba08:	ebc7 0902 	rsble	r9, r7, r2
 800ba0c:	ebc7 0909 	rsbgt	r9, r7, r9
 800ba10:	429c      	cmp	r4, r3
 800ba12:	bfd4      	ite	le
 800ba14:	ebc5 0404 	rsble	r4, r5, r4
 800ba18:	ebc5 0403 	rsbgt	r4, r5, r3
 800ba1c:	f109 0901 	add.w	r9, r9, #1
 800ba20:	3401      	adds	r4, #1
 800ba22:	e001      	b.n	800ba28 <GUI_MEMDEV_Draw+0x90>
 800ba24:	4635      	mov	r5, r6
 800ba26:	4637      	mov	r7, r6
 800ba28:	f1b8 0f00 	cmp.w	r8, #0
 800ba2c:	d101      	bne.n	800ba32 <GUI_MEMDEV_Draw+0x9a>
 800ba2e:	f1c4 0800 	rsb	r8, r4, #0
 800ba32:	f1b9 0f00 	cmp.w	r9, #0
 800ba36:	dd53      	ble.n	800bae0 <GUI_MEMDEV_Draw+0x148>
 800ba38:	2c00      	cmp	r4, #0
 800ba3a:	dd51      	ble.n	800bae0 <GUI_MEMDEV_Draw+0x148>
 800ba3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba3e:	464a      	mov	r2, r9
 800ba40:	4629      	mov	r1, r5
 800ba42:	4638      	mov	r0, r7
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	4643      	mov	r3, r8
 800ba48:	f7ff feea 	bl	800b820 <GUI_MEMDEV_CreateEx>
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	b920      	cbnz	r0, 800ba5a <GUI_MEMDEV_Draw+0xc2>
 800ba50:	9803      	ldr	r0, [sp, #12]
 800ba52:	9b02      	ldr	r3, [sp, #8]
 800ba54:	4798      	blx	r3
 800ba56:	2001      	movs	r0, #1
 800ba58:	e043      	b.n	800bae2 <GUI_MEMDEV_Draw+0x14a>
 800ba5a:	f000 f87b 	bl	800bb54 <GUI_MEMDEV_GetYSize>
 800ba5e:	4284      	cmp	r4, r0
 800ba60:	4680      	mov	r8, r0
 800ba62:	d006      	beq.n	800ba72 <GUI_MEMDEV_Draw+0xda>
 800ba64:	f8db 3000 	ldr.w	r3, [fp]
 800ba68:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ba6a:	b110      	cbz	r0, 800ba72 <GUI_MEMDEV_Draw+0xda>
 800ba6c:	2132      	movs	r1, #50	; 0x32
 800ba6e:	f7fe fbb9 	bl	800a1e4 <WM__SendMessageNoPara>
 800ba72:	46a2      	mov	sl, r4
 800ba74:	f04f 0900 	mov.w	r9, #0
 800ba78:	4630      	mov	r0, r6
 800ba7a:	f7ff ff0d 	bl	800b898 <GUI_MEMDEV_Select>
 800ba7e:	45d0      	cmp	r8, sl
 800ba80:	dd03      	ble.n	800ba8a <GUI_MEMDEV_Draw+0xf2>
 800ba82:	4651      	mov	r1, sl
 800ba84:	4630      	mov	r0, r6
 800ba86:	f000 f87d 	bl	800bb84 <GUI_MEMDEV_ReduceYSize>
 800ba8a:	f1b9 0f00 	cmp.w	r9, #0
 800ba8e:	d008      	beq.n	800baa2 <GUI_MEMDEV_Draw+0x10a>
 800ba90:	4630      	mov	r0, r6
 800ba92:	eb09 0205 	add.w	r2, r9, r5
 800ba96:	4639      	mov	r1, r7
 800ba98:	f000 f88a 	bl	800bbb0 <GUI_MEMDEV_SetOrg>
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f000 f829 	bl	800baf4 <GUI_MEMDEV_Clear>
 800baa2:	9b02      	ldr	r3, [sp, #8]
 800baa4:	9803      	ldr	r0, [sp, #12]
 800baa6:	4798      	blx	r3
 800baa8:	4b11      	ldr	r3, [pc, #68]	; (800baf0 <GUI_MEMDEV_Draw+0x158>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	b10b      	cbz	r3, 800bab2 <GUI_MEMDEV_Draw+0x11a>
 800baae:	2000      	movs	r0, #0
 800bab0:	4798      	blx	r3
 800bab2:	44c1      	add	r9, r8
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff ff69 	bl	800b98c <GUI_MEMDEV_CopyToLCD>
 800baba:	ebc8 0a0a 	rsb	sl, r8, sl
 800babe:	454c      	cmp	r4, r9
 800bac0:	dcdd      	bgt.n	800ba7e <GUI_MEMDEV_Draw+0xe6>
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7ff fe8a 	bl	800b7dc <GUI_MEMDEV_Delete>
 800bac8:	2000      	movs	r0, #0
 800baca:	f7ff fee5 	bl	800b898 <GUI_MEMDEV_Select>
 800bace:	4544      	cmp	r4, r8
 800bad0:	d006      	beq.n	800bae0 <GUI_MEMDEV_Draw+0x148>
 800bad2:	f8db 3000 	ldr.w	r3, [fp]
 800bad6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800bad8:	b110      	cbz	r0, 800bae0 <GUI_MEMDEV_Draw+0x148>
 800bada:	2133      	movs	r1, #51	; 0x33
 800badc:	f7fe fb82 	bl	800a1e4 <WM__SendMessageNoPara>
 800bae0:	2000      	movs	r0, #0
 800bae2:	b007      	add	sp, #28
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	20000014 	.word	0x20000014
 800baec:	2001d998 	.word	0x2001d998
 800baf0:	20000258 	.word	0x20000258

0800baf4 <GUI_MEMDEV_Clear>:
 800baf4:	b513      	push	{r0, r1, r4, lr}
 800baf6:	b918      	cbnz	r0, 800bb00 <GUI_MEMDEV_Clear+0xc>
 800baf8:	4b0d      	ldr	r3, [pc, #52]	; (800bb30 <GUI_MEMDEV_Clear+0x3c>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bafe:	b1a8      	cbz	r0, 800bb2c <GUI_MEMDEV_Clear+0x38>
 800bb00:	f7f9 f8f4 	bl	8004cec <GUI_ALLOC_LockH>
 800bb04:	ab02      	add	r3, sp, #8
 800bb06:	6944      	ldr	r4, [r0, #20]
 800bb08:	f843 0d08 	str.w	r0, [r3, #-8]!
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7f9 f8fb 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bb12:	b15c      	cbz	r4, 800bb2c <GUI_MEMDEV_Clear+0x38>
 800bb14:	4620      	mov	r0, r4
 800bb16:	ac02      	add	r4, sp, #8
 800bb18:	f7f9 f8e8 	bl	8004cec <GUI_ALLOC_LockH>
 800bb1c:	6883      	ldr	r3, [r0, #8]
 800bb1e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	4798      	blx	r3
 800bb26:	4620      	mov	r0, r4
 800bb28:	f7f9 f8ee 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bb2c:	b002      	add	sp, #8
 800bb2e:	bd10      	pop	{r4, pc}
 800bb30:	20000014 	.word	0x20000014

0800bb34 <GUI_MEMDEV_GetDataPtr>:
 800bb34:	b513      	push	{r0, r1, r4, lr}
 800bb36:	b158      	cbz	r0, 800bb50 <GUI_MEMDEV_GetDataPtr+0x1c>
 800bb38:	f7f9 f8d8 	bl	8004cec <GUI_ALLOC_LockH>
 800bb3c:	ab02      	add	r3, sp, #8
 800bb3e:	f100 0418 	add.w	r4, r0, #24
 800bb42:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7f9 f8de 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	e7ff      	b.n	800bb50 <GUI_MEMDEV_GetDataPtr+0x1c>
 800bb50:	b002      	add	sp, #8
 800bb52:	bd10      	pop	{r4, pc}

0800bb54 <GUI_MEMDEV_GetYSize>:
 800bb54:	b513      	push	{r0, r1, r4, lr}
 800bb56:	b918      	cbnz	r0, 800bb60 <GUI_MEMDEV_GetYSize+0xc>
 800bb58:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <GUI_MEMDEV_GetYSize+0x2c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bb5e:	b150      	cbz	r0, 800bb76 <GUI_MEMDEV_GetYSize+0x22>
 800bb60:	f7f9 f8c4 	bl	8004cec <GUI_ALLOC_LockH>
 800bb64:	ab02      	add	r3, sp, #8
 800bb66:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800bb6a:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f9 f8ca 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bb74:	e000      	b.n	800bb78 <GUI_MEMDEV_GetYSize+0x24>
 800bb76:	4604      	mov	r4, r0
 800bb78:	4620      	mov	r0, r4
 800bb7a:	b002      	add	sp, #8
 800bb7c:	bd10      	pop	{r4, pc}
 800bb7e:	bf00      	nop
 800bb80:	20000014 	.word	0x20000014

0800bb84 <GUI_MEMDEV_ReduceYSize>:
 800bb84:	b513      	push	{r0, r1, r4, lr}
 800bb86:	460c      	mov	r4, r1
 800bb88:	b918      	cbnz	r0, 800bb92 <GUI_MEMDEV_ReduceYSize+0xe>
 800bb8a:	4b08      	ldr	r3, [pc, #32]	; (800bbac <GUI_MEMDEV_ReduceYSize+0x28>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bb90:	b150      	cbz	r0, 800bba8 <GUI_MEMDEV_ReduceYSize+0x24>
 800bb92:	f7f9 f8ab 	bl	8004cec <GUI_ALLOC_LockH>
 800bb96:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800bb9a:	9001      	str	r0, [sp, #4]
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	bfc8      	it	gt
 800bba0:	8144      	strhgt	r4, [r0, #10]
 800bba2:	a801      	add	r0, sp, #4
 800bba4:	f7f9 f8b0 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bba8:	b002      	add	sp, #8
 800bbaa:	bd10      	pop	{r4, pc}
 800bbac:	20000014 	.word	0x20000014

0800bbb0 <GUI_MEMDEV_SetOrg>:
 800bbb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbb2:	460d      	mov	r5, r1
 800bbb4:	4614      	mov	r4, r2
 800bbb6:	b918      	cbnz	r0, 800bbc0 <GUI_MEMDEV_SetOrg+0x10>
 800bbb8:	4b12      	ldr	r3, [pc, #72]	; (800bc04 <GUI_MEMDEV_SetOrg+0x54>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800bbbe:	b1f8      	cbz	r0, 800bc00 <GUI_MEMDEV_SetOrg+0x50>
 800bbc0:	b224      	sxth	r4, r4
 800bbc2:	b22d      	sxth	r5, r5
 800bbc4:	f7f9 f892 	bl	8004cec <GUI_ALLOC_LockH>
 800bbc8:	80c4      	strh	r4, [r0, #6]
 800bbca:	8085      	strh	r5, [r0, #4]
 800bbcc:	9000      	str	r0, [sp, #0]
 800bbce:	f7fa fa6b 	bl	80060a8 <LCD_SetClipRectMax>
 800bbd2:	9b00      	ldr	r3, [sp, #0]
 800bbd4:	6958      	ldr	r0, [r3, #20]
 800bbd6:	b180      	cbz	r0, 800bbfa <GUI_MEMDEV_SetOrg+0x4a>
 800bbd8:	f7f9 f888 	bl	8004cec <GUI_ALLOC_LockH>
 800bbdc:	9b00      	ldr	r3, [sp, #0]
 800bbde:	9001      	str	r0, [sp, #4]
 800bbe0:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800bbe4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800bbe8:	8082      	strh	r2, [r0, #4]
 800bbea:	80c3      	strh	r3, [r0, #6]
 800bbec:	b112      	cbz	r2, 800bbf4 <GUI_MEMDEV_SetOrg+0x44>
 800bbee:	b10b      	cbz	r3, 800bbf4 <GUI_MEMDEV_SetOrg+0x44>
 800bbf0:	8005      	strh	r5, [r0, #0]
 800bbf2:	8044      	strh	r4, [r0, #2]
 800bbf4:	a801      	add	r0, sp, #4
 800bbf6:	f7f9 f887 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bbfa:	4668      	mov	r0, sp
 800bbfc:	f7f9 f884 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bc00:	b003      	add	sp, #12
 800bc02:	bd30      	pop	{r4, r5, pc}
 800bc04:	20000014 	.word	0x20000014

0800bc08 <_CreateStaticDevice>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	b087      	sub	sp, #28
 800bc0e:	4607      	mov	r7, r0
 800bc10:	f7f9 f86c 	bl	8004cec <GUI_ALLOC_LockH>
 800bc14:	f9b0 9000 	ldrsh.w	r9, [r0]
 800bc18:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800bc1c:	f10d 0818 	add.w	r8, sp, #24
 800bc20:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800bc24:	ebc9 0606 	rsb	r6, r9, r6
 800bc28:	f9b0 b006 	ldrsh.w	fp, [r0, #6]
 800bc2c:	f848 0d04 	str.w	r0, [r8, #-4]!
 800bc30:	3601      	adds	r6, #1
 800bc32:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800bc36:	4640      	mov	r0, r8
 800bc38:	ebc5 040b 	rsb	r4, r5, fp
 800bc3c:	f7f9 f864 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bc40:	2e00      	cmp	r6, #0
 800bc42:	f104 0401 	add.w	r4, r4, #1
 800bc46:	dd4c      	ble.n	800bce2 <_CreateStaticDevice+0xda>
 800bc48:	2c00      	cmp	r4, #0
 800bc4a:	dd4a      	ble.n	800bce2 <_CreateStaticDevice+0xda>
 800bc4c:	f1ba 0f00 	cmp.w	sl, #0
 800bc50:	d049      	beq.n	800bce6 <_CreateStaticDevice+0xde>
 800bc52:	4650      	mov	r0, sl
 800bc54:	f7f9 f84a 	bl	8004cec <GUI_ALLOC_LockH>
 800bc58:	ab06      	add	r3, sp, #24
 800bc5a:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800bc5e:	f843 0d08 	str.w	r0, [r3, #-8]!
 800bc62:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f9 f84e 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bc6c:	454e      	cmp	r6, r9
 800bc6e:	d101      	bne.n	800bc74 <_CreateStaticDevice+0x6c>
 800bc70:	42ac      	cmp	r4, r5
 800bc72:	d031      	beq.n	800bcd8 <_CreateStaticDevice+0xd0>
 800bc74:	462a      	mov	r2, r5
 800bc76:	4649      	mov	r1, r9
 800bc78:	4650      	mov	r0, sl
 800bc7a:	f7ff ff99 	bl	800bbb0 <GUI_MEMDEV_SetOrg>
 800bc7e:	e02b      	b.n	800bcd8 <_CreateStaticDevice+0xd0>
 800bc80:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800bc82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc86:	6283      	str	r3, [r0, #40]	; 0x28
 800bc88:	4640      	mov	r0, r8
 800bc8a:	f7f9 f83d 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f7ff fe02 	bl	800b898 <GUI_MEMDEV_Select>
 800bc94:	4680      	mov	r8, r0
 800bc96:	4650      	mov	r0, sl
 800bc98:	f000 f996 	bl	800bfc8 <GUI__AlphaPreserveTrans>
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f7ff ff49 	bl	800bb34 <GUI_MEMDEV_GetDataPtr>
 800bca2:	fb04 f206 	mul.w	r2, r4, r6
 800bca6:	4b2b      	ldr	r3, [pc, #172]	; (800bd54 <_CreateStaticDevice+0x14c>)
 800bca8:	492b      	ldr	r1, [pc, #172]	; (800bd58 <_CreateStaticDevice+0x150>)
 800bcaa:	0092      	lsls	r2, r2, #2
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	7809      	ldrb	r1, [r1, #0]
 800bcb0:	4c2a      	ldr	r4, [pc, #168]	; (800bd5c <_CreateStaticDevice+0x154>)
 800bcb2:	4798      	blx	r3
 800bcb4:	4d2a      	ldr	r5, [pc, #168]	; (800bd60 <_CreateStaticDevice+0x158>)
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	6826      	ldr	r6, [r4, #0]
 800bcba:	602f      	str	r7, [r5, #0]
 800bcbc:	f7fe f868 	bl	8009d90 <WM_GetWindowOrgX>
 800bcc0:	6020      	str	r0, [r4, #0]
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7fd fe48 	bl	8009958 <WM__Paint1>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	6026      	str	r6, [r4, #0]
 800bccc:	6028      	str	r0, [r5, #0]
 800bcce:	f000 f97b 	bl	800bfc8 <GUI__AlphaPreserveTrans>
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	f7ff fde0 	bl	800b898 <GUI_MEMDEV_Select>
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7f8 fffd 	bl	8004cd8 <GUI_ALLOC_h2p>
 800bcde:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800bce0:	e035      	b.n	800bd4e <_CreateStaticDevice+0x146>
 800bce2:	2000      	movs	r0, #0
 800bce4:	e033      	b.n	800bd4e <_CreateStaticDevice+0x146>
 800bce6:	f7fe f83f 	bl	8009d68 <WM_GetDesktopWindow>
 800bcea:	4287      	cmp	r7, r0
 800bcec:	d112      	bne.n	800bd14 <_CreateStaticDevice+0x10c>
 800bcee:	f7fa fb89 	bl	8006404 <LCD_GetXSize>
 800bcf2:	4682      	mov	sl, r0
 800bcf4:	f7fa fb8e 	bl	8006414 <LCD_GetYSize>
 800bcf8:	4556      	cmp	r6, sl
 800bcfa:	dc02      	bgt.n	800bd02 <_CreateStaticDevice+0xfa>
 800bcfc:	4284      	cmp	r4, r0
 800bcfe:	dd09      	ble.n	800bd14 <_CreateStaticDevice+0x10c>
 800bd00:	e000      	b.n	800bd04 <_CreateStaticDevice+0xfc>
 800bd02:	4656      	mov	r6, sl
 800bd04:	4284      	cmp	r4, r0
 800bd06:	4631      	mov	r1, r6
 800bd08:	bfa8      	it	ge
 800bd0a:	4604      	movge	r4, r0
 800bd0c:	4638      	mov	r0, r7
 800bd0e:	4622      	mov	r2, r4
 800bd10:	f7fe f941 	bl	8009f96 <WM_SetSize>
 800bd14:	4b13      	ldr	r3, [pc, #76]	; (800bd64 <_CreateStaticDevice+0x15c>)
 800bd16:	f04f 0a01 	mov.w	sl, #1
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	4632      	mov	r2, r6
 800bd1e:	9302      	str	r3, [sp, #8]
 800bd20:	4648      	mov	r0, r9
 800bd22:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <_CreateStaticDevice+0x160>)
 800bd24:	f8cd a000 	str.w	sl, [sp]
 800bd28:	9301      	str	r3, [sp, #4]
 800bd2a:	4623      	mov	r3, r4
 800bd2c:	f7ff fcae 	bl	800b68c <GUI_MEMDEV__CreateFixed>
 800bd30:	4605      	mov	r5, r0
 800bd32:	4638      	mov	r0, r7
 800bd34:	f7f8 ffda 	bl	8004cec <GUI_ALLOC_LockH>
 800bd38:	9005      	str	r0, [sp, #20]
 800bd3a:	6245      	str	r5, [r0, #36]	; 0x24
 800bd3c:	2d00      	cmp	r5, #0
 800bd3e:	d19f      	bne.n	800bc80 <_CreateStaticDevice+0x78>
 800bd40:	4640      	mov	r0, r8
 800bd42:	f7f8 ffe1 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bd46:	4638      	mov	r0, r7
 800bd48:	f7fd fe06 	bl	8009958 <WM__Paint1>
 800bd4c:	4628      	mov	r0, r5
 800bd4e:	b007      	add	sp, #28
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	20000024 	.word	0x20000024
 800bd58:	2000005c 	.word	0x2000005c
 800bd5c:	2001d9a8 	.word	0x2001d9a8
 800bd60:	2001da50 	.word	0x2001da50
 800bd64:	0800e9a4 	.word	0x0800e9a4
 800bd68:	0800e9bc 	.word	0x0800e9bc

0800bd6c <GUI_MEMDEV_Paint1Static>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4605      	mov	r5, r0
 800bd70:	2405      	movs	r4, #5
 800bd72:	4628      	mov	r0, r5
 800bd74:	f7ff ff48 	bl	800bc08 <_CreateStaticDevice>
 800bd78:	b910      	cbnz	r0, 800bd80 <GUI_MEMDEV_Paint1Static+0x14>
 800bd7a:	3c01      	subs	r4, #1
 800bd7c:	d1f9      	bne.n	800bd72 <GUI_MEMDEV_Paint1Static+0x6>
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd84:	f000 b904 	b.w	800bf90 <GUI_MEMDEV_Write>

0800bd88 <GUI_USAGE_BM_AddPixel>:
 800bd88:	f9b0 3000 	ldrsh.w	r3, [r0]
 800bd8c:	1ac9      	subs	r1, r1, r3
 800bd8e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800bd92:	1ad2      	subs	r2, r2, r3
 800bd94:	6903      	ldr	r3, [r0, #16]
 800bd96:	435a      	muls	r2, r3
 800bd98:	2380      	movs	r3, #128	; 0x80
 800bd9a:	3214      	adds	r2, #20
 800bd9c:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 800bda0:	f001 0107 	and.w	r1, r1, #7
 800bda4:	fa43 f101 	asr.w	r1, r3, r1
 800bda8:	5c83      	ldrb	r3, [r0, r2]
 800bdaa:	4319      	orrs	r1, r3
 800bdac:	5481      	strb	r1, [r0, r2]
 800bdae:	4770      	bx	lr

0800bdb0 <GUI_USAGE_BM_GetNextDirty>:
 800bdb0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdb8:	dd44      	ble.n	800be44 <GUI_USAGE_BM_GetNextDirty+0x94>
 800bdba:	680c      	ldr	r4, [r1, #0]
 800bdbc:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 800bdc0:	42b4      	cmp	r4, r6
 800bdc2:	da3f      	bge.n	800be44 <GUI_USAGE_BM_GetNextDirty+0x94>
 800bdc4:	10e3      	asrs	r3, r4, #3
 800bdc6:	6907      	ldr	r7, [r0, #16]
 800bdc8:	461d      	mov	r5, r3
 800bdca:	fb07 3202 	mla	r2, r7, r2, r3
 800bdce:	1e73      	subs	r3, r6, #1
 800bdd0:	ebc5 03e3 	rsb	r3, r5, r3, asr #3
 800bdd4:	f102 0515 	add.w	r5, r2, #21
 800bdd8:	3214      	adds	r2, #20
 800bdda:	4405      	add	r5, r0
 800bddc:	5c82      	ldrb	r2, [r0, r2]
 800bdde:	f004 0007 	and.w	r0, r4, #7
 800bde2:	4082      	lsls	r2, r0
 800bde4:	b2d2      	uxtb	r2, r2
 800bde6:	b93a      	cbnz	r2, 800bdf8 <GUI_USAGE_BM_GetNextDirty+0x48>
 800bde8:	b373      	cbz	r3, 800be48 <GUI_USAGE_BM_GetNextDirty+0x98>
 800bdea:	3408      	adds	r4, #8
 800bdec:	f815 2b01 	ldrb.w	r2, [r5], #1
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	f024 0407 	bic.w	r4, r4, #7
 800bdf6:	e7f6      	b.n	800bde6 <GUI_USAGE_BM_GetNextDirty+0x36>
 800bdf8:	0617      	lsls	r7, r2, #24
 800bdfa:	d403      	bmi.n	800be04 <GUI_USAGE_BM_GetNextDirty+0x54>
 800bdfc:	0052      	lsls	r2, r2, #1
 800bdfe:	3401      	adds	r4, #1
 800be00:	b2d2      	uxtb	r2, r2
 800be02:	e7f9      	b.n	800bdf8 <GUI_USAGE_BM_GetNextDirty+0x48>
 800be04:	2aff      	cmp	r2, #255	; 0xff
 800be06:	d006      	beq.n	800be16 <GUI_USAGE_BM_GetNextDirty+0x66>
 800be08:	4620      	mov	r0, r4
 800be0a:	0656      	lsls	r6, r2, #25
 800be0c:	d504      	bpl.n	800be18 <GUI_USAGE_BM_GetNextDirty+0x68>
 800be0e:	0052      	lsls	r2, r2, #1
 800be10:	3001      	adds	r0, #1
 800be12:	b2d2      	uxtb	r2, r2
 800be14:	e7f9      	b.n	800be0a <GUI_USAGE_BM_GetNextDirty+0x5a>
 800be16:	1de0      	adds	r0, r4, #7
 800be18:	f000 0207 	and.w	r2, r0, #7
 800be1c:	2a07      	cmp	r2, #7
 800be1e:	d10d      	bne.n	800be3c <GUI_USAGE_BM_GetNextDirty+0x8c>
 800be20:	3b01      	subs	r3, #1
 800be22:	d40b      	bmi.n	800be3c <GUI_USAGE_BM_GetNextDirty+0x8c>
 800be24:	f815 2b01 	ldrb.w	r2, [r5], #1
 800be28:	2aff      	cmp	r2, #255	; 0xff
 800be2a:	d101      	bne.n	800be30 <GUI_USAGE_BM_GetNextDirty+0x80>
 800be2c:	3008      	adds	r0, #8
 800be2e:	e7f7      	b.n	800be20 <GUI_USAGE_BM_GetNextDirty+0x70>
 800be30:	0613      	lsls	r3, r2, #24
 800be32:	d503      	bpl.n	800be3c <GUI_USAGE_BM_GetNextDirty+0x8c>
 800be34:	0052      	lsls	r2, r2, #1
 800be36:	3001      	adds	r0, #1
 800be38:	b2d2      	uxtb	r2, r2
 800be3a:	e7f9      	b.n	800be30 <GUI_USAGE_BM_GetNextDirty+0x80>
 800be3c:	1b00      	subs	r0, r0, r4
 800be3e:	600c      	str	r4, [r1, #0]
 800be40:	3001      	adds	r0, #1
 800be42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be44:	2000      	movs	r0, #0
 800be46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be48:	4618      	mov	r0, r3
 800be4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be4c <_GUI_USAGE_BM_Delete>:
 800be4c:	f7f8 bf7c 	b.w	8004d48 <GUI_ALLOC_Free>

0800be50 <GUI_USAGE_BM_Clear>:
 800be50:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800be54:	2100      	movs	r1, #0
 800be56:	6902      	ldr	r2, [r0, #16]
 800be58:	3014      	adds	r0, #20
 800be5a:	435a      	muls	r2, r3
 800be5c:	f000 bed4 	b.w	800cc08 <memset>

0800be60 <GUI_USAGE_BM_AddHLine>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	f9b0 4000 	ldrsh.w	r4, [r0]
 800be66:	1b09      	subs	r1, r1, r4
 800be68:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800be6c:	42a1      	cmp	r1, r4
 800be6e:	da32      	bge.n	800bed6 <GUI_USAGE_BM_AddHLine+0x76>
 800be70:	440b      	add	r3, r1
 800be72:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800be76:	10ce      	asrs	r6, r1, #3
 800be78:	f001 0407 	and.w	r4, r1, #7
 800be7c:	3b01      	subs	r3, #1
 800be7e:	1b52      	subs	r2, r2, r5
 800be80:	6905      	ldr	r5, [r0, #16]
 800be82:	21ff      	movs	r1, #255	; 0xff
 800be84:	43df      	mvns	r7, r3
 800be86:	fb05 6502 	mla	r5, r5, r2, r6
 800be8a:	fa41 f404 	asr.w	r4, r1, r4
 800be8e:	f007 0707 	and.w	r7, r7, #7
 800be92:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 800be96:	f105 0514 	add.w	r5, r5, #20
 800be9a:	b2e4      	uxtb	r4, r4
 800be9c:	fa01 f707 	lsl.w	r7, r1, r7
 800bea0:	eb00 0205 	add.w	r2, r0, r5
 800bea4:	f810 e005 	ldrb.w	lr, [r0, r5]
 800bea8:	b2ff      	uxtb	r7, r7
 800beaa:	d104      	bne.n	800beb6 <GUI_USAGE_BM_AddHLine+0x56>
 800beac:	403c      	ands	r4, r7
 800beae:	ea4e 0404 	orr.w	r4, lr, r4
 800beb2:	5544      	strb	r4, [r0, r5]
 800beb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb6:	ea44 040e 	orr.w	r4, r4, lr
 800beba:	1c53      	adds	r3, r2, #1
 800bebc:	5544      	strb	r4, [r0, r5]
 800bebe:	1e75      	subs	r5, r6, #1
 800bec0:	2d00      	cmp	r5, #0
 800bec2:	dd05      	ble.n	800bed0 <GUI_USAGE_BM_AddHLine+0x70>
 800bec4:	4618      	mov	r0, r3
 800bec6:	462a      	mov	r2, r5
 800bec8:	f000 fe9e 	bl	800cc08 <memset>
 800becc:	4603      	mov	r3, r0
 800bece:	442b      	add	r3, r5
 800bed0:	781c      	ldrb	r4, [r3, #0]
 800bed2:	433c      	orrs	r4, r7
 800bed4:	701c      	strb	r4, [r3, #0]
 800bed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bed8 <GUI_USAGE_BM_Create>:
 800bed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	f102 040f 	add.w	r4, r2, #15
 800bee0:	4680      	mov	r8, r0
 800bee2:	460f      	mov	r7, r1
 800bee4:	4616      	mov	r6, r2
 800bee6:	1124      	asrs	r4, r4, #4
 800bee8:	461d      	mov	r5, r3
 800beea:	0064      	lsls	r4, r4, #1
 800beec:	fb03 f004 	mul.w	r0, r3, r4
 800bef0:	3014      	adds	r0, #20
 800bef2:	f7f9 f8bf 	bl	8005074 <GUI_ALLOC_AllocZero>
 800bef6:	4681      	mov	r9, r0
 800bef8:	b188      	cbz	r0, 800bf1e <GUI_USAGE_BM_Create+0x46>
 800befa:	f7f8 fef7 	bl	8004cec <GUI_ALLOC_LockH>
 800befe:	4a0a      	ldr	r2, [pc, #40]	; (800bf28 <GUI_USAGE_BM_Create+0x50>)
 800bf00:	4603      	mov	r3, r0
 800bf02:	a802      	add	r0, sp, #8
 800bf04:	609a      	str	r2, [r3, #8]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f840 3d04 	str.w	r3, [r0, #-4]!
 800bf0c:	809e      	strh	r6, [r3, #4]
 800bf0e:	f8a3 8000 	strh.w	r8, [r3]
 800bf12:	805f      	strh	r7, [r3, #2]
 800bf14:	80dd      	strh	r5, [r3, #6]
 800bf16:	819a      	strh	r2, [r3, #12]
 800bf18:	611c      	str	r4, [r3, #16]
 800bf1a:	f7f8 fef5 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bf1e:	4648      	mov	r0, r9
 800bf20:	b003      	add	sp, #12
 800bf22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf26:	bf00      	nop
 800bf28:	0800e98c 	.word	0x0800e98c

0800bf2c <GUI_MEMDEV_WriteAt>:
 800bf2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bf2e:	460c      	mov	r4, r1
 800bf30:	4615      	mov	r5, r2
 800bf32:	4606      	mov	r6, r0
 800bf34:	b340      	cbz	r0, 800bf88 <GUI_MEMDEV_WriteAt+0x5c>
 800bf36:	f7f8 fed9 	bl	8004cec <GUI_ALLOC_LockH>
 800bf3a:	4b14      	ldr	r3, [pc, #80]	; (800bf8c <GUI_MEMDEV_WriteAt+0x60>)
 800bf3c:	9001      	str	r0, [sp, #4]
 800bf3e:	429c      	cmp	r4, r3
 800bf40:	8903      	ldrh	r3, [r0, #8]
 800bf42:	bf08      	it	eq
 800bf44:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800bf48:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bf4c:	bf08      	it	eq
 800bf4e:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800bf52:	4423      	add	r3, r4
 800bf54:	f8ad 4008 	strh.w	r4, [sp, #8]
 800bf58:	f8ad 500a 	strh.w	r5, [sp, #10]
 800bf5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bf60:	8943      	ldrh	r3, [r0, #10]
 800bf62:	a801      	add	r0, sp, #4
 800bf64:	3b01      	subs	r3, #1
 800bf66:	442b      	add	r3, r5
 800bf68:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bf6c:	f7f8 fecc 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800bf70:	a802      	add	r0, sp, #8
 800bf72:	f7fd fc67 	bl	8009844 <WM__InitIVRSearch>
 800bf76:	b138      	cbz	r0, 800bf88 <GUI_MEMDEV_WriteAt+0x5c>
 800bf78:	462a      	mov	r2, r5
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7ff fb69 	bl	800b654 <GUI_MEMDEV__WriteToActiveAt>
 800bf82:	f7fd fb9d 	bl	80096c0 <WM__GetNextIVR>
 800bf86:	e7f6      	b.n	800bf76 <GUI_MEMDEV_WriteAt+0x4a>
 800bf88:	b004      	add	sp, #16
 800bf8a:	bd70      	pop	{r4, r5, r6, pc}
 800bf8c:	fffff001 	.word	0xfffff001

0800bf90 <GUI_MEMDEV_Write>:
 800bf90:	4a01      	ldr	r2, [pc, #4]	; (800bf98 <GUI_MEMDEV_Write+0x8>)
 800bf92:	4611      	mov	r1, r2
 800bf94:	f7ff bfca 	b.w	800bf2c <GUI_MEMDEV_WriteAt>
 800bf98:	fffff001 	.word	0xfffff001

0800bf9c <_Color2Index_8888>:
 800bf9c:	4770      	bx	lr

0800bf9e <_GetIndexMask_8888>:
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfa2:	4770      	bx	lr

0800bfa4 <_Color2IndexBulk>:
 800bfa4:	b510      	push	{r4, lr}
 800bfa6:	f850 4b04 	ldr.w	r4, [r0], #4
 800bfaa:	3a01      	subs	r2, #1
 800bfac:	600c      	str	r4, [r1, #0]
 800bfae:	4419      	add	r1, r3
 800bfb0:	d1f9      	bne.n	800bfa6 <_Color2IndexBulk+0x2>
 800bfb2:	bd10      	pop	{r4, pc}

0800bfb4 <_Index2ColorBulk>:
 800bfb4:	b510      	push	{r4, lr}
 800bfb6:	6804      	ldr	r4, [r0, #0]
 800bfb8:	3a01      	subs	r2, #1
 800bfba:	4418      	add	r0, r3
 800bfbc:	f841 4b04 	str.w	r4, [r1], #4
 800bfc0:	d1f9      	bne.n	800bfb6 <_Index2ColorBulk+0x2>
 800bfc2:	bd10      	pop	{r4, pc}

0800bfc4 <LCD_Index2Color_8888>:
 800bfc4:	4770      	bx	lr

0800bfc6 <LCD_Index2Color_888>:
 800bfc6:	4770      	bx	lr

0800bfc8 <GUI__AlphaPreserveTrans>:
 800bfc8:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <GUI__AlphaPreserveTrans+0x20>)
 800bfca:	b510      	push	{r4, lr}
 800bfcc:	781c      	ldrb	r4, [r3, #0]
 800bfce:	b120      	cbz	r0, 800bfda <GUI__AlphaPreserveTrans+0x12>
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfd6:	701a      	strb	r2, [r3, #0]
 800bfd8:	e002      	b.n	800bfe0 <GUI__AlphaPreserveTrans+0x18>
 800bfda:	7018      	strb	r0, [r3, #0]
 800bfdc:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800bfe0:	f7ff fa16 	bl	800b410 <LCD_AA_SetAndMask>
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	bd10      	pop	{r4, pc}
 800bfe8:	2001d9d0 	.word	0x2001d9d0

0800bfec <_GetDevData>:
 800bfec:	2901      	cmp	r1, #1
 800bfee:	4802      	ldr	r0, [pc, #8]	; (800bff8 <_GetDevData+0xc>)
 800bff0:	bf18      	it	ne
 800bff2:	2000      	movne	r0, #0
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	0800e9bc 	.word	0x0800e9bc

0800bffc <_GetDevFunc>:
 800bffc:	2916      	cmp	r1, #22
 800bffe:	4802      	ldr	r0, [pc, #8]	; (800c008 <_GetDevFunc+0xc>)
 800c000:	bf18      	it	ne
 800c002:	2000      	movne	r0, #0
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	0800c9ed 	.word	0x0800c9ed

0800c00c <_GetDevProp>:
 800c00c:	2908      	cmp	r1, #8
 800c00e:	bf0c      	ite	eq
 800c010:	2020      	moveq	r0, #32
 800c012:	2000      	movne	r0, #0
 800c014:	4770      	bx	lr

0800c016 <_SetOrg>:
 800c016:	6800      	ldr	r0, [r0, #0]
 800c018:	68c3      	ldr	r3, [r0, #12]
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	4718      	bx	r3

0800c01e <_GetRect>:
 800c01e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c020:	6880      	ldr	r0, [r0, #8]
 800c022:	460d      	mov	r5, r1
 800c024:	f7f8 fe62 	bl	8004cec <GUI_ALLOC_LockH>
 800c028:	4602      	mov	r2, r0
 800c02a:	a802      	add	r0, sp, #8
 800c02c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800c030:	8914      	ldrh	r4, [r2, #8]
 800c032:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800c036:	802b      	strh	r3, [r5, #0]
 800c038:	441c      	add	r4, r3
 800c03a:	8953      	ldrh	r3, [r2, #10]
 800c03c:	3c01      	subs	r4, #1
 800c03e:	f840 2d04 	str.w	r2, [r0, #-4]!
 800c042:	440b      	add	r3, r1
 800c044:	8069      	strh	r1, [r5, #2]
 800c046:	80ac      	strh	r4, [r5, #4]
 800c048:	3b01      	subs	r3, #1
 800c04a:	80eb      	strh	r3, [r5, #6]
 800c04c:	f7f8 fe5c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c050:	b003      	add	sp, #12
 800c052:	bd30      	pop	{r4, r5, pc}

0800c054 <_XY2PTR>:
 800c054:	4b0e      	ldr	r3, [pc, #56]	; (800c090 <_XY2PTR+0x3c>)
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c05a:	4606      	mov	r6, r0
 800c05c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c05e:	460d      	mov	r5, r1
 800c060:	f7f8 fe44 	bl	8004cec <GUI_ALLOC_LockH>
 800c064:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c068:	ab02      	add	r3, sp, #8
 800c06a:	68c4      	ldr	r4, [r0, #12]
 800c06c:	1a69      	subs	r1, r5, r1
 800c06e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800c072:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c076:	1b76      	subs	r6, r6, r5
 800c078:	00b6      	lsls	r6, r6, #2
 800c07a:	3618      	adds	r6, #24
 800c07c:	fb04 6501 	mla	r5, r4, r1, r6
 800c080:	1944      	adds	r4, r0, r5
 800c082:	4618      	mov	r0, r3
 800c084:	f7f8 fe40 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c088:	4620      	mov	r0, r4
 800c08a:	b002      	add	sp, #8
 800c08c:	bd70      	pop	{r4, r5, r6, pc}
 800c08e:	bf00      	nop
 800c090:	20000014 	.word	0x20000014

0800c094 <_GetPixelIndex>:
 800c094:	b508      	push	{r3, lr}
 800c096:	4608      	mov	r0, r1
 800c098:	4611      	mov	r1, r2
 800c09a:	f7ff ffdb 	bl	800c054 <_XY2PTR>
 800c09e:	6800      	ldr	r0, [r0, #0]
 800c0a0:	bd08      	pop	{r3, pc}
	...

0800c0a4 <_XorPixel>:
 800c0a4:	4b15      	ldr	r3, [pc, #84]	; (800c0fc <_XorPixel+0x58>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0aa:	4616      	mov	r6, r2
 800c0ac:	460d      	mov	r5, r1
 800c0ae:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c0b0:	f7f8 fe1c 	bl	8004cec <GUI_ALLOC_LockH>
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	9000      	str	r0, [sp, #0]
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f7ff ffcb 	bl	800c054 <_XY2PTR>
 800c0be:	9b00      	ldr	r3, [sp, #0]
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	4798      	blx	r3
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	4058      	eors	r0, r3
 800c0ce:	9b00      	ldr	r3, [sp, #0]
 800c0d0:	6020      	str	r0, [r4, #0]
 800c0d2:	6958      	ldr	r0, [r3, #20]
 800c0d4:	b160      	cbz	r0, 800c0f0 <_XorPixel+0x4c>
 800c0d6:	f7f8 fe09 	bl	8004cec <GUI_ALLOC_LockH>
 800c0da:	ac02      	add	r4, sp, #8
 800c0dc:	6883      	ldr	r3, [r0, #8]
 800c0de:	4632      	mov	r2, r6
 800c0e0:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	4798      	blx	r3
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f7f8 fe0c 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c0f0:	4668      	mov	r0, sp
 800c0f2:	f7f8 fe09 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c0f6:	b002      	add	sp, #8
 800c0f8:	bd70      	pop	{r4, r5, r6, pc}
 800c0fa:	bf00      	nop
 800c0fc:	20000014 	.word	0x20000014

0800c100 <_SetPixelIndex>:
 800c100:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c102:	461c      	mov	r4, r3
 800c104:	4b10      	ldr	r3, [pc, #64]	; (800c148 <_SetPixelIndex+0x48>)
 800c106:	460d      	mov	r5, r1
 800c108:	4616      	mov	r6, r2
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c10e:	f7f8 fded 	bl	8004cec <GUI_ALLOC_LockH>
 800c112:	4631      	mov	r1, r6
 800c114:	9000      	str	r0, [sp, #0]
 800c116:	4628      	mov	r0, r5
 800c118:	f7ff ff9c 	bl	800c054 <_XY2PTR>
 800c11c:	9b00      	ldr	r3, [sp, #0]
 800c11e:	6004      	str	r4, [r0, #0]
 800c120:	6958      	ldr	r0, [r3, #20]
 800c122:	b160      	cbz	r0, 800c13e <_SetPixelIndex+0x3e>
 800c124:	f7f8 fde2 	bl	8004cec <GUI_ALLOC_LockH>
 800c128:	ac02      	add	r4, sp, #8
 800c12a:	6883      	ldr	r3, [r0, #8]
 800c12c:	4632      	mov	r2, r6
 800c12e:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c132:	4629      	mov	r1, r5
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4798      	blx	r3
 800c138:	4620      	mov	r0, r4
 800c13a:	f7f8 fde5 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c13e:	4668      	mov	r0, sp
 800c140:	f7f8 fde2 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c144:	b002      	add	sp, #8
 800c146:	bd70      	pop	{r4, r5, r6, pc}
 800c148:	20000014 	.word	0x20000014

0800c14c <_DrawVLine>:
 800c14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c150:	4c2a      	ldr	r4, [pc, #168]	; (800c1fc <_DrawVLine+0xb0>)
 800c152:	461e      	mov	r6, r3
 800c154:	4688      	mov	r8, r1
 800c156:	4615      	mov	r5, r2
 800c158:	6823      	ldr	r3, [r4, #0]
 800c15a:	4627      	mov	r7, r4
 800c15c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c15e:	f7f8 fdc5 	bl	8004cec <GUI_ALLOC_LockH>
 800c162:	9000      	str	r0, [sp, #0]
 800c164:	6940      	ldr	r0, [r0, #20]
 800c166:	b108      	cbz	r0, 800c16c <_DrawVLine+0x20>
 800c168:	f7f8 fdc0 	bl	8004cec <GUI_ALLOC_LockH>
 800c16c:	9001      	str	r0, [sp, #4]
 800c16e:	4629      	mov	r1, r5
 800c170:	4640      	mov	r0, r8
 800c172:	f7ff ff6f 	bl	800c054 <_XY2PTR>
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	4604      	mov	r4, r0
 800c17a:	9a00      	ldr	r2, [sp, #0]
 800c17c:	7c19      	ldrb	r1, [r3, #16]
 800c17e:	07c9      	lsls	r1, r1, #31
 800c180:	d51d      	bpl.n	800c1be <_DrawVLine+0x72>
 800c182:	6813      	ldr	r3, [r2, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	4798      	blx	r3
 800c18a:	4607      	mov	r7, r0
 800c18c:	9801      	ldr	r0, [sp, #4]
 800c18e:	b120      	cbz	r0, 800c19a <_DrawVLine+0x4e>
 800c190:	6883      	ldr	r3, [r0, #8]
 800c192:	462a      	mov	r2, r5
 800c194:	4641      	mov	r1, r8
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4798      	blx	r3
 800c19a:	6823      	ldr	r3, [r4, #0]
 800c19c:	3501      	adds	r5, #1
 800c19e:	407b      	eors	r3, r7
 800c1a0:	42b5      	cmp	r5, r6
 800c1a2:	6023      	str	r3, [r4, #0]
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	441c      	add	r4, r3
 800c1aa:	ddef      	ble.n	800c18c <_DrawVLine+0x40>
 800c1ac:	4668      	mov	r0, sp
 800c1ae:	f7f8 fdab 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	b1f3      	cbz	r3, 800c1f4 <_DrawVLine+0xa8>
 800c1b6:	a801      	add	r0, sp, #4
 800c1b8:	f7f8 fda6 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c1bc:	e01a      	b.n	800c1f4 <_DrawVLine+0xa8>
 800c1be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1c0:	68d7      	ldr	r7, [r2, #12]
 800c1c2:	f8d3 9000 	ldr.w	r9, [r3]
 800c1c6:	9b01      	ldr	r3, [sp, #4]
 800c1c8:	b163      	cbz	r3, 800c1e4 <_DrawVLine+0x98>
 800c1ca:	9801      	ldr	r0, [sp, #4]
 800c1cc:	462a      	mov	r2, r5
 800c1ce:	3501      	adds	r5, #1
 800c1d0:	4641      	mov	r1, r8
 800c1d2:	6883      	ldr	r3, [r0, #8]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4798      	blx	r3
 800c1d8:	42ae      	cmp	r6, r5
 800c1da:	f8c4 9000 	str.w	r9, [r4]
 800c1de:	443c      	add	r4, r7
 800c1e0:	daf3      	bge.n	800c1ca <_DrawVLine+0x7e>
 800c1e2:	e7e3      	b.n	800c1ac <_DrawVLine+0x60>
 800c1e4:	1b75      	subs	r5, r6, r5
 800c1e6:	3501      	adds	r5, #1
 800c1e8:	3d01      	subs	r5, #1
 800c1ea:	f8c4 9000 	str.w	r9, [r4]
 800c1ee:	443c      	add	r4, r7
 800c1f0:	d1fa      	bne.n	800c1e8 <_DrawVLine+0x9c>
 800c1f2:	e7db      	b.n	800c1ac <_DrawVLine+0x60>
 800c1f4:	b003      	add	sp, #12
 800c1f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000014 	.word	0x20000014

0800c200 <_FillRect>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	4e2a      	ldr	r6, [pc, #168]	; (800c2b0 <_FillRect+0xb0>)
 800c206:	461c      	mov	r4, r3
 800c208:	b085      	sub	sp, #20
 800c20a:	4689      	mov	r9, r1
 800c20c:	6833      	ldr	r3, [r6, #0]
 800c20e:	4615      	mov	r5, r2
 800c210:	ebc9 0404 	rsb	r4, r9, r4
 800c214:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c216:	f7f8 fd69 	bl	8004cec <GUI_ALLOC_LockH>
 800c21a:	4629      	mov	r1, r5
 800c21c:	9002      	str	r0, [sp, #8]
 800c21e:	4648      	mov	r0, r9
 800c220:	f7ff ff18 	bl	800c054 <_XY2PTR>
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	6832      	ldr	r2, [r6, #0]
 800c228:	4607      	mov	r7, r0
 800c22a:	6958      	ldr	r0, [r3, #20]
 800c22c:	3401      	adds	r4, #1
 800c22e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c230:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800c234:	f8d2 b000 	ldr.w	fp, [r2]
 800c238:	b330      	cbz	r0, 800c288 <_FillRect+0x88>
 800c23a:	f7f8 fd57 	bl	8004cec <GUI_ALLOC_LockH>
 800c23e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c240:	f10d 0810 	add.w	r8, sp, #16
 800c244:	462a      	mov	r2, r5
 800c246:	1b5b      	subs	r3, r3, r5
 800c248:	4649      	mov	r1, r9
 800c24a:	f848 0d04 	str.w	r0, [r8, #-4]!
 800c24e:	3301      	adds	r3, #1
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	4623      	mov	r3, r4
 800c254:	f7fb ffb4 	bl	80081c0 <GUI_USAGE_AddRect>
 800c258:	4640      	mov	r0, r8
 800c25a:	f7f8 fd55 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c25e:	e013      	b.n	800c288 <_FillRect+0x88>
 800c260:	6833      	ldr	r3, [r6, #0]
 800c262:	7c1b      	ldrb	r3, [r3, #16]
 800c264:	07db      	lsls	r3, r3, #31
 800c266:	d513      	bpl.n	800c290 <_FillRect+0x90>
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	4798      	blx	r3
 800c272:	463a      	mov	r2, r7
 800c274:	4623      	mov	r3, r4
 800c276:	6811      	ldr	r1, [r2, #0]
 800c278:	3b01      	subs	r3, #1
 800c27a:	ea81 0100 	eor.w	r1, r1, r0
 800c27e:	f842 1b04 	str.w	r1, [r2], #4
 800c282:	d1f8      	bne.n	800c276 <_FillRect+0x76>
 800c284:	4457      	add	r7, sl
 800c286:	3501      	adds	r5, #1
 800c288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c28a:	429d      	cmp	r5, r3
 800c28c:	dde8      	ble.n	800c260 <_FillRect+0x60>
 800c28e:	e008      	b.n	800c2a2 <_FillRect+0xa2>
 800c290:	2c00      	cmp	r4, #0
 800c292:	ddf7      	ble.n	800c284 <_FillRect+0x84>
 800c294:	4623      	mov	r3, r4
 800c296:	463a      	mov	r2, r7
 800c298:	3b01      	subs	r3, #1
 800c29a:	f842 bb04 	str.w	fp, [r2], #4
 800c29e:	d1fb      	bne.n	800c298 <_FillRect+0x98>
 800c2a0:	e7f0      	b.n	800c284 <_FillRect+0x84>
 800c2a2:	a802      	add	r0, sp, #8
 800c2a4:	f7f8 fd30 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c2a8:	b005      	add	sp, #20
 800c2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20000014 	.word	0x20000014

0800c2b4 <_DrawHLine>:
 800c2b4:	b507      	push	{r0, r1, r2, lr}
 800c2b6:	9200      	str	r2, [sp, #0]
 800c2b8:	f7ff ffa2 	bl	800c200 <_FillRect>
 800c2bc:	b003      	add	sp, #12
 800c2be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c2c4 <_DrawBitmap>:
 800c2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c8:	4da8      	ldr	r5, [pc, #672]	; (800c56c <_DrawBitmap+0x2a8>)
 800c2ca:	b091      	sub	sp, #68	; 0x44
 800c2cc:	460e      	mov	r6, r1
 800c2ce:	9302      	str	r3, [sp, #8]
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	9005      	str	r0, [sp, #20]
 800c2d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c2d6:	9206      	str	r2, [sp, #24]
 800c2d8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800c2da:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	f000 8381 	beq.w	800c9e6 <_DrawBitmap+0x722>
 800c2e4:	f7f8 fd02 	bl	8004cec <GUI_ALLOC_LockH>
 800c2e8:	900e      	str	r0, [sp, #56]	; 0x38
 800c2ea:	6940      	ldr	r0, [r0, #20]
 800c2ec:	b108      	cbz	r0, 800c2f2 <_DrawBitmap+0x2e>
 800c2ee:	f7f8 fcfd 	bl	8004cec <GUI_ALLOC_LockH>
 800c2f2:	900f      	str	r0, [sp, #60]	; 0x3c
 800c2f4:	a810      	add	r0, sp, #64	; 0x40
 800c2f6:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	9308      	str	r3, [sp, #32]
 800c2fe:	f7f8 fd03 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c304:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c306:	18f3      	adds	r3, r6, r3
 800c308:	9303      	str	r3, [sp, #12]
 800c30a:	b150      	cbz	r0, 800c322 <_DrawBitmap+0x5e>
 800c30c:	682b      	ldr	r3, [r5, #0]
 800c30e:	7c1b      	ldrb	r3, [r3, #16]
 800c310:	079d      	lsls	r5, r3, #30
 800c312:	d406      	bmi.n	800c322 <_DrawBitmap+0x5e>
 800c314:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c316:	9a06      	ldr	r2, [sp, #24]
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	9903      	ldr	r1, [sp, #12]
 800c31c:	9b02      	ldr	r3, [sp, #8]
 800c31e:	f7fb ff4f 	bl	80081c0 <GUI_USAGE_AddRect>
 800c322:	9906      	ldr	r1, [sp, #24]
 800c324:	9803      	ldr	r0, [sp, #12]
 800c326:	f7ff fe95 	bl	800c054 <_XY2PTR>
 800c32a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c32c:	4605      	mov	r5, r0
 800c32e:	2b17      	cmp	r3, #23
 800c330:	dd67      	ble.n	800c402 <_DrawBitmap+0x13e>
 800c332:	9b02      	ldr	r3, [sp, #8]
 800c334:	f04f 0b00 	mov.w	fp, #0
 800c338:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800c574 <_DrawBitmap+0x2b0>
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	9307      	str	r3, [sp, #28]
 800c340:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c342:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c344:	459b      	cmp	fp, r3
 800c346:	da58      	bge.n	800c3fa <_DrawBitmap+0x136>
 800c348:	b130      	cbz	r0, 800c358 <_DrawBitmap+0x94>
 800c34a:	6883      	ldr	r3, [r0, #8]
 800c34c:	9a06      	ldr	r2, [sp, #24]
 800c34e:	685e      	ldr	r6, [r3, #4]
 800c350:	445a      	add	r2, fp
 800c352:	9b02      	ldr	r3, [sp, #8]
 800c354:	9903      	ldr	r1, [sp, #12]
 800c356:	47b0      	blx	r6
 800c358:	9b05      	ldr	r3, [sp, #20]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	68d8      	ldr	r0, [r3, #12]
 800c35e:	b130      	cbz	r0, 800c36e <_DrawBitmap+0xaa>
 800c360:	f8d9 3000 	ldr.w	r3, [r9]
 800c364:	4621      	mov	r1, r4
 800c366:	9a07      	ldr	r2, [sp, #28]
 800c368:	4628      	mov	r0, r5
 800c36a:	4798      	blx	r3
 800c36c:	e03e      	b.n	800c3ec <_DrawBitmap+0x128>
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	462f      	mov	r7, r5
 800c372:	4798      	blx	r3
 800c374:	4626      	mov	r6, r4
 800c376:	0e03      	lsrs	r3, r0, #24
 800c378:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c37c:	9304      	str	r3, [sp, #16]
 800c37e:	4642      	mov	r2, r8
 800c380:	4631      	mov	r1, r6
 800c382:	f04f 0a00 	mov.w	sl, #0
 800c386:	f851 3b04 	ldr.w	r3, [r1], #4
 800c38a:	3a01      	subs	r2, #1
 800c38c:	9804      	ldr	r0, [sp, #16]
 800c38e:	0e1b      	lsrs	r3, r3, #24
 800c390:	4298      	cmp	r0, r3
 800c392:	9804      	ldr	r0, [sp, #16]
 800c394:	bf08      	it	eq
 800c396:	f10a 0a01 	addeq.w	sl, sl, #1
 800c39a:	4298      	cmp	r0, r3
 800c39c:	d011      	beq.n	800c3c2 <_DrawBitmap+0xfe>
 800c39e:	f1ba 0f00 	cmp.w	sl, #0
 800c3a2:	d011      	beq.n	800c3c8 <_DrawBitmap+0x104>
 800c3a4:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	ebca 0808 	rsb	r8, sl, r8
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b4:	f8d9 3000 	ldr.w	r3, [r9]
 800c3b8:	4798      	blx	r3
 800c3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3bc:	441f      	add	r7, r3
 800c3be:	441e      	add	r6, r3
 800c3c0:	e011      	b.n	800c3e6 <_DrawBitmap+0x122>
 800c3c2:	2a00      	cmp	r2, #0
 800c3c4:	d1df      	bne.n	800c386 <_DrawBitmap+0xc2>
 800c3c6:	e7ea      	b.n	800c39e <_DrawBitmap+0xda>
 800c3c8:	6830      	ldr	r0, [r6, #0]
 800c3ca:	0e02      	lsrs	r2, r0, #24
 800c3cc:	2aff      	cmp	r2, #255	; 0xff
 800c3ce:	d006      	beq.n	800c3de <_DrawBitmap+0x11a>
 800c3d0:	43d2      	mvns	r2, r2
 800c3d2:	4b67      	ldr	r3, [pc, #412]	; (800c570 <_DrawBitmap+0x2ac>)
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	b2d2      	uxtb	r2, r2
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4798      	blx	r3
 800c3dc:	6038      	str	r0, [r7, #0]
 800c3de:	3704      	adds	r7, #4
 800c3e0:	3604      	adds	r6, #4
 800c3e2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c3e6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ea:	d1c8      	bne.n	800c37e <_DrawBitmap+0xba>
 800c3ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c3ee:	f10b 0b01 	add.w	fp, fp, #1
 800c3f2:	441c      	add	r4, r3
 800c3f4:	9b08      	ldr	r3, [sp, #32]
 800c3f6:	441d      	add	r5, r3
 800c3f8:	e7a2      	b.n	800c340 <_DrawBitmap+0x7c>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	f040 82f0 	bne.w	800c9e0 <_DrawBitmap+0x71c>
 800c400:	e2f1      	b.n	800c9e6 <_DrawBitmap+0x722>
 800c402:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c404:	2b10      	cmp	r3, #16
 800c406:	d137      	bne.n	800c478 <_DrawBitmap+0x1b4>
 800c408:	9b03      	ldr	r3, [sp, #12]
 800c40a:	f04f 0800 	mov.w	r8, #0
 800c40e:	9a03      	ldr	r2, [sp, #12]
 800c410:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 800c414:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 800c418:	9b02      	ldr	r3, [sp, #8]
 800c41a:	eb03 0a02 	add.w	sl, r3, r2
 800c41e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c420:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800c422:	4598      	cmp	r8, r3
 800c424:	da24      	bge.n	800c470 <_DrawBitmap+0x1ac>
 800c426:	9b06      	ldr	r3, [sp, #24]
 800c428:	eb03 0908 	add.w	r9, r3, r8
 800c42c:	b136      	cbz	r6, 800c43c <_DrawBitmap+0x178>
 800c42e:	68b3      	ldr	r3, [r6, #8]
 800c430:	464a      	mov	r2, r9
 800c432:	9903      	ldr	r1, [sp, #12]
 800c434:	4630      	mov	r0, r6
 800c436:	685f      	ldr	r7, [r3, #4]
 800c438:	9b02      	ldr	r3, [sp, #8]
 800c43a:	47b8      	blx	r7
 800c43c:	9f03      	ldr	r7, [sp, #12]
 800c43e:	9b05      	ldr	r3, [sp, #20]
 800c440:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	4798      	blx	r3
 800c44a:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 800c44e:	b12e      	cbz	r6, 800c45c <_DrawBitmap+0x198>
 800c450:	68b3      	ldr	r3, [r6, #8]
 800c452:	464a      	mov	r2, r9
 800c454:	4639      	mov	r1, r7
 800c456:	4630      	mov	r0, r6
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4798      	blx	r3
 800c45c:	3701      	adds	r7, #1
 800c45e:	4557      	cmp	r7, sl
 800c460:	d1ed      	bne.n	800c43e <_DrawBitmap+0x17a>
 800c462:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c464:	f108 0801 	add.w	r8, r8, #1
 800c468:	441c      	add	r4, r3
 800c46a:	9b08      	ldr	r3, [sp, #32]
 800c46c:	441d      	add	r5, r3
 800c46e:	e7d6      	b.n	800c41e <_DrawBitmap+0x15a>
 800c470:	2e00      	cmp	r6, #0
 800c472:	f040 82b5 	bne.w	800c9e0 <_DrawBitmap+0x71c>
 800c476:	e2b6      	b.n	800c9e6 <_DrawBitmap+0x722>
 800c478:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	f040 8082 	bne.w	800c584 <_DrawBitmap+0x2c0>
 800c480:	9a03      	ldr	r2, [sp, #12]
 800c482:	f06f 0303 	mvn.w	r3, #3
 800c486:	9e06      	ldr	r6, [sp, #24]
 800c488:	4353      	muls	r3, r2
 800c48a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800c56c <_DrawBitmap+0x2a8>
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	9b02      	ldr	r3, [sp, #8]
 800c492:	4413      	add	r3, r2
 800c494:	9305      	str	r3, [sp, #20]
 800c496:	9b06      	ldr	r3, [sp, #24]
 800c498:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c49a:	1af3      	subs	r3, r6, r3
 800c49c:	429a      	cmp	r2, r3
 800c49e:	f340 829d 	ble.w	800c9dc <_DrawBitmap+0x718>
 800c4a2:	f8d9 3000 	ldr.w	r3, [r9]
 800c4a6:	7c1b      	ldrb	r3, [r3, #16]
 800c4a8:	f1bb 0f00 	cmp.w	fp, #0
 800c4ac:	d032      	beq.n	800c514 <_DrawBitmap+0x250>
 800c4ae:	f013 0303 	ands.w	r3, r3, #3
 800c4b2:	d00a      	beq.n	800c4ca <_DrawBitmap+0x206>
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d15f      	bne.n	800c578 <_DrawBitmap+0x2b4>
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800c4be:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800c4c2:	18eb      	adds	r3, r5, r3
 800c4c4:	9f03      	ldr	r7, [sp, #12]
 800c4c6:	9307      	str	r3, [sp, #28]
 800c4c8:	e01f      	b.n	800c50a <_DrawBitmap+0x246>
 800c4ca:	9a02      	ldr	r2, [sp, #8]
 800c4cc:	4623      	mov	r3, r4
 800c4ce:	18a1      	adds	r1, r4, r2
 800c4d0:	462a      	mov	r2, r5
 800c4d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4d6:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800c4da:	428b      	cmp	r3, r1
 800c4dc:	f842 0b04 	str.w	r0, [r2], #4
 800c4e0:	d1f7      	bne.n	800c4d2 <_DrawBitmap+0x20e>
 800c4e2:	e049      	b.n	800c578 <_DrawBitmap+0x2b4>
 800c4e4:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c4e8:	9a07      	ldr	r2, [sp, #28]
 800c4ea:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800c4ee:	f1b8 0f00 	cmp.w	r8, #0
 800c4f2:	d006      	beq.n	800c502 <_DrawBitmap+0x23e>
 800c4f4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4f8:	4632      	mov	r2, r6
 800c4fa:	4639      	mov	r1, r7
 800c4fc:	4640      	mov	r0, r8
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4798      	blx	r3
 800c502:	3701      	adds	r7, #1
 800c504:	9b05      	ldr	r3, [sp, #20]
 800c506:	42bb      	cmp	r3, r7
 800c508:	d036      	beq.n	800c578 <_DrawBitmap+0x2b4>
 800c50a:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d0f7      	beq.n	800c502 <_DrawBitmap+0x23e>
 800c512:	e7e7      	b.n	800c4e4 <_DrawBitmap+0x220>
 800c514:	f013 0303 	ands.w	r3, r3, #3
 800c518:	d00a      	beq.n	800c530 <_DrawBitmap+0x26c>
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d12c      	bne.n	800c578 <_DrawBitmap+0x2b4>
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800c524:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800c528:	18eb      	adds	r3, r5, r3
 800c52a:	9f03      	ldr	r7, [sp, #12]
 800c52c:	9307      	str	r3, [sp, #28]
 800c52e:	e017      	b.n	800c560 <_DrawBitmap+0x29c>
 800c530:	4b10      	ldr	r3, [pc, #64]	; (800c574 <_DrawBitmap+0x2b0>)
 800c532:	4621      	mov	r1, r4
 800c534:	9a02      	ldr	r2, [sp, #8]
 800c536:	4628      	mov	r0, r5
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4798      	blx	r3
 800c53c:	e01c      	b.n	800c578 <_DrawBitmap+0x2b4>
 800c53e:	9a07      	ldr	r2, [sp, #28]
 800c540:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800c544:	f1b8 0f00 	cmp.w	r8, #0
 800c548:	d006      	beq.n	800c558 <_DrawBitmap+0x294>
 800c54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c54e:	4632      	mov	r2, r6
 800c550:	4639      	mov	r1, r7
 800c552:	4640      	mov	r0, r8
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4798      	blx	r3
 800c558:	3701      	adds	r7, #1
 800c55a:	9b05      	ldr	r3, [sp, #20]
 800c55c:	42bb      	cmp	r3, r7
 800c55e:	d00b      	beq.n	800c578 <_DrawBitmap+0x2b4>
 800c560:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c564:	2b00      	cmp	r3, #0
 800c566:	d0f7      	beq.n	800c558 <_DrawBitmap+0x294>
 800c568:	e7e9      	b.n	800c53e <_DrawBitmap+0x27a>
 800c56a:	bf00      	nop
 800c56c:	20000014 	.word	0x20000014
 800c570:	2000003c 	.word	0x2000003c
 800c574:	20000020 	.word	0x20000020
 800c578:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c57a:	3601      	adds	r6, #1
 800c57c:	441c      	add	r4, r3
 800c57e:	9b08      	ldr	r3, [sp, #32]
 800c580:	441d      	add	r5, r3
 800c582:	e788      	b.n	800c496 <_DrawBitmap+0x1d2>
 800c584:	4bb3      	ldr	r3, [pc, #716]	; (800c854 <_DrawBitmap+0x590>)
 800c586:	f1bb 0f00 	cmp.w	fp, #0
 800c58a:	bf08      	it	eq
 800c58c:	469b      	moveq	fp, r3
 800c58e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c590:	005b      	lsls	r3, r3, #1
 800c592:	930a      	str	r3, [sp, #40]	; 0x28
 800c594:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	930b      	str	r3, [sp, #44]	; 0x2c
 800c59a:	1c63      	adds	r3, r4, #1
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	1d03      	adds	r3, r0, #4
 800c5a0:	9307      	str	r3, [sp, #28]
 800c5a2:	9b06      	ldr	r3, [sp, #24]
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	9b07      	ldr	r3, [sp, #28]
 800c5a8:	9a06      	ldr	r2, [sp, #24]
 800c5aa:	1f1c      	subs	r4, r3, #4
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c5b2:	9b05      	ldr	r3, [sp, #20]
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	f340 820f 	ble.w	800c9dc <_DrawBitmap+0x718>
 800c5be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	f000 809b 	beq.w	800c6fc <_DrawBitmap+0x438>
 800c5c6:	2b04      	cmp	r3, #4
 800c5c8:	f000 8132 	beq.w	800c830 <_DrawBitmap+0x56c>
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	f040 81f9 	bne.w	800c9c4 <_DrawBitmap+0x700>
 800c5d2:	4ba1      	ldr	r3, [pc, #644]	; (800c858 <_DrawBitmap+0x594>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6e18      	ldr	r0, [r3, #96]	; 0x60
 800c5d8:	f7f8 fb88 	bl	8004cec <GUI_ALLOC_LockH>
 800c5dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c5de:	4a9f      	ldr	r2, [pc, #636]	; (800c85c <_DrawBitmap+0x598>)
 800c5e0:	f1c3 0508 	rsb	r5, r3, #8
 800c5e4:	9b04      	ldr	r3, [sp, #16]
 800c5e6:	900e      	str	r0, [sp, #56]	; 0x38
 800c5e8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c5ec:	9f02      	ldr	r7, [sp, #8]
 800c5ee:	5cd6      	ldrb	r6, [r2, r3]
 800c5f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c5f2:	411e      	asrs	r6, r3
 800c5f4:	4b98      	ldr	r3, [pc, #608]	; (800c858 <_DrawBitmap+0x594>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	7c1b      	ldrb	r3, [r3, #16]
 800c5fa:	f003 0303 	and.w	r3, r3, #3
 800c5fe:	2b02      	cmp	r3, #2
 800c600:	d01d      	beq.n	800c63e <_DrawBitmap+0x37a>
 800c602:	2b03      	cmp	r3, #3
 800c604:	d056      	beq.n	800c6b4 <_DrawBitmap+0x3f0>
 800c606:	2b01      	cmp	r3, #1
 800c608:	d054      	beq.n	800c6b4 <_DrawBitmap+0x3f0>
 800c60a:	42bd      	cmp	r5, r7
 800c60c:	4622      	mov	r2, r4
 800c60e:	bf28      	it	cs
 800c610:	463d      	movcs	r5, r7
 800c612:	1b7f      	subs	r7, r7, r5
 800c614:	462b      	mov	r3, r5
 800c616:	f006 0101 	and.w	r1, r6, #1
 800c61a:	3b01      	subs	r3, #1
 800c61c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c620:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800c624:	f842 1b04 	str.w	r1, [r2], #4
 800c628:	d1f5      	bne.n	800c616 <_DrawBitmap+0x352>
 800c62a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c62e:	2f00      	cmp	r7, #0
 800c630:	d060      	beq.n	800c6f4 <_DrawBitmap+0x430>
 800c632:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c636:	2508      	movs	r5, #8
 800c638:	4a88      	ldr	r2, [pc, #544]	; (800c85c <_DrawBitmap+0x598>)
 800c63a:	5cd6      	ldrb	r6, [r2, r3]
 800c63c:	e7e5      	b.n	800c60a <_DrawBitmap+0x346>
 800c63e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800c642:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800c646:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c64a:	9309      	str	r3, [sp, #36]	; 0x24
 800c64c:	42bd      	cmp	r5, r7
 800c64e:	bf28      	it	cs
 800c650:	463d      	movcs	r5, r7
 800c652:	1b7f      	subs	r7, r7, r5
 800c654:	f1b9 0f00 	cmp.w	r9, #0
 800c658:	d021      	beq.n	800c69e <_DrawBitmap+0x3da>
 800c65a:	b91e      	cbnz	r6, 800c664 <_DrawBitmap+0x3a0>
 800c65c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c660:	44a8      	add	r8, r5
 800c662:	e020      	b.n	800c6a6 <_DrawBitmap+0x3e2>
 800c664:	07f0      	lsls	r0, r6, #31
 800c666:	d508      	bpl.n	800c67a <_DrawBitmap+0x3b6>
 800c668:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c66c:	4641      	mov	r1, r8
 800c66e:	9a05      	ldr	r2, [sp, #20]
 800c670:	4648      	mov	r0, r9
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4798      	blx	r3
 800c676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	3d01      	subs	r5, #1
 800c67c:	f108 0801 	add.w	r8, r8, #1
 800c680:	f104 0404 	add.w	r4, r4, #4
 800c684:	d00f      	beq.n	800c6a6 <_DrawBitmap+0x3e2>
 800c686:	0876      	lsrs	r6, r6, #1
 800c688:	e7e7      	b.n	800c65a <_DrawBitmap+0x396>
 800c68a:	07f1      	lsls	r1, r6, #31
 800c68c:	f104 0404 	add.w	r4, r4, #4
 800c690:	bf44      	itt	mi
 800c692:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 800c694:	f844 3c04 	strmi.w	r3, [r4, #-4]
 800c698:	3d01      	subs	r5, #1
 800c69a:	d004      	beq.n	800c6a6 <_DrawBitmap+0x3e2>
 800c69c:	0876      	lsrs	r6, r6, #1
 800c69e:	2e00      	cmp	r6, #0
 800c6a0:	d1f3      	bne.n	800c68a <_DrawBitmap+0x3c6>
 800c6a2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c6a6:	b32f      	cbz	r7, 800c6f4 <_DrawBitmap+0x430>
 800c6a8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c6ac:	2508      	movs	r5, #8
 800c6ae:	4a6b      	ldr	r2, [pc, #428]	; (800c85c <_DrawBitmap+0x598>)
 800c6b0:	5cd6      	ldrb	r6, [r2, r3]
 800c6b2:	e7cb      	b.n	800c64c <_DrawBitmap+0x388>
 800c6b4:	6803      	ldr	r3, [r0, #0]
 800c6b6:	691b      	ldr	r3, [r3, #16]
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	4798      	blx	r3
 800c6bc:	42bd      	cmp	r5, r7
 800c6be:	4623      	mov	r3, r4
 800c6c0:	bf28      	it	cs
 800c6c2:	463d      	movcs	r5, r7
 800c6c4:	1b7f      	subs	r7, r7, r5
 800c6c6:	4629      	mov	r1, r5
 800c6c8:	07f2      	lsls	r2, r6, #31
 800c6ca:	f103 0304 	add.w	r3, r3, #4
 800c6ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c6d2:	bf42      	ittt	mi
 800c6d4:	f853 2c04 	ldrmi.w	r2, [r3, #-4]
 800c6d8:	4042      	eormi	r2, r0
 800c6da:	f843 2c04 	strmi.w	r2, [r3, #-4]
 800c6de:	3901      	subs	r1, #1
 800c6e0:	d1f2      	bne.n	800c6c8 <_DrawBitmap+0x404>
 800c6e2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c6e6:	b12f      	cbz	r7, 800c6f4 <_DrawBitmap+0x430>
 800c6e8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800c6ec:	2508      	movs	r5, #8
 800c6ee:	4a5b      	ldr	r2, [pc, #364]	; (800c85c <_DrawBitmap+0x598>)
 800c6f0:	5cd6      	ldrb	r6, [r2, r3]
 800c6f2:	e7e3      	b.n	800c6bc <_DrawBitmap+0x3f8>
 800c6f4:	a80e      	add	r0, sp, #56	; 0x38
 800c6f6:	f7f8 fb07 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c6fa:	e163      	b.n	800c9c4 <_DrawBitmap+0x700>
 800c6fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c6fe:	f1c3 0504 	rsb	r5, r3, #4
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800c708:	b2ed      	uxtb	r5, r5
 800c70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70c:	409e      	lsls	r6, r3
 800c70e:	4b52      	ldr	r3, [pc, #328]	; (800c858 <_DrawBitmap+0x594>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	b2f6      	uxtb	r6, r6
 800c714:	7c1b      	ldrb	r3, [r3, #16]
 800c716:	f003 0303 	and.w	r3, r3, #3
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d009      	beq.n	800c732 <_DrawBitmap+0x46e>
 800c71e:	d30a      	bcc.n	800c736 <_DrawBitmap+0x472>
 800c720:	2b02      	cmp	r3, #2
 800c722:	f040 814f 	bne.w	800c9c4 <_DrawBitmap+0x700>
 800c726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c728:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c72c:	9309      	str	r3, [sp, #36]	; 0x24
 800c72e:	9f03      	ldr	r7, [sp, #12]
 800c730:	e035      	b.n	800c79e <_DrawBitmap+0x4da>
 800c732:	9b02      	ldr	r3, [sp, #8]
 800c734:	e075      	b.n	800c822 <_DrawBitmap+0x55e>
 800c736:	9b02      	ldr	r3, [sp, #8]
 800c738:	429d      	cmp	r5, r3
 800c73a:	4621      	mov	r1, r4
 800c73c:	bfc8      	it	gt
 800c73e:	b2dd      	uxtbgt	r5, r3
 800c740:	1b5b      	subs	r3, r3, r5
 800c742:	462a      	mov	r2, r5
 800c744:	09b0      	lsrs	r0, r6, #6
 800c746:	3a01      	subs	r2, #1
 800c748:	00b6      	lsls	r6, r6, #2
 800c74a:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800c74e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800c752:	b2f6      	uxtb	r6, r6
 800c754:	f841 0b04 	str.w	r0, [r1], #4
 800c758:	d1f4      	bne.n	800c744 <_DrawBitmap+0x480>
 800c75a:	3d01      	subs	r5, #1
 800c75c:	b2ed      	uxtb	r5, r5
 800c75e:	3501      	adds	r5, #1
 800c760:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 812d 	beq.w	800c9c4 <_DrawBitmap+0x700>
 800c76a:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800c76e:	2504      	movs	r5, #4
 800c770:	e7e2      	b.n	800c738 <_DrawBitmap+0x474>
 800c772:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800c776:	d125      	bne.n	800c7c4 <_DrawBitmap+0x500>
 800c778:	f109 0901 	add.w	r9, r9, #1
 800c77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c77e:	00b6      	lsls	r6, r6, #2
 800c780:	4599      	cmp	r9, r3
 800c782:	b2f6      	uxtb	r6, r6
 800c784:	d1f5      	bne.n	800c772 <_DrawBitmap+0x4ae>
 800c786:	1c6b      	adds	r3, r5, #1
 800c788:	3701      	adds	r7, #1
 800c78a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c78e:	442f      	add	r7, r5
 800c790:	f1b8 0f00 	cmp.w	r8, #0
 800c794:	f000 8116 	beq.w	800c9c4 <_DrawBitmap+0x700>
 800c798:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800c79c:	2504      	movs	r5, #4
 800c79e:	4545      	cmp	r5, r8
 800c7a0:	f107 0301 	add.w	r3, r7, #1
 800c7a4:	46b9      	mov	r9, r7
 800c7a6:	bfc8      	it	gt
 800c7a8:	fa5f f588 	uxtbgt.w	r5, r8
 800c7ac:	ebc5 0808 	rsb	r8, r5, r8
 800c7b0:	3d01      	subs	r5, #1
 800c7b2:	b2ed      	uxtb	r5, r5
 800c7b4:	442b      	add	r3, r5
 800c7b6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7b8:	f06f 0303 	mvn.w	r3, #3
 800c7bc:	fb03 4307 	mla	r3, r3, r7, r4
 800c7c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c7c2:	e7d6      	b.n	800c772 <_DrawBitmap+0x4ae>
 800c7c4:	09b3      	lsrs	r3, r6, #6
 800c7c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7c8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c7cc:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 800c7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0d0      	beq.n	800c778 <_DrawBitmap+0x4b4>
 800c7d6:	689b      	ldr	r3, [r3, #8]
 800c7d8:	4649      	mov	r1, r9
 800c7da:	9a05      	ldr	r2, [sp, #20]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7e0:	4798      	blx	r3
 800c7e2:	e7c9      	b.n	800c778 <_DrawBitmap+0x4b4>
 800c7e4:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800c7e8:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800c7ec:	ea4f 0686 	mov.w	r6, r6, lsl #2
 800c7f0:	f100 0004 	add.w	r0, r0, #4
 800c7f4:	bf18      	it	ne
 800c7f6:	f850 1c04 	ldrne.w	r1, [r0, #-4]
 800c7fa:	b2f6      	uxtb	r6, r6
 800c7fc:	bf1c      	itt	ne
 800c7fe:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 800c802:	f840 1c04 	strne.w	r1, [r0, #-4]
 800c806:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800c80a:	d1eb      	bne.n	800c7e4 <_DrawBitmap+0x520>
 800c80c:	3d01      	subs	r5, #1
 800c80e:	b2ed      	uxtb	r5, r5
 800c810:	3501      	adds	r5, #1
 800c812:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800c816:	2b00      	cmp	r3, #0
 800c818:	f000 80d4 	beq.w	800c9c4 <_DrawBitmap+0x700>
 800c81c:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800c820:	2504      	movs	r5, #4
 800c822:	429d      	cmp	r5, r3
 800c824:	4620      	mov	r0, r4
 800c826:	bfc8      	it	gt
 800c828:	b2dd      	uxtbgt	r5, r3
 800c82a:	1b5b      	subs	r3, r3, r5
 800c82c:	462a      	mov	r2, r5
 800c82e:	e7d9      	b.n	800c7e4 <_DrawBitmap+0x520>
 800c830:	9b04      	ldr	r3, [sp, #16]
 800c832:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c834:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c838:	4093      	lsls	r3, r2
 800c83a:	4a07      	ldr	r2, [pc, #28]	; (800c858 <_DrawBitmap+0x594>)
 800c83c:	6812      	ldr	r2, [r2, #0]
 800c83e:	b2dd      	uxtb	r5, r3
 800c840:	7c12      	ldrb	r2, [r2, #16]
 800c842:	f002 0203 	and.w	r2, r2, #3
 800c846:	2a01      	cmp	r2, #1
 800c848:	f000 8093 	beq.w	800c972 <_DrawBitmap+0x6ae>
 800c84c:	d308      	bcc.n	800c860 <_DrawBitmap+0x59c>
 800c84e:	2a02      	cmp	r2, #2
 800c850:	d037      	beq.n	800c8c2 <_DrawBitmap+0x5fe>
 800c852:	e0b7      	b.n	800c9c4 <_DrawBitmap+0x700>
 800c854:	0800e9f0 	.word	0x0800e9f0
 800c858:	20000014 	.word	0x20000014
 800c85c:	0800e88c 	.word	0x0800e88c
 800c860:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c862:	b153      	cbz	r3, 800c87a <_DrawBitmap+0x5b6>
 800c864:	092d      	lsrs	r5, r5, #4
 800c866:	9a04      	ldr	r2, [sp, #16]
 800c868:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800c86c:	4692      	mov	sl, r2
 800c86e:	6023      	str	r3, [r4, #0]
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	9c07      	ldr	r4, [sp, #28]
 800c874:	3b01      	subs	r3, #1
 800c876:	7815      	ldrb	r5, [r2, #0]
 800c878:	e000      	b.n	800c87c <_DrawBitmap+0x5b8>
 800c87a:	9b02      	ldr	r3, [sp, #8]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	dd18      	ble.n	800c8b2 <_DrawBitmap+0x5ee>
 800c880:	1058      	asrs	r0, r3, #1
 800c882:	f104 0208 	add.w	r2, r4, #8
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	eb0a 0600 	add.w	r6, sl, r0
 800c88e:	0929      	lsrs	r1, r5, #4
 800c890:	f005 050f 	and.w	r5, r5, #15
 800c894:	3208      	adds	r2, #8
 800c896:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800c89a:	f842 1c10 	str.w	r1, [r2, #-16]
 800c89e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800c8a2:	f842 1c0c 	str.w	r1, [r2, #-12]
 800c8a6:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800c8aa:	45b2      	cmp	sl, r6
 800c8ac:	d1ef      	bne.n	800c88e <_DrawBitmap+0x5ca>
 800c8ae:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 8086 	beq.w	800c9c4 <_DrawBitmap+0x700>
 800c8b8:	092d      	lsrs	r5, r5, #4
 800c8ba:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800c8be:	6023      	str	r3, [r4, #0]
 800c8c0:	e080      	b.n	800c9c4 <_DrawBitmap+0x700>
 800c8c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c8c4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800c8c6:	b1ba      	cbz	r2, 800c8f8 <_DrawBitmap+0x634>
 800c8c8:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c8cc:	d00a      	beq.n	800c8e4 <_DrawBitmap+0x620>
 800c8ce:	092d      	lsrs	r5, r5, #4
 800c8d0:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800c8d4:	6023      	str	r3, [r4, #0]
 800c8d6:	b12e      	cbz	r6, 800c8e4 <_DrawBitmap+0x620>
 800c8d8:	68b3      	ldr	r3, [r6, #8]
 800c8da:	4630      	mov	r0, r6
 800c8dc:	9a05      	ldr	r2, [sp, #20]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	9903      	ldr	r1, [sp, #12]
 800c8e2:	4798      	blx	r3
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	9c07      	ldr	r4, [sp, #28]
 800c8e8:	1c5f      	adds	r7, r3, #1
 800c8ea:	9b02      	ldr	r3, [sp, #8]
 800c8ec:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	781d      	ldrb	r5, [r3, #0]
 800c8f4:	469a      	mov	sl, r3
 800c8f6:	e00f      	b.n	800c918 <_DrawBitmap+0x654>
 800c8f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c8fc:	9f03      	ldr	r7, [sp, #12]
 800c8fe:	e00b      	b.n	800c918 <_DrawBitmap+0x654>
 800c900:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800c904:	d10c      	bne.n	800c920 <_DrawBitmap+0x65c>
 800c906:	f015 050f 	ands.w	r5, r5, #15
 800c90a:	d116      	bne.n	800c93a <_DrawBitmap+0x676>
 800c90c:	3408      	adds	r4, #8
 800c90e:	3702      	adds	r7, #2
 800c910:	f1a8 0802 	sub.w	r8, r8, #2
 800c914:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800c918:	f1b8 0f01 	cmp.w	r8, #1
 800c91c:	dcf0      	bgt.n	800c900 <_DrawBitmap+0x63c>
 800c91e:	e018      	b.n	800c952 <_DrawBitmap+0x68e>
 800c920:	092b      	lsrs	r3, r5, #4
 800c922:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c926:	6023      	str	r3, [r4, #0]
 800c928:	2e00      	cmp	r6, #0
 800c92a:	d0ec      	beq.n	800c906 <_DrawBitmap+0x642>
 800c92c:	68b3      	ldr	r3, [r6, #8]
 800c92e:	4639      	mov	r1, r7
 800c930:	9a05      	ldr	r2, [sp, #20]
 800c932:	4630      	mov	r0, r6
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4798      	blx	r3
 800c938:	e7e5      	b.n	800c906 <_DrawBitmap+0x642>
 800c93a:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800c93e:	6063      	str	r3, [r4, #4]
 800c940:	2e00      	cmp	r6, #0
 800c942:	d0e3      	beq.n	800c90c <_DrawBitmap+0x648>
 800c944:	68b3      	ldr	r3, [r6, #8]
 800c946:	1c79      	adds	r1, r7, #1
 800c948:	9a05      	ldr	r2, [sp, #20]
 800c94a:	4630      	mov	r0, r6
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4798      	blx	r3
 800c950:	e7dc      	b.n	800c90c <_DrawBitmap+0x648>
 800c952:	f1b8 0f00 	cmp.w	r8, #0
 800c956:	d035      	beq.n	800c9c4 <_DrawBitmap+0x700>
 800c958:	092d      	lsrs	r5, r5, #4
 800c95a:	d033      	beq.n	800c9c4 <_DrawBitmap+0x700>
 800c95c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800c960:	6023      	str	r3, [r4, #0]
 800c962:	b37e      	cbz	r6, 800c9c4 <_DrawBitmap+0x700>
 800c964:	68b3      	ldr	r3, [r6, #8]
 800c966:	4639      	mov	r1, r7
 800c968:	9a05      	ldr	r2, [sp, #20]
 800c96a:	4630      	mov	r0, r6
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4798      	blx	r3
 800c970:	e028      	b.n	800c9c4 <_DrawBitmap+0x700>
 800c972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c974:	9a02      	ldr	r2, [sp, #8]
 800c976:	f1c3 0302 	rsb	r3, r3, #2
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	4293      	cmp	r3, r2
 800c97e:	4626      	mov	r6, r4
 800c980:	bfc8      	it	gt
 800c982:	b2d3      	uxtbgt	r3, r2
 800c984:	1ad2      	subs	r2, r2, r3
 800c986:	4619      	mov	r1, r3
 800c988:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800c98c:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800c990:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c994:	f106 0604 	add.w	r6, r6, #4
 800c998:	bf18      	it	ne
 800c99a:	f856 0c04 	ldrne.w	r0, [r6, #-4]
 800c99e:	b2ed      	uxtb	r5, r5
 800c9a0:	bf1c      	itt	ne
 800c9a2:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 800c9a6:	f846 0c04 	strne.w	r0, [r6, #-4]
 800c9aa:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800c9ae:	d1eb      	bne.n	800c988 <_DrawBitmap+0x6c4>
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800c9ba:	b11a      	cbz	r2, 800c9c4 <_DrawBitmap+0x700>
 800c9bc:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	e7db      	b.n	800c97c <_DrawBitmap+0x6b8>
 800c9c4:	9b05      	ldr	r3, [sp, #20]
 800c9c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9305      	str	r3, [sp, #20]
 800c9cc:	9b04      	ldr	r3, [sp, #16]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	9a08      	ldr	r2, [sp, #32]
 800c9d2:	9304      	str	r3, [sp, #16]
 800c9d4:	9b07      	ldr	r3, [sp, #28]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	9307      	str	r3, [sp, #28]
 800c9da:	e5e4      	b.n	800c5a6 <_DrawBitmap+0x2e2>
 800c9dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c9de:	b113      	cbz	r3, 800c9e6 <_DrawBitmap+0x722>
 800c9e0:	a80f      	add	r0, sp, #60	; 0x3c
 800c9e2:	f7f8 f991 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800c9e6:	b011      	add	sp, #68	; 0x44
 800c9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9ec <GUI_MEMDEV__WriteToActiveAlpha>:
 800c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	4c5c      	ldr	r4, [pc, #368]	; (800cb64 <GUI_MEMDEV__WriteToActiveAlpha+0x178>)
 800c9f2:	b091      	sub	sp, #68	; 0x44
 800c9f4:	4f5c      	ldr	r7, [pc, #368]	; (800cb68 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>)
 800c9f6:	4688      	mov	r8, r1
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	4615      	mov	r5, r2
 800c9fc:	900c      	str	r0, [sp, #48]	; 0x30
 800c9fe:	7c5b      	ldrb	r3, [r3, #17]
 800ca00:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800ca04:	f8d3 a010 	ldr.w	sl, [r3, #16]
 800ca08:	f7f8 f970 	bl	8004cec <GUI_ALLOC_LockH>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	a810      	add	r0, sp, #64	; 0x40
 800ca10:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 800ca14:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ca18:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	691b      	ldr	r3, [r3, #16]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	9308      	str	r3, [sp, #32]
 800ca24:	f7f8 f970 	bl	8004d08 <GUI_ALLOC_UnlockH>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	2108      	movs	r1, #8
 800ca2c:	7c5b      	ldrb	r3, [r3, #17]
 800ca2e:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 800ca32:	68c3      	ldr	r3, [r0, #12]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	4798      	blx	r3
 800ca38:	2817      	cmp	r0, #23
 800ca3a:	4607      	mov	r7, r0
 800ca3c:	d804      	bhi.n	800ca48 <GUI_MEMDEV__WriteToActiveAlpha+0x5c>
 800ca3e:	2803      	cmp	r0, #3
 800ca40:	bf14      	ite	ne
 800ca42:	4607      	movne	r7, r0
 800ca44:	2708      	moveq	r7, #8
 800ca46:	e000      	b.n	800ca4a <GUI_MEMDEV__WriteToActiveAlpha+0x5e>
 800ca48:	2720      	movs	r7, #32
 800ca4a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ca4e:	2000      	movs	r0, #0
 800ca50:	9309      	str	r3, [sp, #36]	; 0x24
 800ca52:	f8da 3000 	ldr.w	r3, [sl]
 800ca56:	930a      	str	r3, [sp, #40]	; 0x28
 800ca58:	f7fe f9ec 	bl	800ae34 <GUI__AllocAlphaBuffer>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d17e      	bne.n	800cb5e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800ca60:	6822      	ldr	r2, [r4, #0]
 800ca62:	eb08 0406 	add.w	r4, r8, r6
 800ca66:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800ca6a:	3c01      	subs	r4, #1
 800ca6c:	1ae4      	subs	r4, r4, r3
 800ca6e:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 800ca72:	2c00      	cmp	r4, #0
 800ca74:	bfcc      	ite	gt
 800ca76:	1b34      	subgt	r4, r6, r4
 800ca78:	4634      	movle	r4, r6
 800ca7a:	4598      	cmp	r8, r3
 800ca7c:	bfb7      	itett	lt
 800ca7e:	ebc8 0103 	rsblt	r1, r8, r3
 800ca82:	2100      	movge	r1, #0
 800ca84:	4698      	movlt	r8, r3
 800ca86:	1a64      	sublt	r4, r4, r1
 800ca88:	2c00      	cmp	r4, #0
 800ca8a:	dd68      	ble.n	800cb5e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800ca8c:	eb05 0309 	add.w	r3, r5, r9
 800ca90:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 800ca94:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	1a1b      	subs	r3, r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfc8      	it	gt
 800caa0:	ebc3 0909 	rsbgt	r9, r3, r9
 800caa4:	4295      	cmp	r5, r2
 800caa6:	bfb7      	itett	lt
 800caa8:	1b53      	sublt	r3, r2, r5
 800caaa:	2300      	movge	r3, #0
 800caac:	4615      	movlt	r5, r2
 800caae:	ebc3 0909 	rsblt	r9, r3, r9
 800cab2:	f1b9 0f00 	cmp.w	r9, #0
 800cab6:	dd52      	ble.n	800cb5e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800cab8:	fb03 1106 	mla	r1, r3, r6, r1
 800cabc:	008b      	lsls	r3, r1, #2
 800cabe:	9307      	str	r3, [sp, #28]
 800cac0:	eb05 0309 	add.w	r3, r5, r9
 800cac4:	930b      	str	r3, [sp, #44]	; 0x2c
 800cac6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cac8:	f7ff f834 	bl	800bb34 <GUI_MEMDEV_GetDataPtr>
 800cacc:	ab0f      	add	r3, sp, #60	; 0x3c
 800cace:	9a07      	ldr	r2, [sp, #28]
 800cad0:	4629      	mov	r1, r5
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	9b08      	ldr	r3, [sp, #32]
 800cad6:	1882      	adds	r2, r0, r2
 800cad8:	4640      	mov	r0, r8
 800cada:	9300      	str	r3, [sp, #0]
 800cadc:	4623      	mov	r3, r4
 800cade:	f7fe f8bf 	bl	800ac60 <GUI__DoAlphaBlending>
 800cae2:	4681      	mov	r9, r0
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d03a      	beq.n	800cb5e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800cae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caea:	461a      	mov	r2, r3
 800caec:	4b1f      	ldr	r3, [pc, #124]	; (800cb6c <GUI_MEMDEV__WriteToActiveAlpha+0x180>)
 800caee:	429a      	cmp	r2, r3
 800caf0:	d01c      	beq.n	800cb2c <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800caf2:	4653      	mov	r3, sl
 800caf4:	463a      	mov	r2, r7
 800caf6:	4621      	mov	r1, r4
 800caf8:	f7fe fb2b 	bl	800b152 <GUI__CompactPixelIndicesEx>
 800cafc:	b9b0      	cbnz	r0, 800cb2c <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800cafe:	f8da b010 	ldr.w	fp, [sl, #16]
 800cb02:	f1bb 0f00 	cmp.w	fp, #0
 800cb06:	d005      	beq.n	800cb14 <GUI_MEMDEV__WriteToActiveAlpha+0x128>
 800cb08:	2304      	movs	r3, #4
 800cb0a:	4632      	mov	r2, r6
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	4648      	mov	r0, r9
 800cb10:	47d8      	blx	fp
 800cb12:	e00b      	b.n	800cb2c <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 800cb14:	464b      	mov	r3, r9
 800cb16:	46b3      	mov	fp, r6
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	930d      	str	r3, [sp, #52]	; 0x34
 800cb1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb1e:	4798      	blx	r3
 800cb20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb22:	f1bb 0b01 	subs.w	fp, fp, #1
 800cb26:	f843 0b04 	str.w	r0, [r3], #4
 800cb2a:	d1f5      	bne.n	800cb18 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f8cd 9010 	str.w	r9, [sp, #16]
 800cb32:	9702      	str	r7, [sp, #8]
 800cb34:	4622      	mov	r2, r4
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	4629      	mov	r1, r5
 800cb3a:	9303      	str	r3, [sp, #12]
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	4640      	mov	r0, r8
 800cb40:	f105 0b01 	add.w	fp, r5, #1
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	f7f9 f99c 	bl	8005e84 <LCD_DrawBitmap>
 800cb4c:	9b07      	ldr	r3, [sp, #28]
 800cb4e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800cb52:	9307      	str	r3, [sp, #28]
 800cb54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb56:	459b      	cmp	fp, r3
 800cb58:	d001      	beq.n	800cb5e <GUI_MEMDEV__WriteToActiveAlpha+0x172>
 800cb5a:	465d      	mov	r5, fp
 800cb5c:	e7b3      	b.n	800cac6 <GUI_MEMDEV__WriteToActiveAlpha+0xda>
 800cb5e:	b011      	add	sp, #68	; 0x44
 800cb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb64:	20000014 	.word	0x20000014
 800cb68:	2001d9e8 	.word	0x2001d9e8
 800cb6c:	0800bfc5 	.word	0x0800bfc5

0800cb70 <__libc_init_array>:
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	4d0d      	ldr	r5, [pc, #52]	; (800cba8 <__libc_init_array+0x38>)
 800cb74:	4c0d      	ldr	r4, [pc, #52]	; (800cbac <__libc_init_array+0x3c>)
 800cb76:	1b64      	subs	r4, r4, r5
 800cb78:	10a4      	asrs	r4, r4, #2
 800cb7a:	2600      	movs	r6, #0
 800cb7c:	42a6      	cmp	r6, r4
 800cb7e:	d109      	bne.n	800cb94 <__libc_init_array+0x24>
 800cb80:	4d0b      	ldr	r5, [pc, #44]	; (800cbb0 <__libc_init_array+0x40>)
 800cb82:	4c0c      	ldr	r4, [pc, #48]	; (800cbb4 <__libc_init_array+0x44>)
 800cb84:	f000 f848 	bl	800cc18 <_init>
 800cb88:	1b64      	subs	r4, r4, r5
 800cb8a:	10a4      	asrs	r4, r4, #2
 800cb8c:	2600      	movs	r6, #0
 800cb8e:	42a6      	cmp	r6, r4
 800cb90:	d105      	bne.n	800cb9e <__libc_init_array+0x2e>
 800cb92:	bd70      	pop	{r4, r5, r6, pc}
 800cb94:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb98:	4798      	blx	r3
 800cb9a:	3601      	adds	r6, #1
 800cb9c:	e7ee      	b.n	800cb7c <__libc_init_array+0xc>
 800cb9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cba2:	4798      	blx	r3
 800cba4:	3601      	adds	r6, #1
 800cba6:	e7f2      	b.n	800cb8e <__libc_init_array+0x1e>
 800cba8:	0800ea50 	.word	0x0800ea50
 800cbac:	0800ea50 	.word	0x0800ea50
 800cbb0:	0800ea50 	.word	0x0800ea50
 800cbb4:	0800ea54 	.word	0x0800ea54

0800cbb8 <memcpy>:
 800cbb8:	440a      	add	r2, r1
 800cbba:	4291      	cmp	r1, r2
 800cbbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cbc0:	d100      	bne.n	800cbc4 <memcpy+0xc>
 800cbc2:	4770      	bx	lr
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbce:	4291      	cmp	r1, r2
 800cbd0:	d1f9      	bne.n	800cbc6 <memcpy+0xe>
 800cbd2:	bd10      	pop	{r4, pc}

0800cbd4 <memmove>:
 800cbd4:	4288      	cmp	r0, r1
 800cbd6:	b510      	push	{r4, lr}
 800cbd8:	eb01 0402 	add.w	r4, r1, r2
 800cbdc:	d902      	bls.n	800cbe4 <memmove+0x10>
 800cbde:	4284      	cmp	r4, r0
 800cbe0:	4623      	mov	r3, r4
 800cbe2:	d807      	bhi.n	800cbf4 <memmove+0x20>
 800cbe4:	1e43      	subs	r3, r0, #1
 800cbe6:	42a1      	cmp	r1, r4
 800cbe8:	d008      	beq.n	800cbfc <memmove+0x28>
 800cbea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbf2:	e7f8      	b.n	800cbe6 <memmove+0x12>
 800cbf4:	4402      	add	r2, r0
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	428a      	cmp	r2, r1
 800cbfa:	d100      	bne.n	800cbfe <memmove+0x2a>
 800cbfc:	bd10      	pop	{r4, pc}
 800cbfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc06:	e7f7      	b.n	800cbf8 <memmove+0x24>

0800cc08 <memset>:
 800cc08:	4402      	add	r2, r0
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d100      	bne.n	800cc12 <memset+0xa>
 800cc10:	4770      	bx	lr
 800cc12:	f803 1b01 	strb.w	r1, [r3], #1
 800cc16:	e7f9      	b.n	800cc0c <memset+0x4>

0800cc18 <_init>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	bf00      	nop
 800cc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1e:	bc08      	pop	{r3}
 800cc20:	469e      	mov	lr, r3
 800cc22:	4770      	bx	lr

0800cc24 <_fini>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	bf00      	nop
 800cc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc2a:	bc08      	pop	{r3}
 800cc2c:	469e      	mov	lr, r3
 800cc2e:	4770      	bx	lr
